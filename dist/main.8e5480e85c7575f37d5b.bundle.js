var voxa_test=function(Q){function U(F){if(B[F])return B[F].exports;var s=B[F]={i:F,l:!1,exports:{}};return Q[F].call(s.exports,s,s.exports,U),s.l=!0,s.exports}var B={};return U.m=Q,U.c=B,U.d=function(Q,B,F){U.o(Q,B)||Object.defineProperty(Q,B,{configurable:!1,enumerable:!0,get:F})},U.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(B,"a",B),B},U.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},U.p="/",U(U.s=19)}([function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CircularList_1 = __webpack_require__(28);\nvar EventEmitter_1 = __webpack_require__(2);\nvar BufferLine_1 = __webpack_require__(29);\nvar Types_1 = __webpack_require__(1);\nexports.DEFAULT_ATTR = (0 << 18) | (Types_1.DEFAULT_COLOR << 9) | (256 << 0);\nexports.CHAR_DATA_ATTR_INDEX = 0;\nexports.CHAR_DATA_CHAR_INDEX = 1;\nexports.CHAR_DATA_WIDTH_INDEX = 2;\nexports.CHAR_DATA_CODE_INDEX = 3;\nexports.MAX_BUFFER_SIZE = 4294967295;\nexports.NULL_CELL_CHAR = ' ';\nexports.NULL_CELL_WIDTH = 1;\nexports.NULL_CELL_CODE = 32;\nvar Buffer = (function () {\n    function Buffer(_terminal, _hasScrollback) {\n        this._terminal = _terminal;\n        this._hasScrollback = _hasScrollback;\n        this.markers = [];\n        this.clear();\n    }\n    Buffer.prototype.setBufferLineFactory = function (type) {\n        if (type === 'JsArray') {\n            if (this._bufferLineConstructor !== BufferLine_1.BufferLineJSArray) {\n                this._bufferLineConstructor = BufferLine_1.BufferLineJSArray;\n                this._recreateLines();\n            }\n        }\n        else {\n            if (this._bufferLineConstructor !== BufferLine_1.BufferLine) {\n                this._bufferLineConstructor = BufferLine_1.BufferLine;\n                this._recreateLines();\n            }\n        }\n    };\n    Buffer.prototype._recreateLines = function () {\n        if (!this.lines)\n            return;\n        for (var i = 0; i < this.lines.length; ++i) {\n            var oldLine = this.lines.get(i);\n            var newLine = new this._bufferLineConstructor(oldLine.length);\n            for (var j = 0; j < oldLine.length; ++j) {\n                newLine.set(j, oldLine.get(j));\n            }\n            this.lines.set(i, newLine);\n        }\n    };\n    Buffer.prototype.getBlankLine = function (attr, isWrapped) {\n        var fillCharData = [attr, exports.NULL_CELL_CHAR, exports.NULL_CELL_WIDTH, exports.NULL_CELL_CODE];\n        return new this._bufferLineConstructor(this._terminal.cols, fillCharData, isWrapped);\n    };\n    Object.defineProperty(Buffer.prototype, \"hasScrollback\", {\n        get: function () {\n            return this._hasScrollback && this.lines.maxLength > this._terminal.rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Buffer.prototype, \"isCursorInViewport\", {\n        get: function () {\n            var absoluteY = this.ybase + this.y;\n            var relativeY = absoluteY - this.ydisp;\n            return (relativeY >= 0 && relativeY < this._terminal.rows);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Buffer.prototype._getCorrectBufferLength = function (rows) {\n        if (!this._hasScrollback) {\n            return rows;\n        }\n        var correctBufferLength = rows + this._terminal.options.scrollback;\n        return correctBufferLength > exports.MAX_BUFFER_SIZE ? exports.MAX_BUFFER_SIZE : correctBufferLength;\n    };\n    Buffer.prototype.fillViewportRows = function (fillAttr) {\n        if (this.lines.length === 0) {\n            if (fillAttr === undefined) {\n                fillAttr = exports.DEFAULT_ATTR;\n            }\n            var i = this._terminal.rows;\n            while (i--) {\n                this.lines.push(this.getBlankLine(fillAttr));\n            }\n        }\n    };\n    Buffer.prototype.clear = function () {\n        this.setBufferLineFactory(this._terminal.options.experimentalBufferLineImpl);\n        this.ydisp = 0;\n        this.ybase = 0;\n        this.y = 0;\n        this.x = 0;\n        this.lines = new CircularList_1.CircularList(this._getCorrectBufferLength(this._terminal.rows));\n        this.scrollTop = 0;\n        this.scrollBottom = this._terminal.rows - 1;\n        this.setupTabStops();\n    };\n    Buffer.prototype.resize = function (newCols, newRows) {\n        var newMaxLength = this._getCorrectBufferLength(newRows);\n        if (newMaxLength > this.lines.maxLength) {\n            this.lines.maxLength = newMaxLength;\n        }\n        if (this.lines.length > 0) {\n            if (this._terminal.cols < newCols) {\n                var ch = [exports.DEFAULT_ATTR, exports.NULL_CELL_CHAR, exports.NULL_CELL_WIDTH, exports.NULL_CELL_CODE];\n                for (var i = 0; i < this.lines.length; i++) {\n                    this.lines.get(i).resize(newCols, ch);\n                }\n            }\n            var addToY = 0;\n            if (this._terminal.rows < newRows) {\n                for (var y = this._terminal.rows; y < newRows; y++) {\n                    if (this.lines.length < newRows + this.ybase) {\n                        if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                            this.ybase--;\n                            addToY++;\n                            if (this.ydisp > 0) {\n                                this.ydisp--;\n                            }\n                        }\n                        else {\n                            var fillCharData = [exports.DEFAULT_ATTR, exports.NULL_CELL_CHAR, exports.NULL_CELL_WIDTH, exports.NULL_CELL_CODE];\n                            this.lines.push(new this._bufferLineConstructor(newCols, fillCharData));\n                        }\n                    }\n                }\n            }\n            else {\n                for (var y = this._terminal.rows; y > newRows; y--) {\n                    if (this.lines.length > newRows + this.ybase) {\n                        if (this.lines.length > this.ybase + this.y + 1) {\n                            this.lines.pop();\n                        }\n                        else {\n                            this.ybase++;\n                            this.ydisp++;\n                        }\n                    }\n                }\n            }\n            if (newMaxLength < this.lines.maxLength) {\n                var amountToTrim = this.lines.length - newMaxLength;\n                if (amountToTrim > 0) {\n                    this.lines.trimStart(amountToTrim);\n                    this.ybase = Math.max(this.ybase - amountToTrim, 0);\n                    this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n                }\n                this.lines.maxLength = newMaxLength;\n            }\n            this.x = Math.min(this.x, newCols - 1);\n            this.y = Math.min(this.y, newRows - 1);\n            if (addToY) {\n                this.y += addToY;\n            }\n            this.savedY = Math.min(this.savedY, newRows - 1);\n            this.savedX = Math.min(this.savedX, newCols - 1);\n            this.scrollTop = 0;\n        }\n        this.scrollBottom = newRows - 1;\n    };\n    Buffer.prototype.stringIndexToBufferIndex = function (lineIndex, stringIndex) {\n        while (stringIndex) {\n            var line = this.lines.get(lineIndex);\n            if (!line) {\n                [-1, -1];\n            }\n            for (var i = 0; i < line.length; ++i) {\n                stringIndex -= line.get(i)[exports.CHAR_DATA_CHAR_INDEX].length;\n                if (stringIndex < 0) {\n                    return [lineIndex, i];\n                }\n            }\n            lineIndex++;\n        }\n        return [lineIndex, 0];\n    };\n    Buffer.prototype.translateBufferLineToString = function (lineIndex, trimRight, startCol, endCol) {\n        if (startCol === void 0) { startCol = 0; }\n        if (endCol === void 0) { endCol = null; }\n        var lineString = '';\n        var line = this.lines.get(lineIndex);\n        if (!line) {\n            return '';\n        }\n        var startIndex = startCol;\n        if (endCol === null) {\n            endCol = line.length;\n        }\n        var endIndex = endCol;\n        for (var i = 0; i < line.length; i++) {\n            var char = line.get(i);\n            lineString += char[exports.CHAR_DATA_CHAR_INDEX];\n            if (char[exports.CHAR_DATA_WIDTH_INDEX] === 0) {\n                if (startCol >= i) {\n                    startIndex--;\n                }\n                if (endCol > i) {\n                    endIndex--;\n                }\n            }\n            else {\n                if (char[exports.CHAR_DATA_CHAR_INDEX].length > 1) {\n                    if (startCol > i) {\n                        startIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\n                    }\n                    if (endCol > i) {\n                        endIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\n                    }\n                }\n            }\n        }\n        if (trimRight) {\n            var rightWhitespaceIndex = lineString.search(/\\s+$/);\n            if (rightWhitespaceIndex !== -1) {\n                endIndex = Math.min(endIndex, rightWhitespaceIndex);\n            }\n            if (endIndex <= startIndex) {\n                return '';\n            }\n        }\n        return lineString.substring(startIndex, endIndex);\n    };\n    Buffer.prototype.getWrappedRangeForLine = function (y) {\n        var first = y;\n        var last = y;\n        while (first > 0 && this.lines.get(first).isWrapped) {\n            first--;\n        }\n        while (last + 1 < this.lines.length && this.lines.get(last + 1).isWrapped) {\n            last++;\n        }\n        return { first: first, last: last };\n    };\n    Buffer.prototype.setupTabStops = function (i) {\n        if (i !== null && i !== undefined) {\n            if (!this.tabs[i]) {\n                i = this.prevStop(i);\n            }\n        }\n        else {\n            this.tabs = {};\n            i = 0;\n        }\n        for (; i < this._terminal.cols; i += this._terminal.options.tabStopWidth) {\n            this.tabs[i] = true;\n        }\n    };\n    Buffer.prototype.prevStop = function (x) {\n        if (x === null || x === undefined) {\n            x = this.x;\n        }\n        while (!this.tabs[--x] && x > 0)\n            ;\n        return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n    };\n    Buffer.prototype.nextStop = function (x) {\n        if (x === null || x === undefined) {\n            x = this.x;\n        }\n        while (!this.tabs[++x] && x < this._terminal.cols)\n            ;\n        return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n    };\n    Buffer.prototype.addMarker = function (y) {\n        var _this = this;\n        var marker = new Marker(y);\n        this.markers.push(marker);\n        marker.register(this.lines.addDisposableListener('trim', function (amount) {\n            marker.line -= amount;\n            if (marker.line < 0) {\n                marker.dispose();\n            }\n        }));\n        marker.register(marker.addDisposableListener('dispose', function () { return _this._removeMarker(marker); }));\n        return marker;\n    };\n    Buffer.prototype._removeMarker = function (marker) {\n        this.markers.splice(this.markers.indexOf(marker), 1);\n    };\n    Buffer.prototype.iterator = function (trimRight, startIndex, endIndex, startOverscan, endOverscan) {\n        return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n    };\n    return Buffer;\n}());\nexports.Buffer = Buffer;\nvar Marker = (function (_super) {\n    __extends(Marker, _super);\n    function Marker(line) {\n        var _this = _super.call(this) || this;\n        _this.line = line;\n        _this._id = Marker._nextId++;\n        _this.isDisposed = false;\n        return _this;\n    }\n    Object.defineProperty(Marker.prototype, \"id\", {\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Marker.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this.isDisposed = true;\n        this.emit('dispose');\n        _super.prototype.dispose.call(this);\n    };\n    Marker._nextId = 1;\n    return Marker;\n}(EventEmitter_1.EventEmitter));\nexports.Marker = Marker;\nvar BufferStringIterator = (function () {\n    function BufferStringIterator(_buffer, _trimRight, _startIndex, _endIndex, _startOverscan, _endOverscan) {\n        if (_startIndex === void 0) { _startIndex = 0; }\n        if (_endIndex === void 0) { _endIndex = _buffer.lines.length; }\n        if (_startOverscan === void 0) { _startOverscan = 0; }\n        if (_endOverscan === void 0) { _endOverscan = 0; }\n        this._buffer = _buffer;\n        this._trimRight = _trimRight;\n        this._startIndex = _startIndex;\n        this._endIndex = _endIndex;\n        this._startOverscan = _startOverscan;\n        this._endOverscan = _endOverscan;\n        if (this._startIndex < 0) {\n            this._startIndex = 0;\n        }\n        if (this._endIndex > this._buffer.lines.length) {\n            this._endIndex = this._buffer.lines.length;\n        }\n        this._current = this._startIndex;\n    }\n    BufferStringIterator.prototype.hasNext = function () {\n        return this._current < this._endIndex;\n    };\n    BufferStringIterator.prototype.next = function () {\n        var range = this._buffer.getWrappedRangeForLine(this._current);\n        if (range.first < this._startIndex - this._startOverscan) {\n            range.first = this._startIndex - this._startOverscan;\n        }\n        if (range.last > this._endIndex + this._endOverscan) {\n            range.last = this._endIndex + this._endOverscan;\n        }\n        range.first = Math.max(range.first, 0);\n        range.last = Math.min(range.last, this._buffer.lines.length);\n        var result = '';\n        for (var i = range.first; i <= range.last; ++i) {\n            result += this._buffer.translateBufferLineToString(i, (this._trimRight) ? i === range.last : false);\n        }\n        this._current = range.last + 1;\n        return { range: range, content: result };\n    };\n    return BufferStringIterator;\n}());\nexports.BufferStringIterator = BufferStringIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.DEFAULT_COLOR = 256;\nexports.INVERTED_DEFAULT_COLOR = 257;\nexports.DIM_OPACITY = 0.5;\nexports.CHAR_ATLAS_CELL_SPACING = 1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL1R5cGVzLnRzPzJlYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRYSxxQkFBYSxHQUFHLEdBQUcsQ0FBQztBQUNwQiw4QkFBc0IsR0FBRyxHQUFHLENBQUM7QUFDN0IsbUJBQVcsR0FBRyxHQUFHLENBQUM7QUFFbEIsK0JBQXVCLEdBQUcsQ0FBQyxDQUFDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IEZvbnRXZWlnaHQgfSBmcm9tICd4dGVybSc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICcuLi9UeXBlcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTE9SID0gMjU2O1xuZXhwb3J0IGNvbnN0IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgPSAyNTc7XG5leHBvcnQgY29uc3QgRElNX09QQUNJVFkgPSAwLjU7XG5cbmV4cG9ydCBjb25zdCBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORyA9IDE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdseXBoSWRlbnRpZmllciB7XG4gIGNoYXJzOiBzdHJpbmc7XG4gIGNvZGU6IG51bWJlcjtcbiAgYmc6IG51bWJlcjtcbiAgZmc6IG51bWJlcjtcbiAgYm9sZDogYm9vbGVhbjtcbiAgZGltOiBib29sZWFuO1xuICBpdGFsaWM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNoYXJBdGxhc0NvbmZpZyB7XG4gIHR5cGU6ICdub25lJyB8ICdzdGF0aWMnIHwgJ2R5bmFtaWMnO1xuICBkZXZpY2VQaXhlbFJhdGlvOiBudW1iZXI7XG4gIGZvbnRTaXplOiBudW1iZXI7XG4gIGZvbnRGYW1pbHk6IHN0cmluZztcbiAgZm9udFdlaWdodDogRm9udFdlaWdodDtcbiAgZm9udFdlaWdodEJvbGQ6IEZvbnRXZWlnaHQ7XG4gIHNjYWxlZENoYXJXaWR0aDogbnVtYmVyO1xuICBzY2FsZWRDaGFySGVpZ2h0OiBudW1iZXI7XG4gIGFsbG93VHJhbnNwYXJlbmN5OiBib29sZWFuO1xuICBjb2xvcnM6IElDb2xvclNldDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvVHlwZXMudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Lifecycle_1 = __webpack_require__(3);\nvar EventEmitter = (function (_super) {\n    __extends(EventEmitter, _super);\n    function EventEmitter() {\n        var _this = _super.call(this) || this;\n        _this._events = _this._events || {};\n        return _this;\n    }\n    EventEmitter.prototype.on = function (type, listener) {\n        this._events[type] = this._events[type] || [];\n        this._events[type].push(listener);\n    };\n    EventEmitter.prototype.addDisposableListener = function (type, handler) {\n        var _this = this;\n        this.on(type, handler);\n        var disposed = false;\n        return {\n            dispose: function () {\n                if (disposed) {\n                    return;\n                }\n                _this.off(type, handler);\n                disposed = true;\n            }\n        };\n    };\n    EventEmitter.prototype.off = function (type, listener) {\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        var i = obj.length;\n        while (i--) {\n            if (obj[i] === listener) {\n                obj.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.removeAllListeners = function (type) {\n        if (this._events[type]) {\n            delete this._events[type];\n        }\n    };\n    EventEmitter.prototype.emit = function (type) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (!this._events[type]) {\n            return;\n        }\n        var obj = this._events[type];\n        for (var i = 0; i < obj.length; i++) {\n            obj[i].apply(this, args);\n        }\n    };\n    EventEmitter.prototype.listeners = function (type) {\n        return this._events[type] || [];\n    };\n    EventEmitter.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._events = {};\n    };\n    return EventEmitter;\n}(Lifecycle_1.Disposable));\nexports.EventEmitter = EventEmitter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9FdmVudEVtaXR0ZXIudHM/OTJhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFPQSx5Q0FBeUM7QUFFekM7SUFBa0MsZ0NBQVU7SUFHMUM7UUFBQSxZQUNFLGlCQUFPLFNBSVI7UUFEQyxLQUFJLENBQUMsT0FBTyxHQUFTLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDOztJQUMzQyxDQUFDO0lBRU0seUJBQUUsR0FBVCxVQUFVLElBQVksRUFBRSxRQUF1QjtRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFPTSw0Q0FBcUIsR0FBNUIsVUFBNkIsSUFBWSxFQUFFLE9BQXNCO1FBQWpFLGlCQWNDO1FBWkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE9BQU87WUFDTCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxRQUFRLEVBQUU7b0JBRVosT0FBTztpQkFDUjtnQkFDRCxLQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDeEIsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTSwwQkFBRyxHQUFWLFVBQVcsSUFBWSxFQUFFLFFBQXVCO1FBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUVuQixPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ1YsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDakIsT0FBTzthQUNSO1NBQ0Y7SUFDSCxDQUFDO0lBRU0seUNBQWtCLEdBQXpCLFVBQTBCLElBQVk7UUFDcEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFTSwyQkFBSSxHQUFYLFVBQVksSUFBWTtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7O1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUNELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU0sZ0NBQVMsR0FBaEIsVUFBaUIsSUFBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTSw4QkFBTyxHQUFkO1FBQ0UsaUJBQU0sT0FBTyxXQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxDQTVFaUMsc0JBQVUsR0E0RTNDO0FBNUVZLG9DQUFZIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IFh0ZXJtTGlzdGVuZXIgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IElFdmVudEVtaXR0ZXIsIElEaXNwb3NhYmxlIH0gZnJvbSAneHRlcm0nO1xuaW1wb3J0IHsgRGlzcG9zYWJsZSB9IGZyb20gJy4vTGlmZWN5Y2xlJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciBleHRlbmRzIERpc3Bvc2FibGUgaW1wbGVtZW50cyBJRXZlbnRFbWl0dGVyLCBJRGlzcG9zYWJsZSB7XG4gIHByaXZhdGUgX2V2ZW50czoge1t0eXBlOiBzdHJpbmddOiBYdGVybUxpc3RlbmVyW119O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLy8gUmVzdG9yZSB0aGUgcHJldmlvdXMgZXZlbnRzIGlmIGF2YWlsYWJsZSwgdGhpcyB3aWxsIGhhcHBlbiBpZiB0aGVcbiAgICAvLyBjb25zdHJ1Y3RvciBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgb2JqZWN0ICh0ZXJtaW5hbCByZXNldCkuXG4gICAgdGhpcy5fZXZlbnRzID0gKDxhbnk+dGhpcykuX2V2ZW50cyB8fCB7fTtcbiAgfVxuXG4gIHB1YmxpYyBvbih0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiBYdGVybUxpc3RlbmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gdGhpcy5fZXZlbnRzW3R5cGVdIHx8IFtdO1xuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgZGlzcG9zYWJlIGxpc3RlbmVyIHRvIHRoZSBFdmVudEVtaXR0ZXIsIHJldHVybmluZyB0aGUgZGlzcG9zYWJsZS5cbiAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBoYW5kbGVyIGZvciB0aGUgbGlzdGVuZXIuXG4gICAqL1xuICBwdWJsaWMgYWRkRGlzcG9zYWJsZUxpc3RlbmVyKHR5cGU6IHN0cmluZywgaGFuZGxlcjogWHRlcm1MaXN0ZW5lcik6IElEaXNwb3NhYmxlIHtcbiAgICAvLyBUT0RPOiBSZW5hbWUgYWRkRGlzcG9zYWJsZUV2ZW50TGlzdGVuZXIgdG8gbW9yZSBlYXNpbHkgZGlzYW1iaWd1YXRlIGZyb20gRG9tIGxpc3RlbmVyXG4gICAgdGhpcy5vbih0eXBlLCBoYW5kbGVyKTtcbiAgICBsZXQgZGlzcG9zZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICBpZiAoZGlzcG9zZWQpIHtcbiAgICAgICAgICAvLyBBbHJlYWR5IGRpc3Bvc2VkXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2ZmKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvZmYodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogWHRlcm1MaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb2JqID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGxldCBpID0gb2JqLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChvYmpbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIG9iai5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pIHtcbiAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBlbWl0KHR5cGU6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9ialtpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbGlzdGVuZXJzKHR5cGU6IHN0cmluZyk6IFh0ZXJtTGlzdGVuZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50c1t0eXBlXSB8fCBbXTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9jb21tb24vRXZlbnRFbWl0dGVyLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Disposable = (function () {\n    function Disposable() {\n        this._disposables = [];\n        this._isDisposed = false;\n    }\n    Disposable.prototype.dispose = function () {\n        this._isDisposed = true;\n        this._disposables.forEach(function (d) { return d.dispose(); });\n        this._disposables.length = 0;\n    };\n    Disposable.prototype.register = function (d) {\n        this._disposables.push(d);\n    };\n    Disposable.prototype.unregister = function (d) {\n        var index = this._disposables.indexOf(d);\n        if (index !== -1) {\n            this._disposables.splice(index, 1);\n        }\n    };\n    return Disposable;\n}());\nexports.Disposable = Disposable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9MaWZlY3ljbGUudHM/MTFkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBO0lBSUU7UUFIVSxpQkFBWSxHQUFrQixFQUFFLENBQUM7UUFDakMsZ0JBQVcsR0FBWSxLQUFLLENBQUM7SUFHdkMsQ0FBQztJQUtNLDRCQUFPLEdBQWQ7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFDLElBQUksUUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBTU0sNkJBQVEsR0FBZixVQUF1QyxDQUFJO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFPTSwrQkFBVSxHQUFqQixVQUF5QyxDQUFJO1FBQzNDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFDSCxpQkFBQztBQUFELENBQUM7QUFuQ3FCLGdDQUFVIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAneHRlcm0nO1xuXG4vKipcbiAqIEEgYmFzZSBjbGFzcyB0aGF0IGNhbiBiZSBleHRlbmRlZCB0byBwcm92aWRlIGNvbnZlbmllbmNlIG1ldGhvZHMgZm9yIG1hbmFnaW5nIHRoZSBsaWZlY3ljbGUgb2YgYW5cbiAqIG9iamVjdCBhbmQgaXRzIGNvbXBvbmVudHMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEaXNwb3NhYmxlIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xuICBwcm90ZWN0ZWQgX2Rpc3Bvc2FibGVzOiBJRGlzcG9zYWJsZVtdID0gW107XG4gIHByb3RlY3RlZCBfaXNEaXNwb3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2VzIHRoZSBvYmplY3QsIHRyaWdnZXJpbmcgdGhlIGBkaXNwb3NlYCBtZXRob2Qgb24gYWxsIHJlZ2lzdGVyZWQgSURpc3Bvc2FibGVzLlxuICAgKi9cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChkID0+IGQuZGlzcG9zZSgpKTtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGRpc3Bvc2FibGUgb2JqZWN0LlxuICAgKiBAcGFyYW0gZCBUaGUgZGlzcG9zYWJsZSB0byByZWdpc3Rlci5cbiAgICovXG4gIHB1YmxpYyByZWdpc3RlcjxUIGV4dGVuZHMgSURpc3Bvc2FibGU+KGQ6IFQpOiB2b2lkIHtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKGQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXJzIGEgZGlzcG9zYWJsZSBvYmplY3QgaWYgaXQgaGFzIGJlZW4gcmVnaXN0ZXJlZCwgaWYgbm90IGRvXG4gICAqIG5vdGhpbmcuXG4gICAqIEBwYXJhbSBkIFRoZSBkaXNwb3NhYmxlIHRvIHVucmVnaXN0ZXIuXG4gICAqL1xuICBwdWJsaWMgdW5yZWdpc3RlcjxUIGV4dGVuZHMgSURpc3Bvc2FibGU+KGQ6IFQpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2Rpc3Bvc2FibGVzLmluZGV4T2YoZCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL0xpZmVjeWNsZS50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Types_1 = __webpack_require__(1);\nfunction generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors) {\n    var clonedColors = {\n        foreground: colors.foreground,\n        background: colors.background,\n        cursor: null,\n        cursorAccent: null,\n        selection: null,\n        ansi: colors.ansi.slice(0, 16)\n    };\n    return {\n        type: terminal.options.experimentalCharAtlas,\n        devicePixelRatio: window.devicePixelRatio,\n        scaledCharWidth: scaledCharWidth,\n        scaledCharHeight: scaledCharHeight,\n        fontFamily: terminal.options.fontFamily,\n        fontSize: terminal.options.fontSize,\n        fontWeight: terminal.options.fontWeight,\n        fontWeightBold: terminal.options.fontWeightBold,\n        allowTransparency: terminal.options.allowTransparency,\n        colors: clonedColors\n    };\n}\nexports.generateConfig = generateConfig;\nfunction configEquals(a, b) {\n    for (var i = 0; i < a.colors.ansi.length; i++) {\n        if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n            return false;\n        }\n    }\n    return a.type === b.type &&\n        a.devicePixelRatio === b.devicePixelRatio &&\n        a.fontFamily === b.fontFamily &&\n        a.fontSize === b.fontSize &&\n        a.fontWeight === b.fontWeight &&\n        a.fontWeightBold === b.fontWeightBold &&\n        a.allowTransparency === b.allowTransparency &&\n        a.scaledCharWidth === b.scaledCharWidth &&\n        a.scaledCharHeight === b.scaledCharHeight &&\n        a.colors.foreground === b.colors.foreground &&\n        a.colors.background === b.colors.background;\n}\nexports.configEquals = configEquals;\nfunction is256Color(colorCode) {\n    return colorCode < Types_1.DEFAULT_COLOR;\n}\nexports.is256Color = is256Color;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc1V0aWxzLnRzP2Q3OTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSxxQ0FBMEQ7QUFFMUQsU0FBZ0IsY0FBYyxDQUFDLGVBQXVCLEVBQUUsZ0JBQXdCLEVBQUUsUUFBbUIsRUFBRSxNQUFpQjtJQUV0SCxJQUFNLFlBQVksR0FBYztRQUM5QixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7UUFDN0IsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO1FBQzdCLE1BQU0sRUFBRSxJQUFJO1FBQ1osWUFBWSxFQUFFLElBQUk7UUFDbEIsU0FBUyxFQUFFLElBQUk7UUFHZixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztLQUMvQixDQUFDO0lBQ0YsT0FBTztRQUNMLElBQUksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLHFCQUFxQjtRQUM1QyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsZ0JBQWdCO1FBQ3pDLGVBQWU7UUFDZixnQkFBZ0I7UUFDaEIsVUFBVSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVTtRQUN2QyxRQUFRLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1FBQ25DLFVBQVUsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVU7UUFDdkMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYztRQUMvQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLGlCQUFpQjtRQUNyRCxNQUFNLEVBQUUsWUFBWTtLQUNyQixDQUFDO0FBQ0osQ0FBQztBQXhCRCx3Q0F3QkM7QUFFRCxTQUFnQixZQUFZLENBQUMsQ0FBbUIsRUFBRSxDQUFtQjtJQUNuRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtZQUNuRCxPQUFPLEtBQUssQ0FBQztTQUNkO0tBQ0Y7SUFDRCxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUk7UUFDcEIsQ0FBQyxDQUFDLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxnQkFBZ0I7UUFDekMsQ0FBQyxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsVUFBVTtRQUM3QixDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxRQUFRO1FBQ3pCLENBQUMsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLFVBQVU7UUFDN0IsQ0FBQyxDQUFDLGNBQWMsS0FBSyxDQUFDLENBQUMsY0FBYztRQUNyQyxDQUFDLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxDQUFDLGlCQUFpQjtRQUMzQyxDQUFDLENBQUMsZUFBZSxLQUFLLENBQUMsQ0FBQyxlQUFlO1FBQ3ZDLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLENBQUMsZ0JBQWdCO1FBQ3pDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVTtRQUMzQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNsRCxDQUFDO0FBakJELG9DQWlCQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxTQUFpQjtJQUMxQyxPQUFPLFNBQVMsR0FBRyxxQkFBYSxDQUFDO0FBQ25DLENBQUM7QUFGRCxnQ0FFQyIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwgfSBmcm9tICcuLi8uLi9UeXBlcyc7XG5pbXBvcnQgeyBJQ29sb3JTZXQgfSBmcm9tICcuLi9UeXBlcyc7XG5pbXBvcnQgeyBERUZBVUxUX0NPTE9SLCBJQ2hhckF0bGFzQ29uZmlnIH0gZnJvbSAnLi9UeXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUNvbmZpZyhzY2FsZWRDaGFyV2lkdGg6IG51bWJlciwgc2NhbGVkQ2hhckhlaWdodDogbnVtYmVyLCB0ZXJtaW5hbDogSVRlcm1pbmFsLCBjb2xvcnM6IElDb2xvclNldCk6IElDaGFyQXRsYXNDb25maWcge1xuICAvLyBudWxsIG91dCBzb21lIGZpZWxkcyB0aGF0IGRvbid0IG1hdHRlclxuICBjb25zdCBjbG9uZWRDb2xvcnMgPSA8SUNvbG9yU2V0PntcbiAgICBmb3JlZ3JvdW5kOiBjb2xvcnMuZm9yZWdyb3VuZCxcbiAgICBiYWNrZ3JvdW5kOiBjb2xvcnMuYmFja2dyb3VuZCxcbiAgICBjdXJzb3I6IG51bGwsXG4gICAgY3Vyc29yQWNjZW50OiBudWxsLFxuICAgIHNlbGVjdGlvbjogbnVsbCxcbiAgICAvLyBGb3IgdGhlIHN0YXRpYyBjaGFyIGF0bGFzLCB3ZSBvbmx5IHVzZSB0aGUgZmlyc3QgMTYgY29sb3JzLCBidXQgd2UgbmVlZCBhbGwgMjU2IGZvciB0aGVcbiAgICAvLyBkeW5hbWljIGNoYXJhY3RlciBhdGxhcy5cbiAgICBhbnNpOiBjb2xvcnMuYW5zaS5zbGljZSgwLCAxNilcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0ZXJtaW5hbC5vcHRpb25zLmV4cGVyaW1lbnRhbENoYXJBdGxhcyxcbiAgICBkZXZpY2VQaXhlbFJhdGlvOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICBzY2FsZWRDaGFyV2lkdGgsXG4gICAgc2NhbGVkQ2hhckhlaWdodCxcbiAgICBmb250RmFtaWx5OiB0ZXJtaW5hbC5vcHRpb25zLmZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFNpemUsXG4gICAgZm9udFdlaWdodDogdGVybWluYWwub3B0aW9ucy5mb250V2VpZ2h0LFxuICAgIGZvbnRXZWlnaHRCb2xkOiB0ZXJtaW5hbC5vcHRpb25zLmZvbnRXZWlnaHRCb2xkLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiB0ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5LFxuICAgIGNvbG9yczogY2xvbmVkQ29sb3JzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdFcXVhbHMoYTogSUNoYXJBdGxhc0NvbmZpZywgYjogSUNoYXJBdGxhc0NvbmZpZyk6IGJvb2xlYW4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEuY29sb3JzLmFuc2kubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYS5jb2xvcnMuYW5zaVtpXS5yZ2JhICE9PSBiLmNvbG9ycy5hbnNpW2ldLnJnYmEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEudHlwZSA9PT0gYi50eXBlICYmXG4gICAgICBhLmRldmljZVBpeGVsUmF0aW8gPT09IGIuZGV2aWNlUGl4ZWxSYXRpbyAmJlxuICAgICAgYS5mb250RmFtaWx5ID09PSBiLmZvbnRGYW1pbHkgJiZcbiAgICAgIGEuZm9udFNpemUgPT09IGIuZm9udFNpemUgJiZcbiAgICAgIGEuZm9udFdlaWdodCA9PT0gYi5mb250V2VpZ2h0ICYmXG4gICAgICBhLmZvbnRXZWlnaHRCb2xkID09PSBiLmZvbnRXZWlnaHRCb2xkICYmXG4gICAgICBhLmFsbG93VHJhbnNwYXJlbmN5ID09PSBiLmFsbG93VHJhbnNwYXJlbmN5ICYmXG4gICAgICBhLnNjYWxlZENoYXJXaWR0aCA9PT0gYi5zY2FsZWRDaGFyV2lkdGggJiZcbiAgICAgIGEuc2NhbGVkQ2hhckhlaWdodCA9PT0gYi5zY2FsZWRDaGFySGVpZ2h0ICYmXG4gICAgICBhLmNvbG9ycy5mb3JlZ3JvdW5kID09PSBiLmNvbG9ycy5mb3JlZ3JvdW5kICYmXG4gICAgICBhLmNvbG9ycy5iYWNrZ3JvdW5kID09PSBiLmNvbG9ycy5iYWNrZ3JvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXMyNTZDb2xvcihjb2xvckNvZGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gY29sb3JDb2RlIDwgREVGQVVMVF9DT0xPUjtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzVXRpbHMudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isNode = (typeof navigator === 'undefined') ? true : false;\nvar userAgent = (isNode) ? 'node' : navigator.userAgent;\nvar platform = (isNode) ? 'node' : navigator.platform;\nexports.isFirefox = !!~userAgent.indexOf('Firefox');\nexports.isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexports.isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\nexports.isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\nexports.isIpad = platform === 'iPad';\nexports.isIphone = platform === 'iPhone';\nexports.isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\nexports.isLinux = platform.indexOf('Linux') >= 0;\nfunction contains(arr, el) {\n    return arr.indexOf(el) >= 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvcmUvUGxhdGZvcm0udHM/OTZlMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLElBQU0sTUFBTSxHQUFHLENBQUMsT0FBTyxTQUFTLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ2pFLElBQU0sU0FBUyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUMxRCxJQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFFM0MsaUJBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzVDLGdCQUFRLEdBQUcsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzVELGNBQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFLekUsYUFBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzFFLGNBQU0sR0FBRyxRQUFRLEtBQUssTUFBTSxDQUFDO0FBQzdCLGdCQUFRLEdBQUcsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNqQyxtQkFBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pFLGVBQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQU90RCxTQUFTLFFBQVEsQ0FBQyxHQUFVLEVBQUUsRUFBTztJQUNuQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuY29uc3QgaXNOb2RlID0gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSA/IHRydWUgOiBmYWxzZTtcbmNvbnN0IHVzZXJBZ2VudCA9IChpc05vZGUpID8gJ25vZGUnIDogbmF2aWdhdG9yLnVzZXJBZ2VudDtcbmNvbnN0IHBsYXRmb3JtID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IucGxhdGZvcm07XG5cbmV4cG9ydCBjb25zdCBpc0ZpcmVmb3ggPSAhIX51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpO1xuZXhwb3J0IGNvbnN0IGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdCh1c2VyQWdlbnQpO1xuZXhwb3J0IGNvbnN0IGlzTVNJRSA9ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgfHwgISF+dXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKTtcblxuLy8gRmluZCB0aGUgdXNlcnMgcGxhdGZvcm0uIFdlIHVzZSB0aGlzIHRvIGludGVycHJldCB0aGUgbWV0YSBrZXlcbi8vIGFuZCBJU08gdGhpcmQgbGV2ZWwgc2hpZnRzLlxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTk4Nzc5MjQvNTc3NTk4XG5leHBvcnQgY29uc3QgaXNNYWMgPSBjb250YWlucyhbJ01hY2ludG9zaCcsICdNYWNJbnRlbCcsICdNYWNQUEMnLCAnTWFjNjhLJ10sIHBsYXRmb3JtKTtcbmV4cG9ydCBjb25zdCBpc0lwYWQgPSBwbGF0Zm9ybSA9PT0gJ2lQYWQnO1xuZXhwb3J0IGNvbnN0IGlzSXBob25lID0gcGxhdGZvcm0gPT09ICdpUGhvbmUnO1xuZXhwb3J0IGNvbnN0IGlzTVNXaW5kb3dzID0gY29udGFpbnMoWydXaW5kb3dzJywgJ1dpbjE2JywgJ1dpbjMyJywgJ1dpbkNFJ10sIHBsYXRmb3JtKTtcbmV4cG9ydCBjb25zdCBpc0xpbnV4ID0gcGxhdGZvcm0uaW5kZXhPZignTGludXgnKSA+PSAwO1xuXG4vKipcbiAqIFJldHVybiBpZiB0aGUgZ2l2ZW4gYXJyYXkgY29udGFpbnMgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSBhcnIgVGhlIGFycmF5IHRvIHNlYXJjaCBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXG4gKiBAcGFyYW0gZWwgVGhlIGVsZW1lbnQgdG8gbG9vayBmb3IgaW50byB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gY29udGFpbnMoYXJyOiBhbnlbXSwgZWw6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYXJyLmluZGV4T2YoZWwpID49IDA7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvcmUvUGxhdGZvcm0udHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction addDisposableDomListener(node, type, handler, useCapture) {\n    node.addEventListener(type, handler, useCapture);\n    return {\n        dispose: function () {\n            if (!handler) {\n                return;\n            }\n            node.removeEventListener(type, handler, useCapture);\n            node = null;\n            handler = null;\n        }\n    };\n}\nexports.addDisposableDomListener = addDisposableDomListener;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL0xpZmVjeWNsZS50cz80M2JlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBWUEsU0FBZ0Isd0JBQXdCLENBQ3RDLElBQWlDLEVBQ2pDLElBQVksRUFDWixPQUF5QixFQUN6QixVQUFvQjtJQUVwQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxPQUFPO1FBQ0wsT0FBTyxFQUFFO1lBQ1AsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFFWixPQUFPO2FBQ1I7WUFDRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNwRCxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ1osT0FBTyxHQUFHLElBQUksQ0FBQztRQUNqQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFsQkQsNERBa0JDIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAneHRlcm0nO1xuXG4vKipcbiAqIEFkZHMgYSBkaXNwb3NhYmUgbGlzdGVuZXIgdG8gYSBub2RlIGluIHRoZSBET00sIHJldHVybmluZyB0aGUgZGlzcG9zYWJsZS5cbiAqIEBwYXJhbSB0eXBlIFRoZSBldmVudCB0eXBlLlxuICogQHBhcmFtIGhhbmRsZXIgVGhlIGhhbmRsZXIgZm9yIHRoZSBsaXN0ZW5lci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihcbiAgbm9kZTogRWxlbWVudCB8IFdpbmRvdyB8IERvY3VtZW50LFxuICB0eXBlOiBzdHJpbmcsXG4gIGhhbmRsZXI6IChlOiBhbnkpID0+IHZvaWQsXG4gIHVzZUNhcHR1cmU/OiBib29sZWFuXG4pOiBJRGlzcG9zYWJsZSB7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBkaXNwb3NlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSk7XG4gICAgICBub2RlID0gbnVsbDtcbiAgICAgIGhhbmRsZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvdWkvTGlmZWN5Y2xlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar C0;\n(function (C0) {\n    C0.NUL = '\\x00';\n    C0.SOH = '\\x01';\n    C0.STX = '\\x02';\n    C0.ETX = '\\x03';\n    C0.EOT = '\\x04';\n    C0.ENQ = '\\x05';\n    C0.ACK = '\\x06';\n    C0.BEL = '\\x07';\n    C0.BS = '\\x08';\n    C0.HT = '\\x09';\n    C0.LF = '\\x0a';\n    C0.VT = '\\x0b';\n    C0.FF = '\\x0c';\n    C0.CR = '\\x0d';\n    C0.SO = '\\x0e';\n    C0.SI = '\\x0f';\n    C0.DLE = '\\x10';\n    C0.DC1 = '\\x11';\n    C0.DC2 = '\\x12';\n    C0.DC3 = '\\x13';\n    C0.DC4 = '\\x14';\n    C0.NAK = '\\x15';\n    C0.SYN = '\\x16';\n    C0.ETB = '\\x17';\n    C0.CAN = '\\x18';\n    C0.EM = '\\x19';\n    C0.SUB = '\\x1a';\n    C0.ESC = '\\x1b';\n    C0.FS = '\\x1c';\n    C0.GS = '\\x1d';\n    C0.RS = '\\x1e';\n    C0.US = '\\x1f';\n    C0.SP = '\\x20';\n    C0.DEL = '\\x7f';\n})(C0 = exports.C0 || (exports.C0 = {}));\nvar C1;\n(function (C1) {\n    C1.PAD = '\\x80';\n    C1.HOP = '\\x81';\n    C1.BPH = '\\x82';\n    C1.NBH = '\\x83';\n    C1.IND = '\\x84';\n    C1.NEL = '\\x85';\n    C1.SSA = '\\x86';\n    C1.ESA = '\\x87';\n    C1.HTS = '\\x88';\n    C1.HTJ = '\\x89';\n    C1.VTS = '\\x8a';\n    C1.PLD = '\\x8b';\n    C1.PLU = '\\x8c';\n    C1.RI = '\\x8d';\n    C1.SS2 = '\\x8e';\n    C1.SS3 = '\\x8f';\n    C1.DCS = '\\x90';\n    C1.PU1 = '\\x91';\n    C1.PU2 = '\\x92';\n    C1.STS = '\\x93';\n    C1.CCH = '\\x94';\n    C1.MW = '\\x95';\n    C1.SPA = '\\x96';\n    C1.EPA = '\\x97';\n    C1.SOS = '\\x98';\n    C1.SGCI = '\\x99';\n    C1.SCI = '\\x9a';\n    C1.CSI = '\\x9b';\n    C1.ST = '\\x9c';\n    C1.OSC = '\\x9d';\n    C1.PM = '\\x9e';\n    C1.APC = '\\x9f';\n})(C1 = exports.C1 || (exports.C1 = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Types_1 = __webpack_require__(1);\nvar CharAtlasCache_1 = __webpack_require__(14);\nvar Buffer_1 = __webpack_require__(0);\nvar CharAtlasUtils_1 = __webpack_require__(4);\nvar BaseRenderLayer = (function () {\n    function BaseRenderLayer(_container, id, zIndex, _alpha, _colors) {\n        this._container = _container;\n        this._alpha = _alpha;\n        this._colors = _colors;\n        this._scaledCharWidth = 0;\n        this._scaledCharHeight = 0;\n        this._scaledCellWidth = 0;\n        this._scaledCellHeight = 0;\n        this._scaledCharLeft = 0;\n        this._scaledCharTop = 0;\n        this._currentGlyphIdentifier = {\n            chars: \'\',\n            code: 0,\n            bg: 0,\n            fg: 0,\n            bold: false,\n            dim: false,\n            italic: false\n        };\n        this._canvas = document.createElement(\'canvas\');\n        this._canvas.classList.add("xterm-" + id + "-layer");\n        this._canvas.style.zIndex = zIndex.toString();\n        this._initCanvas();\n        this._container.appendChild(this._canvas);\n    }\n    BaseRenderLayer.prototype.dispose = function () {\n        this._container.removeChild(this._canvas);\n        if (this._charAtlas) {\n            this._charAtlas.dispose();\n        }\n    };\n    BaseRenderLayer.prototype._initCanvas = function () {\n        this._ctx = this._canvas.getContext(\'2d\', { alpha: this._alpha });\n        if (!this._alpha) {\n            this.clearAll();\n        }\n    };\n    BaseRenderLayer.prototype.onOptionsChanged = function (terminal) { };\n    BaseRenderLayer.prototype.onBlur = function (terminal) { };\n    BaseRenderLayer.prototype.onFocus = function (terminal) { };\n    BaseRenderLayer.prototype.onCursorMove = function (terminal) { };\n    BaseRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) { };\n    BaseRenderLayer.prototype.onSelectionChanged = function (terminal, start, end, columnSelectMode) {\n        if (columnSelectMode === void 0) { columnSelectMode = false; }\n    };\n    BaseRenderLayer.prototype.onThemeChanged = function (terminal, colorSet) {\n        this._refreshCharAtlas(terminal, colorSet);\n    };\n    BaseRenderLayer.prototype.setTransparency = function (terminal, alpha) {\n        if (alpha === this._alpha) {\n            return;\n        }\n        var oldCanvas = this._canvas;\n        this._alpha = alpha;\n        this._canvas = this._canvas.cloneNode();\n        this._initCanvas();\n        this._container.replaceChild(this._canvas, oldCanvas);\n        this._refreshCharAtlas(terminal, this._colors);\n        this.onGridChanged(terminal, 0, terminal.rows - 1);\n    };\n    BaseRenderLayer.prototype._refreshCharAtlas = function (terminal, colorSet) {\n        if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n            return;\n        }\n        this._charAtlas = CharAtlasCache_1.acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n        this._charAtlas.warmUp();\n    };\n    BaseRenderLayer.prototype.resize = function (terminal, dim) {\n        this._scaledCellWidth = dim.scaledCellWidth;\n        this._scaledCellHeight = dim.scaledCellHeight;\n        this._scaledCharWidth = dim.scaledCharWidth;\n        this._scaledCharHeight = dim.scaledCharHeight;\n        this._scaledCharLeft = dim.scaledCharLeft;\n        this._scaledCharTop = dim.scaledCharTop;\n        this._canvas.width = dim.scaledCanvasWidth;\n        this._canvas.height = dim.scaledCanvasHeight;\n        this._canvas.style.width = dim.canvasWidth + "px";\n        this._canvas.style.height = dim.canvasHeight + "px";\n        if (!this._alpha) {\n            this.clearAll();\n        }\n        this._refreshCharAtlas(terminal, this._colors);\n    };\n    BaseRenderLayer.prototype.fillCells = function (x, y, width, height) {\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n    };\n    BaseRenderLayer.prototype.fillBottomLineAtCells = function (x, y, width) {\n        if (width === void 0) { width = 1; }\n        this._ctx.fillRect(x * this._scaledCellWidth, (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, width * this._scaledCellWidth, window.devicePixelRatio);\n    };\n    BaseRenderLayer.prototype.fillLeftLineAtCell = function (x, y) {\n        this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, window.devicePixelRatio, this._scaledCellHeight);\n    };\n    BaseRenderLayer.prototype.strokeRectAtCell = function (x, y, width, height) {\n        this._ctx.lineWidth = window.devicePixelRatio;\n        this._ctx.strokeRect(x * this._scaledCellWidth + window.devicePixelRatio / 2, y * this._scaledCellHeight + (window.devicePixelRatio / 2), width * this._scaledCellWidth - window.devicePixelRatio, (height * this._scaledCellHeight) - window.devicePixelRatio);\n    };\n    BaseRenderLayer.prototype.clearAll = function () {\n        if (this._alpha) {\n            this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n        }\n        else {\n            this._ctx.fillStyle = this._colors.background.css;\n            this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n        }\n    };\n    BaseRenderLayer.prototype.clearCells = function (x, y, width, height) {\n        if (this._alpha) {\n            this._ctx.clearRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n        }\n        else {\n            this._ctx.fillStyle = this._colors.background.css;\n            this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n        }\n    };\n    BaseRenderLayer.prototype.fillCharTrueColor = function (terminal, charData, x, y) {\n        this._ctx.font = this._getFont(terminal, false, false);\n        this._ctx.textBaseline = \'top\';\n        this._clipRow(terminal, y);\n        this._ctx.fillText(charData[Buffer_1.CHAR_DATA_CHAR_INDEX], x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n    };\n    BaseRenderLayer.prototype.drawChars = function (terminal, chars, code, width, x, y, fg, bg, bold, dim, italic) {\n        var drawInBrightColor = terminal.options.drawBoldTextInBrightColors && bold && fg < 8 && fg !== Types_1.INVERTED_DEFAULT_COLOR;\n        fg += drawInBrightColor ? 8 : 0;\n        this._currentGlyphIdentifier.chars = chars;\n        this._currentGlyphIdentifier.code = code;\n        this._currentGlyphIdentifier.bg = bg;\n        this._currentGlyphIdentifier.fg = fg;\n        this._currentGlyphIdentifier.bold = bold && terminal.options.enableBold;\n        this._currentGlyphIdentifier.dim = dim;\n        this._currentGlyphIdentifier.italic = italic;\n        var atlasDidDraw = this._charAtlas && this._charAtlas.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n        if (!atlasDidDraw) {\n            this._drawUncachedChars(terminal, chars, width, fg, x, y, bold && terminal.options.enableBold, dim, italic);\n        }\n    };\n    BaseRenderLayer.prototype._drawUncachedChars = function (terminal, chars, width, fg, x, y, bold, dim, italic) {\n        this._ctx.save();\n        this._ctx.font = this._getFont(terminal, bold, italic);\n        this._ctx.textBaseline = \'top\';\n        if (fg === Types_1.INVERTED_DEFAULT_COLOR) {\n            this._ctx.fillStyle = this._colors.background.css;\n        }\n        else if (CharAtlasUtils_1.is256Color(fg)) {\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\n        }\n        else {\n            this._ctx.fillStyle = this._colors.foreground.css;\n        }\n        this._clipRow(terminal, y);\n        if (dim) {\n            this._ctx.globalAlpha = Types_1.DIM_OPACITY;\n        }\n        this._ctx.fillText(chars, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n        this._ctx.restore();\n    };\n    BaseRenderLayer.prototype._clipRow = function (terminal, y) {\n        this._ctx.beginPath();\n        this._ctx.rect(0, y * this._scaledCellHeight, terminal.cols * this._scaledCellWidth, this._scaledCellHeight);\n        this._ctx.clip();\n    };\n    BaseRenderLayer.prototype._getFont = function (terminal, isBold, isItalic) {\n        var fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n        var fontStyle = isItalic ? \'italic\' : \'\';\n        return fontStyle + " " + fontWeight + " " + terminal.options.fontSize * window.devicePixelRatio + "px " + terminal.options.fontFamily;\n    };\n    return BaseRenderLayer;\n}());\nexports.BaseRenderLayer = BaseRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_FOREGROUND = fromHex('#ffffff');\nvar DEFAULT_BACKGROUND = fromHex('#000000');\nvar DEFAULT_CURSOR = fromHex('#ffffff');\nvar DEFAULT_CURSOR_ACCENT = fromHex('#000000');\nvar DEFAULT_SELECTION = {\n    css: 'rgba(255, 255, 255, 0.3)',\n    rgba: 0xFFFFFF77\n};\nexports.DEFAULT_ANSI_COLORS = (function () {\n    var colors = [\n        fromHex('#2e3436'),\n        fromHex('#cc0000'),\n        fromHex('#4e9a06'),\n        fromHex('#c4a000'),\n        fromHex('#3465a4'),\n        fromHex('#75507b'),\n        fromHex('#06989a'),\n        fromHex('#d3d7cf'),\n        fromHex('#555753'),\n        fromHex('#ef2929'),\n        fromHex('#8ae234'),\n        fromHex('#fce94f'),\n        fromHex('#729fcf'),\n        fromHex('#ad7fa8'),\n        fromHex('#34e2e2'),\n        fromHex('#eeeeec')\n    ];\n    var v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n    for (var i = 0; i < 216; i++) {\n        var r = v[(i / 36) % 6 | 0];\n        var g = v[(i / 6) % 6 | 0];\n        var b = v[i % 6];\n        colors.push({\n            css: \"#\" + toPaddedHex(r) + toPaddedHex(g) + toPaddedHex(b),\n            rgba: ((r << 24) | (g << 16) | (b << 8) | 0xFF) >>> 0\n        });\n    }\n    for (var i = 0; i < 24; i++) {\n        var c = 8 + i * 10;\n        var ch = toPaddedHex(c);\n        colors.push({\n            css: \"#\" + ch + ch + ch,\n            rgba: ((c << 24) | (c << 16) | (c << 8) | 0xFF) >>> 0\n        });\n    }\n    return colors;\n})();\nfunction fromHex(css) {\n    return {\n        css: css,\n        rgba: parseInt(css.slice(1), 16) << 8 | 0xFF\n    };\n}\nfunction toPaddedHex(c) {\n    var s = c.toString(16);\n    return s.length < 2 ? '0' + s : s;\n}\nvar ColorManager = (function () {\n    function ColorManager(document, allowTransparency) {\n        this.allowTransparency = allowTransparency;\n        var canvas = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        this._ctx = canvas.getContext('2d');\n        this._ctx.globalCompositeOperation = 'copy';\n        this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n        this.colors = {\n            foreground: DEFAULT_FOREGROUND,\n            background: DEFAULT_BACKGROUND,\n            cursor: DEFAULT_CURSOR,\n            cursorAccent: DEFAULT_CURSOR_ACCENT,\n            selection: DEFAULT_SELECTION,\n            ansi: exports.DEFAULT_ANSI_COLORS.slice()\n        };\n    }\n    ColorManager.prototype.setTheme = function (theme) {\n        this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n        this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n        this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n        this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n        this.colors.selection = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\n        this.colors.ansi[0] = this._parseColor(theme.black, exports.DEFAULT_ANSI_COLORS[0]);\n        this.colors.ansi[1] = this._parseColor(theme.red, exports.DEFAULT_ANSI_COLORS[1]);\n        this.colors.ansi[2] = this._parseColor(theme.green, exports.DEFAULT_ANSI_COLORS[2]);\n        this.colors.ansi[3] = this._parseColor(theme.yellow, exports.DEFAULT_ANSI_COLORS[3]);\n        this.colors.ansi[4] = this._parseColor(theme.blue, exports.DEFAULT_ANSI_COLORS[4]);\n        this.colors.ansi[5] = this._parseColor(theme.magenta, exports.DEFAULT_ANSI_COLORS[5]);\n        this.colors.ansi[6] = this._parseColor(theme.cyan, exports.DEFAULT_ANSI_COLORS[6]);\n        this.colors.ansi[7] = this._parseColor(theme.white, exports.DEFAULT_ANSI_COLORS[7]);\n        this.colors.ansi[8] = this._parseColor(theme.brightBlack, exports.DEFAULT_ANSI_COLORS[8]);\n        this.colors.ansi[9] = this._parseColor(theme.brightRed, exports.DEFAULT_ANSI_COLORS[9]);\n        this.colors.ansi[10] = this._parseColor(theme.brightGreen, exports.DEFAULT_ANSI_COLORS[10]);\n        this.colors.ansi[11] = this._parseColor(theme.brightYellow, exports.DEFAULT_ANSI_COLORS[11]);\n        this.colors.ansi[12] = this._parseColor(theme.brightBlue, exports.DEFAULT_ANSI_COLORS[12]);\n        this.colors.ansi[13] = this._parseColor(theme.brightMagenta, exports.DEFAULT_ANSI_COLORS[13]);\n        this.colors.ansi[14] = this._parseColor(theme.brightCyan, exports.DEFAULT_ANSI_COLORS[14]);\n        this.colors.ansi[15] = this._parseColor(theme.brightWhite, exports.DEFAULT_ANSI_COLORS[15]);\n    };\n    ColorManager.prototype._parseColor = function (css, fallback, allowTransparency) {\n        if (allowTransparency === void 0) { allowTransparency = this.allowTransparency; }\n        if (!css) {\n            return fallback;\n        }\n        this._ctx.fillStyle = this._litmusColor;\n        this._ctx.fillStyle = css;\n        if (typeof this._ctx.fillStyle !== 'string') {\n            console.warn(\"Color: \" + css + \" is invalid using fallback \" + fallback.css);\n            return fallback;\n        }\n        this._ctx.fillRect(0, 0, 1, 1);\n        var data = this._ctx.getImageData(0, 0, 1, 1).data;\n        if (!allowTransparency && data[3] !== 0xFF) {\n            console.warn(\"Color: \" + css + \" is using transparency, but allowTransparency is false. \" +\n                (\"Using fallback \" + fallback.css + \".\"));\n            return fallback;\n        }\n        return {\n            css: css,\n            rgba: (data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3]) >>> 0\n        };\n    };\n    return ColorManager;\n}());\nexports.ColorManager = ColorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar BaseCharAtlas = (function () {\n    function BaseCharAtlas() {\n        this._didWarmUp = false;\n    }\n    BaseCharAtlas.prototype.dispose = function () { };\n    BaseCharAtlas.prototype.warmUp = function () {\n        if (!this._didWarmUp) {\n            this._doWarmUp();\n            this._didWarmUp = true;\n        }\n    };\n    BaseCharAtlas.prototype._doWarmUp = function () { };\n    BaseCharAtlas.prototype.beginFrame = function () { };\n    return BaseCharAtlas;\n}());\nexports.default = BaseCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL0Jhc2VDaGFyQXRsYXMudHM/ZTljNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVFBO0lBQUE7UUFDVSxlQUFVLEdBQVksS0FBSyxDQUFDO0lBOEN0QyxDQUFDO0lBNUNRLCtCQUFPLEdBQWQsY0FBeUIsQ0FBQztJQU1uQiw4QkFBTSxHQUFiO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQU1TLGlDQUFTLEdBQW5CLGNBQThCLENBQUM7SUFTeEIsa0NBQVUsR0FBakIsY0FBNEIsQ0FBQztJQWtCL0Isb0JBQUM7QUFBRCxDQUFDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJR2x5cGhJZGVudGlmaWVyIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJ3h0ZXJtJztcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZUNoYXJBdGxhcyBpbXBsZW1lbnRzIElEaXNwb3NhYmxlIHtcbiAgcHJpdmF0ZSBfZGlkV2FybVVwOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7IH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhbnkgd29yayBuZWVkZWQgdG8gd2FybSB0aGUgY2FjaGUgYmVmb3JlIGl0IGNhbiBiZSB1c2VkLiBNYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgKiBJbXBsZW1lbnQgX2RvV2FybVVwIGluc3RlYWQgaWYgeW91IG9ubHkgd2FudCB0byBnZXQgY2FsbGVkIG9uY2UuXG4gICAqL1xuICBwdWJsaWMgd2FybVVwKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fZGlkV2FybVVwKSB7XG4gICAgICB0aGlzLl9kb1dhcm1VcCgpO1xuICAgICAgdGhpcy5fZGlkV2FybVVwID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhbnkgd29yayBuZWVkZWQgdG8gd2FybSB0aGUgY2FjaGUgYmVmb3JlIGl0IGNhbiBiZSB1c2VkLiBVc2VkIGJ5IHRoZSBkZWZhdWx0XG4gICAqIGltcGxlbWVudGF0aW9uIG9mIHdhcm1VcCgpLCBhbmQgd2lsbCBvbmx5IGJlIGNhbGxlZCBvbmNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9kb1dhcm1VcCgpOiB2b2lkIHsgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB3ZSBzdGFydCBkcmF3aW5nIGEgbmV3IGZyYW1lLlxuICAgKlxuICAgKiBUT0RPOiBXZSByZWx5IG9uIHRoaXMgZ2V0dGluZyBjYWxsZWQgYnkgVGV4dFJlbmRlckxheWVyLiBUaGlzIHNob3VsZCByZWFsbHkgYmUgY2FsbGVkIGJ5XG4gICAqIFJlbmRlcmVyIGluc3RlYWQsIGJ1dCB3ZSBuZWVkIHRvIG1ha2UgUmVuZGVyZXIgdGhlIHNvdXJjZS1vZi10cnV0aCBmb3IgdGhlIGNoYXIgYXRsYXMsIGluc3RlYWRcbiAgICogb2YgQmFzZVJlbmRlckxheWVyLlxuICAgKi9cbiAgcHVibGljIGJlZ2luRnJhbWUoKTogdm9pZCB7IH1cblxuICAvKipcbiAgICogTWF5IGJlIGNhbGxlZCBiZWZvcmUgd2FybVVwIGZpbmlzaGVzLCBob3dldmVyIGl0IGlzIG9rYXkgZm9yIHRoZSBpbXBsZW1lbnRhdGlvbiB0b1xuICAgKiBkbyBub3RoaW5nIGFuZCByZXR1cm4gZmFsc2UgaW4gdGhhdCBjYXNlLlxuICAgKlxuICAgKiBAcGFyYW0gY3R4IFdoZXJlIHRvIGRyYXcgdGhlIGNoYXJhY3RlciBvbnRvLlxuICAgKiBAcGFyYW0gZ2x5cGggSW5mb3JtYXRpb24gYWJvdXQgd2hhdCB0byBkcmF3XG4gICAqIEBwYXJhbSB4IFRoZSBwb3NpdGlvbiBvbiB0aGUgY29udGV4dCB0byBzdGFydCBkcmF3aW5nIGF0XG4gICAqIEBwYXJhbSB5IFRoZSBwb3NpdGlvbiBvbiB0aGUgY29udGV4dCB0byBzdGFydCBkcmF3aW5nIGF0XG4gICAqIEByZXR1cm5zIFRoZSBzdWNjZXNzIHN0YXRlLiBUcnVlIGlmIHdlIGRyZXcgdGhlIGNoYXJhY3Rlci5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkcmF3KFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIGdseXBoOiBJR2x5cGhJZGVudGlmaWVyLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbiAgKTogYm9vbGVhbjtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvQmFzZUNoYXJBdGxhcy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar RenderDebouncer = (function () {\n    function RenderDebouncer(_terminal, _callback) {\n        this._terminal = _terminal;\n        this._callback = _callback;\n        this._animationFrame = null;\n    }\n    RenderDebouncer.prototype.dispose = function () {\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = null;\n        }\n    };\n    RenderDebouncer.prototype.refresh = function (rowStart, rowEnd) {\n        var _this = this;\n        rowStart = rowStart !== null && rowStart !== undefined ? rowStart : 0;\n        rowEnd = rowEnd !== null && rowEnd !== undefined ? rowEnd : this._terminal.rows - 1;\n        var isRowStartSet = this._rowStart !== undefined && this._rowStart !== null;\n        var isRowEndSet = this._rowEnd !== undefined && this._rowEnd !== null;\n        this._rowStart = isRowStartSet ? Math.min(this._rowStart, rowStart) : rowStart;\n        this._rowEnd = isRowEndSet ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n        if (this._animationFrame) {\n            return;\n        }\n        this._animationFrame = window.requestAnimationFrame(function () { return _this._innerRefresh(); });\n    };\n    RenderDebouncer.prototype._innerRefresh = function () {\n        this._rowStart = Math.max(this._rowStart, 0);\n        this._rowEnd = Math.min(this._rowEnd, this._terminal.rows - 1);\n        this._callback(this._rowStart, this._rowEnd);\n        this._rowStart = null;\n        this._rowEnd = null;\n        this._animationFrame = null;\n    };\n    return RenderDebouncer;\n}());\nexports.RenderDebouncer = RenderDebouncer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL1JlbmRlckRlYm91bmNlci50cz80MmY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUE7SUFLRSx5QkFDVSxTQUFvQixFQUNwQixTQUErQztRQUQvQyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLGNBQVMsR0FBVCxTQUFTLENBQXNDO1FBSmpELG9CQUFlLEdBQVcsSUFBSSxDQUFDO0lBTXZDLENBQUM7SUFFTSxpQ0FBTyxHQUFkO1FBQ0UsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRU0saUNBQU8sR0FBZCxVQUFlLFFBQWdCLEVBQUUsTUFBYztRQUEvQyxpQkFnQkM7UUFkQyxRQUFRLEdBQUcsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RSxNQUFNLEdBQUcsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUVwRixJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQztRQUM5RSxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQztRQUV4RSxJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRXJFLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxjQUFNLFlBQUksQ0FBQyxhQUFhLEVBQUUsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFTyx1Q0FBYSxHQUFyQjtRQUVFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRy9ELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQztBQWpEWSwwQ0FBZSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUZXJtaW5hbCB9IGZyb20gJy4uL1R5cGVzJztcbmltcG9ydCB7IElEaXNwb3NhYmxlIH0gZnJvbSAneHRlcm0nO1xuXG4vKipcbiAqIERlYm91bmNlcyBjYWxscyB0byByZW5kZXIgdGVybWluYWwgcm93cyB1c2luZyBhbmltYXRpb24gZnJhbWVzLlxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyRGVib3VuY2VyIGltcGxlbWVudHMgSURpc3Bvc2FibGUge1xuICBwcml2YXRlIF9yb3dTdGFydDogbnVtYmVyO1xuICBwcml2YXRlIF9yb3dFbmQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfYW5pbWF0aW9uRnJhbWU6IG51bWJlciA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGVybWluYWw6IElUZXJtaW5hbCxcbiAgICBwcml2YXRlIF9jYWxsYmFjazogKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSA9PiB2b2lkXG4gICkge1xuICB9XG5cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoKHJvd1N0YXJ0OiBudW1iZXIsIHJvd0VuZDogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gR2V0IHRoZSBtaW4vbWF4IHJvdyBzdGFydC9lbmQgZm9yIHRoZSBhcmcgdmFsdWVzXG4gICAgcm93U3RhcnQgPSByb3dTdGFydCAhPT0gbnVsbCAmJiByb3dTdGFydCAhPT0gdW5kZWZpbmVkID8gcm93U3RhcnQgOiAwO1xuICAgIHJvd0VuZCA9IHJvd0VuZCAhPT0gbnVsbCAmJiByb3dFbmQgIT09IHVuZGVmaW5lZCA/IHJvd0VuZCA6IHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxO1xuICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIHJvdyBzdGFydC9lbmQgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuIHNldFxuICAgIGNvbnN0IGlzUm93U3RhcnRTZXQgPSB0aGlzLl9yb3dTdGFydCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuX3Jvd1N0YXJ0ICE9PSBudWxsO1xuICAgIGNvbnN0IGlzUm93RW5kU2V0ID0gdGhpcy5fcm93RW5kICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fcm93RW5kICE9PSBudWxsO1xuICAgIC8vIFNldCB0aGUgcHJvcGVydGllcyB0byB0aGUgdXBkYXRlZCB2YWx1ZXNcbiAgICB0aGlzLl9yb3dTdGFydCA9IGlzUm93U3RhcnRTZXQgPyBNYXRoLm1pbih0aGlzLl9yb3dTdGFydCwgcm93U3RhcnQpIDogcm93U3RhcnQ7XG4gICAgdGhpcy5fcm93RW5kID0gaXNSb3dFbmRTZXQgPyBNYXRoLm1heCh0aGlzLl9yb3dFbmQsIHJvd0VuZCkgOiByb3dFbmQ7XG5cbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5faW5uZXJSZWZyZXNoKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5uZXJSZWZyZXNoKCk6IHZvaWQge1xuICAgIC8vIENsYW1wIHZhbHVlc1xuICAgIHRoaXMuX3Jvd1N0YXJ0ID0gTWF0aC5tYXgodGhpcy5fcm93U3RhcnQsIDApO1xuICAgIHRoaXMuX3Jvd0VuZCA9IE1hdGgubWluKHRoaXMuX3Jvd0VuZCwgdGhpcy5fdGVybWluYWwucm93cyAtIDEpO1xuXG4gICAgLy8gUnVuIHJlbmRlciBjYWxsYmFja1xuICAgIHRoaXMuX2NhbGxiYWNrKHRoaXMuX3Jvd1N0YXJ0LCB0aGlzLl9yb3dFbmQpO1xuXG4gICAgLy8gUmVzZXQgZGVib3VuY2VyXG4gICAgdGhpcy5fcm93U3RhcnQgPSBudWxsO1xuICAgIHRoaXMuX3Jvd0VuZCA9IG51bGw7XG4gICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL1JlbmRlckRlYm91bmNlci50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blankLine = 'Blank line';\nexports.promptLabel = 'Terminal input';\nexports.tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL1N0cmluZ3MudHM/YzRhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtXLGlCQUFTLEdBQUcsWUFBWSxDQUFDO0FBQ3pCLG1CQUFXLEdBQUcsZ0JBQWdCLENBQUM7QUFDL0IscUJBQWEsR0FBRyxnRUFBZ0UsQ0FBQyIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuZXhwb3J0IGxldCBibGFua0xpbmUgPSAnQmxhbmsgbGluZSc7XG5leHBvcnQgbGV0IHByb21wdExhYmVsID0gJ1Rlcm1pbmFsIGlucHV0JztcbmV4cG9ydCBsZXQgdG9vTXVjaE91dHB1dCA9ICdUb28gbXVjaCBvdXRwdXQgdG8gYW5ub3VuY2UsIG5hdmlnYXRlIHRvIHJvd3MgbWFudWFsbHkgdG8gcmVhZCc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL1N0cmluZ3MudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar TypedArrayUtils_1 = __webpack_require__(35);\nexports.wcwidth = (function (opts) {\n    var COMBINING_BMP = [\n        [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n        [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n        [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n        [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n        [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n        [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n        [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n        [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n        [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n        [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n        [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n        [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n        [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n        [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n        [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n        [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n        [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n        [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n        [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n        [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n        [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n        [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n        [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n        [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n        [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n        [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n        [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n        [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n        [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n        [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n        [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n        [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n        [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n        [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n        [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n        [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n        [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n        [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n        [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n        [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n        [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n        [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n        [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n    ];\n    var COMBINING_HIGH = [\n        [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n        [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n        [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n        [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n        [0xE0100, 0xE01EF]\n    ];\n    function bisearch(ucs, data) {\n        var min = 0;\n        var max = data.length - 1;\n        var mid;\n        if (ucs < data[0][0] || ucs > data[max][1]) {\n            return false;\n        }\n        while (max >= min) {\n            mid = (min + max) >> 1;\n            if (ucs > data[mid][1]) {\n                min = mid + 1;\n            }\n            else if (ucs < data[mid][0]) {\n                max = mid - 1;\n            }\n            else {\n                return true;\n            }\n        }\n        return false;\n    }\n    function wcwidthHigh(ucs) {\n        if (bisearch(ucs, COMBINING_HIGH)) {\n            return 0;\n        }\n        if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\n            return 2;\n        }\n        return 1;\n    }\n    var control = opts.control | 0;\n    var table = new Uint8Array(65536);\n    TypedArrayUtils_1.fill(table, 1);\n    table[0] = opts.nul;\n    TypedArrayUtils_1.fill(table, opts.control, 1, 32);\n    TypedArrayUtils_1.fill(table, opts.control, 0x7f, 0xa0);\n    TypedArrayUtils_1.fill(table, 2, 0x1100, 0x1160);\n    table[0x2329] = 2;\n    table[0x232a] = 2;\n    TypedArrayUtils_1.fill(table, 2, 0x2e80, 0xa4d0);\n    table[0x303f] = 1;\n    TypedArrayUtils_1.fill(table, 2, 0xac00, 0xd7a4);\n    TypedArrayUtils_1.fill(table, 2, 0xf900, 0xfb00);\n    TypedArrayUtils_1.fill(table, 2, 0xfe10, 0xfe1a);\n    TypedArrayUtils_1.fill(table, 2, 0xfe30, 0xfe70);\n    TypedArrayUtils_1.fill(table, 2, 0xff00, 0xff61);\n    TypedArrayUtils_1.fill(table, 2, 0xffe0, 0xffe7);\n    for (var r = 0; r < COMBINING_BMP.length; ++r) {\n        TypedArrayUtils_1.fill(table, 0, COMBINING_BMP[r][0], COMBINING_BMP[r][1] + 1);\n    }\n    return function (num) {\n        if (num < 32) {\n            return control | 0;\n        }\n        if (num < 127) {\n            return 1;\n        }\n        if (num < 65536) {\n            return table[num];\n        }\n        return wcwidthHigh(num);\n    };\n})({ nul: 0, control: 0 });\nfunction getStringCellWidth(s) {\n    var result = 0;\n    var length = s.length;\n    for (var i = 0; i < length; ++i) {\n        var code = s.charCodeAt(i);\n        if (0xD800 <= code && code <= 0xDBFF) {\n            if (++i >= length) {\n                return result + exports.wcwidth(code);\n            }\n            var second = s.charCodeAt(i);\n            if (0xDC00 <= second && second <= 0xDFFF) {\n                code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n            else {\n                result += exports.wcwidth(second);\n            }\n        }\n        result += exports.wcwidth(code);\n    }\n    return result;\n}\nexports.getStringCellWidth = getStringCellWidth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CharAtlasUtils_1 = __webpack_require__(4);\nvar DynamicCharAtlas_1 = __webpack_require__(40);\nvar NoneCharAtlas_1 = __webpack_require__(42);\nvar StaticCharAtlas_1 = __webpack_require__(43);\nvar charAtlasImplementations = {\n    'none': NoneCharAtlas_1.default,\n    'static': StaticCharAtlas_1.default,\n    'dynamic': DynamicCharAtlas_1.default\n};\nvar charAtlasCache = [];\nfunction acquireCharAtlas(terminal, colors, scaledCharWidth, scaledCharHeight) {\n    var newConfig = CharAtlasUtils_1.generateConfig(scaledCharWidth, scaledCharHeight, terminal, colors);\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var entry = charAtlasCache[i];\n        var ownedByIndex = entry.ownedBy.indexOf(terminal);\n        if (ownedByIndex >= 0) {\n            if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\n                return entry.atlas;\n            }\n            if (entry.ownedBy.length === 1) {\n                charAtlasCache.splice(i, 1);\n            }\n            else {\n                entry.ownedBy.splice(ownedByIndex, 1);\n            }\n            break;\n        }\n    }\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var entry = charAtlasCache[i];\n        if (CharAtlasUtils_1.configEquals(entry.config, newConfig)) {\n            entry.ownedBy.push(terminal);\n            return entry.atlas;\n        }\n    }\n    var newEntry = {\n        atlas: new charAtlasImplementations[terminal.options.experimentalCharAtlas](document, newConfig),\n        config: newConfig,\n        ownedBy: [terminal]\n    };\n    charAtlasCache.push(newEntry);\n    return newEntry.atlas;\n}\nexports.acquireCharAtlas = acquireCharAtlas;\nfunction removeTerminalFromCache(terminal) {\n    for (var i = 0; i < charAtlasCache.length; i++) {\n        var index = charAtlasCache[i].ownedBy.indexOf(terminal);\n        if (index !== -1) {\n            if (charAtlasCache[i].ownedBy.length === 1) {\n                charAtlasCache.splice(i, 1);\n            }\n            else {\n                charAtlasCache[i].ownedBy.splice(index, 1);\n            }\n            break;\n        }\n    }\n}\nexports.removeTerminalFromCache = removeTerminalFromCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0NhY2hlLnRzPzZmNTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSw4Q0FBZ0U7QUFFaEUsaURBQWtEO0FBQ2xELDhDQUE0QztBQUM1QyxnREFBZ0Q7QUFHaEQsSUFBTSx3QkFBd0IsR0FBRztJQUMvQixNQUFNLEVBQUUsdUJBQWE7SUFDckIsUUFBUSxFQUFFLHlCQUFlO0lBQ3pCLFNBQVMsRUFBRSwwQkFBZ0I7Q0FDNUIsQ0FBQztBQVVGLElBQU0sY0FBYyxHQUEyQixFQUFFLENBQUM7QUFRbEQsU0FBZ0IsZ0JBQWdCLENBQzlCLFFBQW1CLEVBQ25CLE1BQWlCLEVBQ2pCLGVBQXVCLEVBQ3ZCLGdCQUF3QjtJQUV4QixJQUFNLFNBQVMsR0FBRywrQkFBYyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFLdEYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUMsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELElBQUksWUFBWSxJQUFJLENBQUMsRUFBRTtZQUNyQixJQUFJLDZCQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDekMsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ3BCO1lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdCO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2QztZQUNELE1BQU07U0FDUDtLQUNGO0lBR0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUMsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksNkJBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBRXpDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztTQUNwQjtLQUNGO0lBRUQsSUFBTSxRQUFRLEdBQXlCO1FBQ3JDLEtBQUssRUFBRSxJQUFJLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FDekUsUUFBUSxFQUNSLFNBQVMsQ0FDVjtRQUNELE1BQU0sRUFBRSxTQUFTO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztLQUNwQixDQUFDO0lBQ0YsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDeEIsQ0FBQztBQWhERCw0Q0FnREM7QUFNRCxTQUFnQix1QkFBdUIsQ0FBQyxRQUFtQjtJQUN6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM5QyxJQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFFMUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDN0I7aUJBQU07Z0JBRUwsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsTUFBTTtTQUNQO0tBQ0Y7QUFDSCxDQUFDO0FBZEQsMERBY0MiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElUZXJtaW5hbCB9IGZyb20gJy4uLy4uL1R5cGVzJztcbmltcG9ydCB7IElDb2xvclNldCB9IGZyb20gJy4uL1R5cGVzJztcbmltcG9ydCB7IGdlbmVyYXRlQ29uZmlnLCBjb25maWdFcXVhbHMgfSBmcm9tICcuL0NoYXJBdGxhc1V0aWxzJztcbmltcG9ydCBCYXNlQ2hhckF0bGFzIGZyb20gJy4vQmFzZUNoYXJBdGxhcyc7XG5pbXBvcnQgRHluYW1pY0NoYXJBdGxhcyBmcm9tICcuL0R5bmFtaWNDaGFyQXRsYXMnO1xuaW1wb3J0IE5vbmVDaGFyQXRsYXMgZnJvbSAnLi9Ob25lQ2hhckF0bGFzJztcbmltcG9ydCBTdGF0aWNDaGFyQXRsYXMgZnJvbSAnLi9TdGF0aWNDaGFyQXRsYXMnO1xuaW1wb3J0IHsgSUNoYXJBdGxhc0NvbmZpZyB9IGZyb20gJy4vVHlwZXMnO1xuXG5jb25zdCBjaGFyQXRsYXNJbXBsZW1lbnRhdGlvbnMgPSB7XG4gICdub25lJzogTm9uZUNoYXJBdGxhcyxcbiAgJ3N0YXRpYyc6IFN0YXRpY0NoYXJBdGxhcyxcbiAgJ2R5bmFtaWMnOiBEeW5hbWljQ2hhckF0bGFzXG59O1xuXG5pbnRlcmZhY2UgSUNoYXJBdGxhc0NhY2hlRW50cnkge1xuICBhdGxhczogQmFzZUNoYXJBdGxhcztcbiAgY29uZmlnOiBJQ2hhckF0bGFzQ29uZmlnO1xuICAvLyBOLkIuIFRoaXMgaW1wbGVtZW50YXRpb24gcG90ZW50aWFsbHkgaG9sZHMgb250byBjb3BpZXMgb2YgdGhlIHRlcm1pbmFsIGZvcmV2ZXIsIHNvXG4gIC8vIHRoaXMgbWF5IGNhdXNlIG1lbW9yeSBsZWFrcy5cbiAgb3duZWRCeTogSVRlcm1pbmFsW107XG59XG5cbmNvbnN0IGNoYXJBdGxhc0NhY2hlOiBJQ2hhckF0bGFzQ2FjaGVFbnRyeVtdID0gW107XG5cbi8qKlxuICogQWNxdWlyZXMgYSBjaGFyIGF0bGFzLCBlaXRoZXIgZ2VuZXJhdGluZyBhIG5ldyBvbmUgb3IgcmV0dXJuaW5nIGFuIGV4aXN0aW5nXG4gKiBvbmUgdGhhdCBpcyBpbiB1c2UgYnkgYW5vdGhlciB0ZXJtaW5hbC5cbiAqIEBwYXJhbSB0ZXJtaW5hbCBUaGUgdGVybWluYWwuXG4gKiBAcGFyYW0gY29sb3JzIFRoZSBjb2xvcnMgdG8gdXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWNxdWlyZUNoYXJBdGxhcyhcbiAgdGVybWluYWw6IElUZXJtaW5hbCxcbiAgY29sb3JzOiBJQ29sb3JTZXQsXG4gIHNjYWxlZENoYXJXaWR0aDogbnVtYmVyLFxuICBzY2FsZWRDaGFySGVpZ2h0OiBudW1iZXJcbik6IEJhc2VDaGFyQXRsYXMge1xuICBjb25zdCBuZXdDb25maWcgPSBnZW5lcmF0ZUNvbmZpZyhzY2FsZWRDaGFyV2lkdGgsIHNjYWxlZENoYXJIZWlnaHQsIHRlcm1pbmFsLCBjb2xvcnMpO1xuXG4gIC8vIFRPRE86IEN1cnJlbnRseSBpZiBhIHRlcm1pbmFsIGNoYW5nZXMgY29uZmlncyBpdCB3aWxsIG5vdCBmcmVlIHRoZSBlbnRyeSByZWZlcmVuY2UgKHVudGlsIGl0J3MgZGlzcG9zZWQpXG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB0ZXJtaW5hbCBhbHJlYWR5IG93bnMgdGhpcyBjb25maWdcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyQXRsYXNDYWNoZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgY29uc3Qgb3duZWRCeUluZGV4ID0gZW50cnkub3duZWRCeS5pbmRleE9mKHRlcm1pbmFsKTtcbiAgICBpZiAob3duZWRCeUluZGV4ID49IDApIHtcbiAgICAgIGlmIChjb25maWdFcXVhbHMoZW50cnkuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5hdGxhcztcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBjb25maWdzIGRpZmZlciwgcmVsZWFzZSB0aGUgdGVybWluYWwgZnJvbSB0aGUgZW50cnlcbiAgICAgIGlmIChlbnRyeS5vd25lZEJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjaGFyQXRsYXNDYWNoZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbnRyeS5vd25lZEJ5LnNwbGljZShvd25lZEJ5SW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gVHJ5IG1hdGNoIGEgY2hhciBhdGxhcyBmcm9tIHRoZSBjYWNoZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJBdGxhc0NhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZW50cnkgPSBjaGFyQXRsYXNDYWNoZVtpXTtcbiAgICBpZiAoY29uZmlnRXF1YWxzKGVudHJ5LmNvbmZpZywgbmV3Q29uZmlnKSkge1xuICAgICAgLy8gQWRkIHRoZSB0ZXJtaW5hbCB0byB0aGUgY2FjaGUgZW50cnkgYW5kIHJldHVyblxuICAgICAgZW50cnkub3duZWRCeS5wdXNoKHRlcm1pbmFsKTtcbiAgICAgIHJldHVybiBlbnRyeS5hdGxhcztcbiAgICB9XG4gIH1cblxuICBjb25zdCBuZXdFbnRyeTogSUNoYXJBdGxhc0NhY2hlRW50cnkgPSB7XG4gICAgYXRsYXM6IG5ldyBjaGFyQXRsYXNJbXBsZW1lbnRhdGlvbnNbdGVybWluYWwub3B0aW9ucy5leHBlcmltZW50YWxDaGFyQXRsYXNdKFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBuZXdDb25maWdcbiAgICApLFxuICAgIGNvbmZpZzogbmV3Q29uZmlnLFxuICAgIG93bmVkQnk6IFt0ZXJtaW5hbF1cbiAgfTtcbiAgY2hhckF0bGFzQ2FjaGUucHVzaChuZXdFbnRyeSk7XG4gIHJldHVybiBuZXdFbnRyeS5hdGxhcztcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGEgdGVybWluYWwgcmVmZXJlbmNlIGZyb20gdGhlIGNhY2hlLCBhbGxvd2luZyBpdHMgbWVtb3J5IHRvIGJlIGZyZWVkLlxuICogQHBhcmFtIHRlcm1pbmFsIFRoZSB0ZXJtaW5hbCB0byByZW1vdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUZXJtaW5hbEZyb21DYWNoZSh0ZXJtaW5hbDogSVRlcm1pbmFsKTogdm9pZCB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhckF0bGFzQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbmRleCA9IGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkuaW5kZXhPZih0ZXJtaW5hbCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgY2FjaGUgZW50cnkgaWYgaXQncyB0aGUgb25seSB0ZXJtaW5hbFxuICAgICAgICBjaGFyQXRsYXNDYWNoZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHJlZmVyZW5jZSBmcm9tIHRoZSBjYWNoZSBlbnRyeVxuICAgICAgICBjaGFyQXRsYXNDYWNoZVtpXS5vd25lZEJ5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzQ2FjaGUudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Platform_1 = __webpack_require__(5);\nvar Types_1 = __webpack_require__(1);\nfunction generateStaticCharAtlasTexture(context, canvasFactory, config) {\n    var cellWidth = config.scaledCharWidth + Types_1.CHAR_ATLAS_CELL_SPACING;\n    var cellHeight = config.scaledCharHeight + Types_1.CHAR_ATLAS_CELL_SPACING;\n    var canvas = canvasFactory(255 * cellWidth, (2 + 16 + 16) * cellHeight);\n    var ctx = canvas.getContext('2d', { alpha: config.allowTransparency });\n    ctx.fillStyle = config.colors.background.css;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.save();\n    ctx.fillStyle = config.colors.foreground.css;\n    ctx.font = getFont(config.fontWeight, config);\n    ctx.textBaseline = 'top';\n    for (var i = 0; i < 256; i++) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\n        ctx.clip();\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, 0);\n        ctx.restore();\n    }\n    ctx.save();\n    ctx.font = getFont(config.fontWeightBold, config);\n    for (var i = 0; i < 256; i++) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\n        ctx.clip();\n        ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight);\n        ctx.restore();\n    }\n    ctx.restore();\n    ctx.font = getFont(config.fontWeight, config);\n    for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\n        var y = (colorIndex + 2) * cellHeight;\n        for (var i = 0; i < 256; i++) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n            ctx.clip();\n            ctx.fillStyle = config.colors.ansi[colorIndex].css;\n            ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\n            ctx.restore();\n        }\n    }\n    ctx.font = getFont(config.fontWeightBold, config);\n    for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\n        var y = (colorIndex + 2 + 16) * cellHeight;\n        for (var i = 0; i < 256; i++) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n            ctx.clip();\n            ctx.fillStyle = config.colors.ansi[colorIndex].css;\n            ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\n            ctx.restore();\n        }\n    }\n    ctx.restore();\n    if (!('createImageBitmap' in context) || Platform_1.isFirefox || Platform_1.isSafari) {\n        return canvas;\n    }\n    var charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    clearColor(charAtlasImageData, config.colors.background);\n    return context.createImageBitmap(charAtlasImageData);\n}\nexports.generateStaticCharAtlasTexture = generateStaticCharAtlasTexture;\nfunction clearColor(imageData, color) {\n    var isEmpty = true;\n    var r = color.rgba >>> 24;\n    var g = color.rgba >>> 16 & 0xFF;\n    var b = color.rgba >>> 8 & 0xFF;\n    for (var offset = 0; offset < imageData.data.length; offset += 4) {\n        if (imageData.data[offset] === r &&\n            imageData.data[offset + 1] === g &&\n            imageData.data[offset + 2] === b) {\n            imageData.data[offset + 3] = 0;\n        }\n        else {\n            isEmpty = false;\n        }\n    }\n    return isEmpty;\n}\nexports.clearColor = clearColor;\nfunction getFont(fontWeight, config) {\n    return fontWeight + \" \" + config.fontSize * config.devicePixelRatio + \"px \" + config.fontFamily;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Lifecycle_1 = __webpack_require__(3);\nvar ScreenDprMonitor = (function (_super) {\n    __extends(ScreenDprMonitor, _super);\n    function ScreenDprMonitor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ScreenDprMonitor.prototype.setListener = function (listener) {\n        var _this = this;\n        if (this._listener) {\n            this.clearListener();\n        }\n        this._listener = listener;\n        this._outerListener = function () {\n            _this._listener(window.devicePixelRatio, _this._currentDevicePixelRatio);\n            _this._updateDpr();\n        };\n        this._updateDpr();\n    };\n    ScreenDprMonitor.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.clearListener();\n    };\n    ScreenDprMonitor.prototype._updateDpr = function () {\n        if (this._resolutionMediaMatchList) {\n            this._resolutionMediaMatchList.removeListener(this._outerListener);\n        }\n        this._currentDevicePixelRatio = window.devicePixelRatio;\n        this._resolutionMediaMatchList = window.matchMedia("screen and (resolution: " + window.devicePixelRatio + "dppx)");\n        this._resolutionMediaMatchList.addListener(this._outerListener);\n    };\n    ScreenDprMonitor.prototype.clearListener = function () {\n        if (!this._listener) {\n            return;\n        }\n        this._resolutionMediaMatchList.removeListener(this._outerListener);\n        this._listener = null;\n        this._outerListener = null;\n    };\n    return ScreenDprMonitor;\n}(Lifecycle_1.Disposable));\nexports.ScreenDprMonitor = ScreenDprMonitor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL1NjcmVlbkRwck1vbml0b3IudHM/MDgxMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFLQSx5Q0FBaUQ7QUFjakQ7SUFBc0Msb0NBQVU7SUFBaEQ7O0lBMENBLENBQUM7SUFwQ1Esc0NBQVcsR0FBbEIsVUFBbUIsUUFBMkI7UUFBOUMsaUJBVUM7UUFUQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRztZQUNwQixLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztZQUN2RSxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxrQ0FBTyxHQUFkO1FBQ0UsaUJBQU0sT0FBTyxXQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxxQ0FBVSxHQUFsQjtRQUVFLElBQUksSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQ2xDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUN4RCxJQUFJLENBQUMseUJBQXlCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyw2QkFBMkIsTUFBTSxDQUFDLGdCQUFnQixVQUFPLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sd0NBQWEsR0FBcEI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLENBMUNxQyxzQkFBVSxHQTBDL0M7QUExQ1ksNENBQWdCIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi4vY29tbW9uL0xpZmVjeWNsZSc7XG5cbmV4cG9ydCB0eXBlIFNjcmVlbkRwckxpc3RlbmVyID0gKG5ld0RldmljZVBpeGVsUmF0aW8/OiBudW1iZXIsIG9sZERldmljZVBpeGVsUmF0aW8/OiBudW1iZXIpID0+IHZvaWQ7XG5cbi8qKlxuICogVGhlIHNjcmVlbiBkZXZpY2UgcGl4ZWwgcmF0aW8gbW9uaXRvciBhbGxvd3MgbGlzdGVuaW5nIGZvciB3aGVuIHRoZVxuICogd2luZG93LmRldmljZVBpeGVsUmF0aW8gdmFsdWUgY2hhbmdlcy4gVGhpcyBpcyBkb25lIG5vdCB3aXRoIHBvbGxpbmcgYnV0IHdpdGhcbiAqIHRoZSB1c2Ugb2Ygd2luZG93Lm1hdGNoTWVkaWEgdG8gd2F0Y2ggbWVkaWEgcXVlcmllcy4gV2hlbiB0aGUgZXZlbnQgZmlyZXMsXG4gKiB0aGUgbGlzdGVuZXIgd2lsbCBiZSByZWF0dGFjaGVkIHVzaW5nIGEgZGlmZmVyZW50IG1lZGlhIHF1ZXJ5IHRvIGVuc3VyZSB0aGF0XG4gKiBhbnkgZnVydGhlciBjaGFuZ2VzIHdpbGwgcmVnaXN0ZXIuXG4gKlxuICogVGhlIGxpc3RlbmVyIHNob3VsZCBmaXJlIG9uIGJvdGggd2luZG93IHpvb20gY2hhbmdlcyBhbmQgc3dpdGNoaW5nIHRvIGFcbiAqIG1vbml0b3Igd2l0aCBhIGRpZmZlcmVudCBEUEkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY3JlZW5EcHJNb25pdG9yIGV4dGVuZHMgRGlzcG9zYWJsZSB7XG4gIHByaXZhdGUgX2N1cnJlbnREZXZpY2VQaXhlbFJhdGlvOiBudW1iZXI7XG4gIHByaXZhdGUgX291dGVyTGlzdGVuZXI6ICh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnQpID0+IGFueTtcbiAgcHJpdmF0ZSBfbGlzdGVuZXI6IFNjcmVlbkRwckxpc3RlbmVyO1xuICBwcml2YXRlIF9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3Q6IE1lZGlhUXVlcnlMaXN0O1xuXG4gIHB1YmxpYyBzZXRMaXN0ZW5lcihsaXN0ZW5lcjogU2NyZWVuRHByTGlzdGVuZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuY2xlYXJMaXN0ZW5lcigpO1xuICAgIH1cbiAgICB0aGlzLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuX291dGVyTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9saXN0ZW5lcih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgdGhpcy5fY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuICAgICAgdGhpcy5fdXBkYXRlRHByKCk7XG4gICAgfTtcbiAgICB0aGlzLl91cGRhdGVEcHIoKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLmNsZWFyTGlzdGVuZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZURwcigpOiB2b2lkIHtcbiAgICAvLyBDbGVhciBsaXN0ZW5lcnMgZm9yIG9sZCBEUFJcbiAgICBpZiAodGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0KSB7XG4gICAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QucmVtb3ZlTGlzdGVuZXIodGhpcy5fb3V0ZXJMaXN0ZW5lcik7XG4gICAgfVxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgZm9yIG5ldyBEUFJcbiAgICB0aGlzLl9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKGBzY3JlZW4gYW5kIChyZXNvbHV0aW9uOiAke3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfWRwcHgpYCk7XG4gICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LmFkZExpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyTGlzdGVuZXIoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QucmVtb3ZlTGlzdGVuZXIodGhpcy5fb3V0ZXJMaXN0ZW5lcik7XG4gICAgdGhpcy5fbGlzdGVuZXIgPSBudWxsO1xuICAgIHRoaXMuX291dGVyTGlzdGVuZXIgPSBudWxsO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL1NjcmVlbkRwck1vbml0b3IudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(3);\nvar Lifecycle_2 = __webpack_require__(6);\nvar HOVER_DURATION = 500;\nvar MouseZoneManager = (function (_super) {\n    __extends(MouseZoneManager, _super);\n    function MouseZoneManager(_terminal) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._zones = [];\n        _this._areZonesActive = false;\n        _this._tooltipTimeout = null;\n        _this._currentZone = null;\n        _this._lastHoverCoords = [null, null];\n        _this.register(Lifecycle_2.addDisposableDomListener(_this._terminal.element, 'mousedown', function (e) { return _this._onMouseDown(e); }));\n        _this._mouseMoveListener = function (e) { return _this._onMouseMove(e); };\n        _this._clickListener = function (e) { return _this._onClick(e); };\n        return _this;\n    }\n    MouseZoneManager.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._deactivate();\n    };\n    MouseZoneManager.prototype.add = function (zone) {\n        this._zones.push(zone);\n        if (this._zones.length === 1) {\n            this._activate();\n        }\n    };\n    MouseZoneManager.prototype.clearAll = function (start, end) {\n        if (this._zones.length === 0) {\n            return;\n        }\n        if (!end) {\n            start = 0;\n            end = this._terminal.rows - 1;\n        }\n        for (var i = 0; i < this._zones.length; i++) {\n            var zone = this._zones[i];\n            if ((zone.y1 > start && zone.y1 <= end + 1) ||\n                (zone.y2 > start && zone.y2 <= end + 1) ||\n                (zone.y1 < start && zone.y2 > end + 1)) {\n                if (this._currentZone && this._currentZone === zone) {\n                    this._currentZone.leaveCallback();\n                    this._currentZone = null;\n                }\n                this._zones.splice(i--, 1);\n            }\n        }\n        if (this._zones.length === 0) {\n            this._deactivate();\n        }\n    };\n    MouseZoneManager.prototype._activate = function () {\n        if (!this._areZonesActive) {\n            this._areZonesActive = true;\n            this._terminal.element.addEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.addEventListener('click', this._clickListener);\n        }\n    };\n    MouseZoneManager.prototype._deactivate = function () {\n        if (this._areZonesActive) {\n            this._areZonesActive = false;\n            this._terminal.element.removeEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.removeEventListener('click', this._clickListener);\n        }\n    };\n    MouseZoneManager.prototype._onMouseMove = function (e) {\n        if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n            this._onHover(e);\n            this._lastHoverCoords = [e.pageX, e.pageY];\n        }\n    };\n    MouseZoneManager.prototype._onHover = function (e) {\n        var _this = this;\n        var zone = this._findZoneEventAt(e);\n        if (zone === this._currentZone) {\n            return;\n        }\n        if (this._currentZone) {\n            this._currentZone.leaveCallback();\n            this._currentZone = null;\n            if (this._tooltipTimeout) {\n                clearTimeout(this._tooltipTimeout);\n            }\n        }\n        if (!zone) {\n            return;\n        }\n        this._currentZone = zone;\n        if (zone.hoverCallback) {\n            zone.hoverCallback(e);\n        }\n        this._tooltipTimeout = setTimeout(function () { return _this._onTooltip(e); }, HOVER_DURATION);\n    };\n    MouseZoneManager.prototype._onTooltip = function (e) {\n        this._tooltipTimeout = null;\n        var zone = this._findZoneEventAt(e);\n        if (zone && zone.tooltipCallback) {\n            zone.tooltipCallback(e);\n        }\n    };\n    MouseZoneManager.prototype._onMouseDown = function (e) {\n        if (!this._areZonesActive) {\n            return;\n        }\n        var zone = this._findZoneEventAt(e);\n        if (zone) {\n            if (zone.willLinkActivate(e)) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n            }\n        }\n    };\n    MouseZoneManager.prototype._onClick = function (e) {\n        var zone = this._findZoneEventAt(e);\n        if (zone) {\n            zone.clickCallback(e);\n            e.preventDefault();\n            e.stopImmediatePropagation();\n        }\n    };\n    MouseZoneManager.prototype._findZoneEventAt = function (e) {\n        var coords = this._terminal.mouseHelper.getCoords(e, this._terminal.screenElement, this._terminal.charMeasure, this._terminal.cols, this._terminal.rows);\n        if (!coords) {\n            return null;\n        }\n        var x = coords[0];\n        var y = coords[1];\n        for (var i = 0; i < this._zones.length; i++) {\n            var zone = this._zones[i];\n            if (zone.y1 === zone.y2) {\n                if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\n                    return zone;\n                }\n            }\n            else {\n                if ((y === zone.y1 && x >= zone.x1) ||\n                    (y === zone.y2 && x < zone.x2) ||\n                    (y > zone.y1 && y < zone.y2)) {\n                    return zone;\n                }\n            }\n        }\n        return null;\n    };\n    return MouseZoneManager;\n}(Lifecycle_1.Disposable));\nexports.MouseZoneManager = MouseZoneManager;\nvar MouseZone = (function () {\n    function MouseZone(x1, y1, x2, y2, clickCallback, hoverCallback, tooltipCallback, leaveCallback, willLinkActivate) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.clickCallback = clickCallback;\n        this.hoverCallback = hoverCallback;\n        this.tooltipCallback = tooltipCallback;\n        this.leaveCallback = leaveCallback;\n        this.willLinkActivate = willLinkActivate;\n    }\n    return MouseZone;\n}());\nexports.MouseZone = MouseZone;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar MouseHelper = (function () {\n    function MouseHelper(_renderer) {\n        this._renderer = _renderer;\n    }\n    MouseHelper.prototype.setRenderer = function (renderer) {\n        this._renderer = renderer;\n    };\n    MouseHelper.getCoordsRelativeToElement = function (event, element) {\n        if (event.pageX === null || event.pageX === undefined) {\n            return null;\n        }\n        var originalElement = element;\n        var x = event.pageX;\n        var y = event.pageY;\n        while (element) {\n            x -= element.offsetLeft;\n            y -= element.offsetTop;\n            element = element.offsetParent;\n        }\n        element = originalElement;\n        while (element && element !== element.ownerDocument.body) {\n            x += element.scrollLeft;\n            y += element.scrollTop;\n            element = element.parentElement;\n        }\n        return [x, y];\n    };\n    MouseHelper.prototype.getCoords = function (event, element, charMeasure, colCount, rowCount, isSelection) {\n        if (!charMeasure.width || !charMeasure.height) {\n            return null;\n        }\n        var coords = MouseHelper.getCoordsRelativeToElement(event, element);\n        if (!coords) {\n            return null;\n        }\n        coords[0] = Math.ceil((coords[0] + (isSelection ? this._renderer.dimensions.actualCellWidth / 2 : 0)) / this._renderer.dimensions.actualCellWidth);\n        coords[1] = Math.ceil(coords[1] / this._renderer.dimensions.actualCellHeight);\n        coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n        coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n        return coords;\n    };\n    MouseHelper.prototype.getRawByteCoords = function (event, element, charMeasure, colCount, rowCount) {\n        var coords = this.getCoords(event, element, charMeasure, colCount, rowCount);\n        var x = coords[0];\n        var y = coords[1];\n        x += 32;\n        y += 32;\n        return { x: x, y: y };\n    };\n    return MouseHelper;\n}());\nexports.MouseHelper = MouseHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3V0aWxzL01vdXNlSGVscGVyLnRzP2JhOWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQTtJQUNFLHFCQUFvQixTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQUcsQ0FBQztJQUVyQyxpQ0FBVyxHQUFsQixVQUFtQixRQUFtQjtRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRWEsc0NBQTBCLEdBQXhDLFVBQXlDLEtBQXFDLEVBQUUsT0FBb0I7UUFFbEcsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUlwQixPQUFPLE9BQU8sRUFBRTtZQUNkLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO1lBQ3hCLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3ZCLE9BQU8sR0FBZ0IsT0FBTyxDQUFDLFlBQVksQ0FBQztTQUM3QztRQUNELE9BQU8sR0FBRyxlQUFlLENBQUM7UUFDMUIsT0FBTyxPQUFPLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFO1lBQ3hELENBQUMsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO1lBQ3hCLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQ3ZCLE9BQU8sR0FBZ0IsT0FBTyxDQUFDLGFBQWEsQ0FBQztTQUM5QztRQUNELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQWVNLCtCQUFTLEdBQWhCLFVBQWlCLEtBQXFDLEVBQUUsT0FBb0IsRUFBRSxXQUF5QixFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxXQUFxQjtRQUVoSyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuSixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUs5RSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2RCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBWU0sc0NBQWdCLEdBQXZCLFVBQXdCLEtBQWlCLEVBQUUsT0FBb0IsRUFBRSxXQUF5QixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7UUFDNUgsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdsQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVSLE9BQU8sRUFBRSxDQUFDLEtBQUUsQ0FBQyxLQUFFLENBQUM7SUFDbEIsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQztBQTFGWSxrQ0FBVyIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUNoYXJNZWFzdXJlIH0gZnJvbSAnLi4vVHlwZXMnO1xuaW1wb3J0IHsgSVJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXIvVHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgTW91c2VIZWxwZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogSVJlbmRlcmVyKSB7fVxuXG4gIHB1YmxpYyBzZXRSZW5kZXJlcihyZW5kZXJlcjogSVJlbmRlcmVyKTogdm9pZCB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQoZXZlbnQ6IHtwYWdlWDogbnVtYmVyLCBwYWdlWTogbnVtYmVyfSwgZWxlbWVudDogSFRNTEVsZW1lbnQpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAvLyBJZ25vcmUgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IE1vdXNlRXZlbnQucGFnZVhcbiAgICBpZiAoZXZlbnQucGFnZVggPT09IG51bGwgfHwgZXZlbnQucGFnZVggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luYWxFbGVtZW50ID0gZWxlbWVudDtcbiAgICBsZXQgeCA9IGV2ZW50LnBhZ2VYO1xuICAgIGxldCB5ID0gZXZlbnQucGFnZVk7XG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgY29vcmRpbmF0ZXMgZnJvbSBiZWluZyByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQgdG8gYmVpbmdcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgdGVybWluYWwuXG4gICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgIHggLT0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgeSAtPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgIGVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgfVxuICAgIGVsZW1lbnQgPSBvcmlnaW5hbEVsZW1lbnQ7XG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkpIHtcbiAgICAgIHggKz0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgeSArPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgIGVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gW3gsIHldO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY29vcmRpbmF0ZXMgd2l0aGluIHRoZSB0ZXJtaW5hbCBmb3IgYSBwYXJ0aWN1bGFyIG1vdXNlIGV2ZW50LiBUaGUgcmVzdWx0XG4gICAqIGlzIHJldHVybmVkIGFzIGFuIGFycmF5IGluIHRoZSBmb3JtIFt4LCB5XSBpbnN0ZWFkIG9mIGFuIG9iamVjdCBhcyBpdCdzIGFcbiAgICogbGl0dGxlIGZhc3RlciBhbmQgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIGluIHNvbWUgbG93IGxldmVsIGNvZGUuXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqIEBwYXJhbSBlbGVtZW50IFRoZSB0ZXJtaW5hbCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKiBAcGFyYW0gY2hhck1lYXN1cmUgVGhlIGNoYXIgbWVhc3VyZSBvYmplY3QgdXNlZCB0byBkZXRlcm1pbmUgY2hhcmFjdGVyIHNpemVzLlxuICAgKiBAcGFyYW0gY29sQ291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIHJvd0NvdW50IFRoZSBudW1iZXIgb2Ygcm93cyBuIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIGlzU2VsZWN0aW9uIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzZWxlY3Rpb24gb3Igbm90LiBUaGlzIHdpbGxcbiAgICogYXBwbHkgYW4gb2Zmc2V0IHRvIHRoZSB4IHZhbHVlIHN1Y2ggdGhhdCB0aGUgbGVmdCBoYWxmIG9mIHRoZSBjZWxsIHdpbGxcbiAgICogc2VsZWN0IHRoYXQgY2VsbCBhbmQgdGhlIHJpZ2h0IGhhbGYgd2lsbCBzZWxlY3QgdGhlIG5leHQgY2VsbC5cbiAgICovXG4gIHB1YmxpYyBnZXRDb29yZHMoZXZlbnQ6IHtwYWdlWDogbnVtYmVyLCBwYWdlWTogbnVtYmVyfSwgZWxlbWVudDogSFRNTEVsZW1lbnQsIGNoYXJNZWFzdXJlOiBJQ2hhck1lYXN1cmUsIGNvbENvdW50OiBudW1iZXIsIHJvd0NvdW50OiBudW1iZXIsIGlzU2VsZWN0aW9uPzogYm9vbGVhbik6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgIC8vIENvb3JkaW5hdGVzIGNhbm5vdCBiZSBtZWFzdXJlZCBpZiBjaGFyTWVhc3VyZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcbiAgICBpZiAoIWNoYXJNZWFzdXJlLndpZHRoIHx8ICFjaGFyTWVhc3VyZS5oZWlnaHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvb3JkcyA9IE1vdXNlSGVscGVyLmdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCBlbGVtZW50KTtcbiAgICBpZiAoIWNvb3Jkcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29vcmRzWzBdID0gTWF0aC5jZWlsKChjb29yZHNbMF0gKyAoaXNTZWxlY3Rpb24gPyB0aGlzLl9yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCAvIDIgOiAwKSkgLyB0aGlzLl9yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCk7XG4gICAgY29vcmRzWzFdID0gTWF0aC5jZWlsKGNvb3Jkc1sxXSAvIHRoaXMuX3JlbmRlcmVyLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodCk7XG5cbiAgICAvLyBFbnN1cmUgY29vcmRpbmF0ZXMgYXJlIHdpdGhpbiB0aGUgdGVybWluYWwgdmlld3BvcnQuIE5vdGUgdGhhdCBzZWxlY3Rpb25zXG4gICAgLy8gbmVlZCBhbiBhZGRpdGlvbiBwb2ludCBvZiBwcmVjaXNpb24gdG8gY292ZXIgdGhlIGVuZCBwb2ludCAoYXMgY2hhcmFjdGVyc1xuICAgIC8vIGNvdmVyIGhhbGYgb2Ygb25lIGNoYXIgYW5kIGhhbGYgb2YgdGhlIG5leHQpLlxuICAgIGNvb3Jkc1swXSA9IE1hdGgubWluKE1hdGgubWF4KGNvb3Jkc1swXSwgMSksIGNvbENvdW50ICsgKGlzU2VsZWN0aW9uID8gMSA6IDApKTtcbiAgICBjb29yZHNbMV0gPSBNYXRoLm1pbihNYXRoLm1heChjb29yZHNbMV0sIDEpLCByb3dDb3VudCk7XG5cbiAgICByZXR1cm4gY29vcmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY29vcmRpbmF0ZXMgd2l0aGluIHRoZSB0ZXJtaW5hbCBmb3IgYSBwYXJ0aWN1bGFyIG1vdXNlIGV2ZW50LCB3cmFwcGluZ1xuICAgKiB0aGVtIHRvIHRoZSBib3VuZHMgb2YgdGhlIHRlcm1pbmFsIGFuZCBhZGRpbmcgMzIgdG8gYm90aCB0aGUgeCBhbmQgeSB2YWx1ZXNcbiAgICogYXMgZXhwZWN0ZWQgYnkgeHRlcm0uXG4gICAqIEBwYXJhbSBldmVudCBUaGUgbW91c2UgZXZlbnQuXG4gICAqIEBwYXJhbSBlbGVtZW50IFRoZSB0ZXJtaW5hbCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKiBAcGFyYW0gY2hhck1lYXN1cmUgVGhlIGNoYXIgbWVhc3VyZSBvYmplY3QgdXNlZCB0byBkZXRlcm1pbmUgY2hhcmFjdGVyIHNpemVzLlxuICAgKiBAcGFyYW0gY29sQ291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIHJvd0NvdW50IFRoZSBudW1iZXIgb2Ygcm93cyBpbiB0aGUgdGVybWluYWwuXG4gICAqL1xuICBwdWJsaWMgZ2V0UmF3Qnl0ZUNvb3JkcyhldmVudDogTW91c2VFdmVudCwgZWxlbWVudDogSFRNTEVsZW1lbnQsIGNoYXJNZWFzdXJlOiBJQ2hhck1lYXN1cmUsIGNvbENvdW50OiBudW1iZXIsIHJvd0NvdW50OiBudW1iZXIpOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0ge1xuICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuZ2V0Q29vcmRzKGV2ZW50LCBlbGVtZW50LCBjaGFyTWVhc3VyZSwgY29sQ291bnQsIHJvd0NvdW50KTtcbiAgICBsZXQgeCA9IGNvb3Jkc1swXTtcbiAgICBsZXQgeSA9IGNvb3Jkc1sxXTtcblxuICAgIC8vIHh0ZXJtIHNlbmRzIHJhdyBieXRlcyBhbmQgc3RhcnRzIGF0IDMyIChTUCkgZm9yIGVhY2guXG4gICAgeCArPSAzMjtcbiAgICB5ICs9IDMyO1xuXG4gICAgcmV0dXJuIHsgeCwgeSB9O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3V0aWxzL01vdXNlSGVscGVyLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(20);\nvar Xterm = __webpack_require__(25);\nvar TestApp = (function () {\n    function TestApp() {\n        var _this = this;\n        var opts = {};\n        opts.cursorBlink = true;\n        opts.cursorStyle = 'underline';\n        opts.disableStdin = false;\n        this.term = new Xterm.Terminal(opts);\n        var term = this.term;\n        this.term.open(document.getElementById('terminal'));\n        this.term.write(\"Mochii UI terminal. Type commands below...\");\n        this.prompt();\n        term._core.register(term.addDisposableListener('key', function (key, ev) {\n            var printable = !ev.altKey && !ev.altGraphKey && !ev.ctrlKey && !ev.metaKey;\n            if (ev.keyCode === 13) {\n                _this.prompt();\n            }\n            else if (ev.keyCode === 8) {\n                if (term.x > 2) {\n                    term.write('\\b \\b');\n                }\n            }\n            else if (printable) {\n                term.write(key);\n            }\n        }));\n    }\n    TestApp.prototype.prompt = function () {\n        this.term.write('\\r\\n$ ');\n    };\n    ;\n    return TestApp;\n}());\nexports.TestApp = TestApp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90cy9hcHAudHM/NjkyYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdCQUE2QjtBQUM3QixvQ0FBK0I7QUFFL0I7SUFRSTtRQUFBLGlCQXVDQztRQXJDRyxJQUFJLElBQUksR0FBRyxFQUE0QixDQUFDO1FBR3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSztRQUd6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXJCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUlkLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsVUFBQyxHQUFRLEVBQUUsRUFBTztZQUNwRSxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDNUUsSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtnQkFFbkIsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2pCO2lCQUNJLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7Z0JBRXZCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDdkI7YUFDSjtpQkFDSSxJQUFJLFNBQVMsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNuQjtRQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFUixDQUFDO0lBNUNPLHdCQUFNLEdBQWQ7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQUEsQ0FBQztJQTJDTixjQUFDO0FBQUQsQ0FBQztBQWhEWSwwQkFBTyIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAneHRlcm0vZGlzdC94dGVybS5jc3MnXG5pbXBvcnQgKiBhcyBYdGVybSBmcm9tICd4dGVybSc7XG5cbmV4cG9ydCBjbGFzcyBUZXN0QXBwIHtcbiAgICB0ZXJtOiBhbnk7XG5cbiAgICBwcml2YXRlIHByb21wdCgpIHtcbiAgICAgICAgdGhpcy50ZXJtLndyaXRlKCdcXHJcXG4kICcpO1xuICAgIH07XG5cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgIGxldCBvcHRzID0ge30gYXMgWHRlcm0uSVRlcm1pbmFsT3B0aW9ucztcblxuXG4gICAgICAgIG9wdHMuY3Vyc29yQmxpbmsgPSB0cnVlO1xuICAgICAgICBvcHRzLmN1cnNvclN0eWxlID0gJ3VuZGVybGluZSc7XG4gICAgICAgIG9wdHMuZGlzYWJsZVN0ZGluID0gZmFsc2VcbiAgICAgICAgLy9mb250U2l6ZTogNDBcblxuICAgICAgICB0aGlzLnRlcm0gPSBuZXcgWHRlcm0uVGVybWluYWwob3B0cyk7XG5cbiAgICAgICAgbGV0IHRlcm0gPSB0aGlzLnRlcm07XG5cbiAgICAgICAgdGhpcy50ZXJtLm9wZW4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlcm1pbmFsJykpO1xuXG4gICAgICAgIHRoaXMudGVybS53cml0ZShcIk1vY2hpaSBVSSB0ZXJtaW5hbC4gVHlwZSBjb21tYW5kcyBiZWxvdy4uLlwiKTtcblxuICAgICAgICB0aGlzLnByb21wdCgpO1xuXG5cblxuICAgICAgICB0ZXJtLl9jb3JlLnJlZ2lzdGVyKHRlcm0uYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdrZXknLCAoa2V5OiBhbnksIGV2OiBhbnkpID0+IHtcbiAgICAgICAgICAgIHZhciBwcmludGFibGUgPSAhZXYuYWx0S2V5ICYmICFldi5hbHRHcmFwaEtleSAmJiAhZXYuY3RybEtleSAmJiAhZXYubWV0YUtleTtcbiAgICAgICAgICAgIGlmIChldi5rZXlDb2RlID09PSAxMykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9tcHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDgpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3QgZGVsZXRlIHRoZSBwcm9tcHRcbiAgICAgICAgICAgICAgICBpZiAodGVybS54ID4gMikge1xuICAgICAgICAgICAgICAgICAgICB0ZXJtLndyaXRlKCdcXGIgXFxiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJpbnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGVybS53cml0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICB9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3RzL2FwcC50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){eval("\nvar content = __webpack_require__(21);\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(23)(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {\n\tmodule.hot.accept(\"!!../../css-loader/dist/cjs.js!./xterm.css\", function() {\n\t\tvar newContent = require(\"!!../../css-loader/dist/cjs.js!./xterm.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vZGlzdC94dGVybS5jc3M/MmQ5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQTRDOztBQUVsRSw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsRUFBc0M7O0FBRTNEOztBQUVBLEdBQUcsS0FBVTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQSxFQUFFOztBQUVGLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3h0ZXJtLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4veHRlcm0uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3h0ZXJtLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3h0ZXJtL2Rpc3QveHRlcm0uY3NzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(22)(false);\n// Module\nexports.push([module.i, "/**\\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\\n * https://github.com/chjj/term.js\\n * @license MIT\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\"Software\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n * THE SOFTWARE.\\n *\\n * Originally forked from (with the author\'s permission):\\n *   Fabrice Bellard\'s javascript vt100 for jslinux:\\n *   http://bellard.org/jslinux/\\n *   Copyright (c) 2011 Fabrice Bellard\\n *   The original design remains. The terminal itself\\n *   has been extended to include xterm CSI codes, among\\n *   other features.\\n */\\n\\n/**\\n *  Default styles for xterm.js\\n */\\n\\n.xterm {\\n    font-family: courier-new, courier, monospace;\\n    font-feature-settings: \\"liga\\" 0;\\n    position: relative;\\n    user-select: none;\\n    -ms-user-select: none;\\n    -webkit-user-select: none;\\n}\\n\\n.xterm.focus,\\n.xterm:focus {\\n    outline: none;\\n}\\n\\n.xterm .xterm-helpers {\\n    position: absolute;\\n    top: 0;\\n    /**\\n     * The z-index of the helpers must be higher than the canvases in order for\\n     * IMEs to appear on top.\\n     */\\n    z-index: 10;\\n}\\n\\n.xterm .xterm-helper-textarea {\\n    /*\\n     * HACK: to fix IE\'s blinking cursor\\n     * Move textarea out of the screen to the far left, so that the cursor is not visible.\\n     */\\n    position: absolute;\\n    opacity: 0;\\n    left: -9999em;\\n    top: 0;\\n    width: 0;\\n    height: 0;\\n    z-index: -10;\\n    /** Prevent wrapping so the IME appears against the textarea at the correct position */\\n    white-space: nowrap;\\n    overflow: hidden;\\n    resize: none;\\n}\\n\\n.xterm .composition-view {\\n    /* TODO: Composition position got messed up somewhere */\\n    background: #000;\\n    color: #FFF;\\n    display: none;\\n    position: absolute;\\n    white-space: nowrap;\\n    z-index: 1;\\n}\\n\\n.xterm .composition-view.active {\\n    display: block;\\n}\\n\\n.xterm .xterm-viewport {\\n    /* On OS X this is required in order for the scroll bar to appear fully opaque */\\n    background-color: #000;\\n    overflow-y: scroll;\\n    cursor: default;\\n    position: absolute;\\n    right: 0;\\n    left: 0;\\n    top: 0;\\n    bottom: 0;\\n}\\n\\n.xterm .xterm-screen {\\n    position: relative;\\n}\\n\\n.xterm .xterm-screen canvas {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n}\\n\\n.xterm .xterm-scroll-area {\\n    visibility: hidden;\\n}\\n\\n.xterm-char-measure-element {\\n    display: inline-block;\\n    visibility: hidden;\\n    position: absolute;\\n    top: 0;\\n    left: -9999em;\\n    line-height: normal;\\n}\\n\\n.xterm {\\n    cursor: text;\\n}\\n\\n.xterm.enable-mouse-events {\\n    /* When mouse events are enabled (eg. tmux), revert to the standard pointer cursor */\\n    cursor: default;\\n}\\n\\n.xterm.xterm-cursor-pointer {\\n    cursor: pointer;\\n}\\n\\n.xterm.column-select.focus {\\n    /* Column selection mode */\\n    cursor: crosshair;\\n}\\n\\n.xterm .xterm-accessibility,\\n.xterm .xterm-message {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    bottom: 0;\\n    right: 0;\\n    z-index: 100;\\n    color: transparent;\\n}\\n\\n.xterm .live-region {\\n    position: absolute;\\n    left: -9999px;\\n    width: 1px;\\n    height: 1px;\\n    overflow: hidden;\\n}\\n", ""]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vZGlzdC94dGVybS5jc3M/ZGNkYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUFzQztBQUN6RTtBQUNBLGNBQWMsUUFBUywwb0RBQTBvRCxtREFBbUQsd0NBQXdDLHlCQUF5Qix3QkFBd0IsNEJBQTRCLGdDQUFnQyxHQUFHLGlDQUFpQyxvQkFBb0IsR0FBRywyQkFBMkIseUJBQXlCLGFBQWEsb0pBQW9KLEdBQUcsbUNBQW1DLGdMQUFnTCxpQkFBaUIsb0JBQW9CLGFBQWEsZUFBZSxnQkFBZ0IsbUJBQW1CLHVIQUF1SCx1QkFBdUIsbUJBQW1CLEdBQUcsOEJBQThCLHFGQUFxRixrQkFBa0Isb0JBQW9CLHlCQUF5QiwwQkFBMEIsaUJBQWlCLEdBQUcscUNBQXFDLHFCQUFxQixHQUFHLDRCQUE0QixvSEFBb0gseUJBQXlCLHNCQUFzQix5QkFBeUIsZUFBZSxjQUFjLGFBQWEsZ0JBQWdCLEdBQUcsMEJBQTBCLHlCQUF5QixHQUFHLGlDQUFpQyx5QkFBeUIsY0FBYyxhQUFhLEdBQUcsK0JBQStCLHlCQUF5QixHQUFHLGlDQUFpQyw0QkFBNEIseUJBQXlCLHlCQUF5QixhQUFhLG9CQUFvQiwwQkFBMEIsR0FBRyxZQUFZLG1CQUFtQixHQUFHLGdDQUFnQyxpSEFBaUgsR0FBRyxpQ0FBaUMsc0JBQXNCLEdBQUcsZ0NBQWdDLHlEQUF5RCxHQUFHLHlEQUF5RCx5QkFBeUIsY0FBYyxhQUFhLGdCQUFnQixlQUFlLG1CQUFtQix5QkFBeUIsR0FBRyx5QkFBeUIseUJBQXlCLG9CQUFvQixpQkFBaUIsa0JBQWtCLHVCQUF1QixHQUFHIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qKlxcbiAqIENvcHlyaWdodCAoYykgMjAxNCBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxMywgQ2hyaXN0b3BoZXIgSmVmZnJleSAoTUlUIExpY2Vuc2UpXFxuICogaHR0cHM6Ly9naXRodWIuY29tL2NoamovdGVybS5qc1xcbiAqIEBsaWNlbnNlIE1JVFxcbiAqXFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFxcXCJTb2Z0d2FyZVxcXCIpLCB0byBkZWFsXFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxcbiAqXFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG4gKlxcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXFxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxcbiAqIFRIRSBTT0ZUV0FSRS5cXG4gKlxcbiAqIE9yaWdpbmFsbHkgZm9ya2VkIGZyb20gKHdpdGggdGhlIGF1dGhvcidzIHBlcm1pc3Npb24pOlxcbiAqICAgRmFicmljZSBCZWxsYXJkJ3MgamF2YXNjcmlwdCB2dDEwMCBmb3IganNsaW51eDpcXG4gKiAgIGh0dHA6Ly9iZWxsYXJkLm9yZy9qc2xpbnV4L1xcbiAqICAgQ29weXJpZ2h0IChjKSAyMDExIEZhYnJpY2UgQmVsbGFyZFxcbiAqICAgVGhlIG9yaWdpbmFsIGRlc2lnbiByZW1haW5zLiBUaGUgdGVybWluYWwgaXRzZWxmXFxuICogICBoYXMgYmVlbiBleHRlbmRlZCB0byBpbmNsdWRlIHh0ZXJtIENTSSBjb2RlcywgYW1vbmdcXG4gKiAgIG90aGVyIGZlYXR1cmVzLlxcbiAqL1xcblxcbi8qKlxcbiAqICBEZWZhdWx0IHN0eWxlcyBmb3IgeHRlcm0uanNcXG4gKi9cXG5cXG4ueHRlcm0ge1xcbiAgICBmb250LWZhbWlseTogY291cmllci1uZXcsIGNvdXJpZXIsIG1vbm9zcGFjZTtcXG4gICAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcXFwibGlnYVxcXCIgMDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4ueHRlcm0uZm9jdXMsXFxuLnh0ZXJtOmZvY3VzIHtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnh0ZXJtIC54dGVybS1oZWxwZXJzIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIC8qKlxcbiAgICAgKiBUaGUgei1pbmRleCBvZiB0aGUgaGVscGVycyBtdXN0IGJlIGhpZ2hlciB0aGFuIHRoZSBjYW52YXNlcyBpbiBvcmRlciBmb3JcXG4gICAgICogSU1FcyB0byBhcHBlYXIgb24gdG9wLlxcbiAgICAgKi9cXG4gICAgei1pbmRleDogMTA7XFxufVxcblxcbi54dGVybSAueHRlcm0taGVscGVyLXRleHRhcmVhIHtcXG4gICAgLypcXG4gICAgICogSEFDSzogdG8gZml4IElFJ3MgYmxpbmtpbmcgY3Vyc29yXFxuICAgICAqIE1vdmUgdGV4dGFyZWEgb3V0IG9mIHRoZSBzY3JlZW4gdG8gdGhlIGZhciBsZWZ0LCBzbyB0aGF0IHRoZSBjdXJzb3IgaXMgbm90IHZpc2libGUuXFxuICAgICAqL1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIGxlZnQ6IC05OTk5ZW07XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDA7XFxuICAgIGhlaWdodDogMDtcXG4gICAgei1pbmRleDogLTEwO1xcbiAgICAvKiogUHJldmVudCB3cmFwcGluZyBzbyB0aGUgSU1FIGFwcGVhcnMgYWdhaW5zdCB0aGUgdGV4dGFyZWEgYXQgdGhlIGNvcnJlY3QgcG9zaXRpb24gKi9cXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgcmVzaXplOiBub25lO1xcbn1cXG5cXG4ueHRlcm0gLmNvbXBvc2l0aW9uLXZpZXcge1xcbiAgICAvKiBUT0RPOiBDb21wb3NpdGlvbiBwb3NpdGlvbiBnb3QgbWVzc2VkIHVwIHNvbWV3aGVyZSAqL1xcbiAgICBiYWNrZ3JvdW5kOiAjMDAwO1xcbiAgICBjb2xvcjogI0ZGRjtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICB6LWluZGV4OiAxO1xcbn1cXG5cXG4ueHRlcm0gLmNvbXBvc2l0aW9uLXZpZXcuYWN0aXZlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi54dGVybSAueHRlcm0tdmlld3BvcnQge1xcbiAgICAvKiBPbiBPUyBYIHRoaXMgaXMgcmVxdWlyZWQgaW4gb3JkZXIgZm9yIHRoZSBzY3JvbGwgYmFyIHRvIGFwcGVhciBmdWxseSBvcGFxdWUgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgYm90dG9tOiAwO1xcbn1cXG5cXG4ueHRlcm0gLnh0ZXJtLXNjcmVlbiB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLnh0ZXJtIC54dGVybS1zY3JlZW4gY2FudmFzIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxufVxcblxcbi54dGVybSAueHRlcm0tc2Nyb2xsLWFyZWEge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcblxcbi54dGVybS1jaGFyLW1lYXN1cmUtZWxlbWVudCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogLTk5OTllbTtcXG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG59XFxuXFxuLnh0ZXJtIHtcXG4gICAgY3Vyc29yOiB0ZXh0O1xcbn1cXG5cXG4ueHRlcm0uZW5hYmxlLW1vdXNlLWV2ZW50cyB7XFxuICAgIC8qIFdoZW4gbW91c2UgZXZlbnRzIGFyZSBlbmFibGVkIChlZy4gdG11eCksIHJldmVydCB0byB0aGUgc3RhbmRhcmQgcG9pbnRlciBjdXJzb3IgKi9cXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG5cXG4ueHRlcm0ueHRlcm0tY3Vyc29yLXBvaW50ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi54dGVybS5jb2x1bW4tc2VsZWN0LmZvY3VzIHtcXG4gICAgLyogQ29sdW1uIHNlbGVjdGlvbiBtb2RlICovXFxuICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xcbn1cXG5cXG4ueHRlcm0gLnh0ZXJtLWFjY2Vzc2liaWxpdHksXFxuLnh0ZXJtIC54dGVybS1tZXNzYWdlIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ueHRlcm0gLmxpdmUtcmVnaW9uIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAtOTk5OXB4O1xcbiAgICB3aWR0aDogMXB4O1xcbiAgICBoZWlnaHQ6IDFweDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXCIsIFwiXCJdKTtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy94dGVybS9kaXN0L3h0ZXJtLmNzc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzRiYmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMsZ0JBQWdCO0FBQ3ZELE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7OztBQUdKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxvQkFBb0I7QUFDbkMsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxjQUFjO0FBQ25FO0FBQ0EiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === "undefined") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve "head" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }\n                // }\n                if (typeof target === \'function\') {\n                        return target();\n                }\n                if (typeof memo[target] === "undefined") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(24);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== "undefined" && DEBUG) {\n\t\tif (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === "object" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = "head";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = "bottom";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error("Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === "top") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === "bottom") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === "object" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error("[Style Loader]\\n\\n Invalid value for parameter \'insertAt\' (\'options.insertAt\') found.\\n Must be \'top\', \'bottom\', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement("style");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement("link");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\toptions.attrs.rel = "stylesheet";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {\n\t\treturn null;\n\t}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === \'function\'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don\'t add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === "function" &&\n\t\ttypeof URL.createObjectURL === "function" &&\n\t\ttypeof URL.revokeObjectURL === "function" &&\n\t\ttypeof Blob === "function" &&\n\t\ttypeof btoa === "function"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join(\'\\n\');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? "" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute("media", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn\'t defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\n\t}\n\n\tvar blob = new Blob([css], { type: "text/css" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,exports){eval('\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function "fixes" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== "undefined" && window.location;\n\n  if (!location) {\n    throw new Error("fixUrls requires window.location");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== "string") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + "//" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, "/");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word "url" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn\'t a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn\'t a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn\'t a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^"(.*)"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^\'(.*)\'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf("//") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf("/") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with \'/\'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, ""); // Strip leading \'./\'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn "url(" + JSON.stringify(newUrl) + ")";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2UwNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Terminal_1 = __webpack_require__(26);\nvar Strings = __webpack_require__(12);\nvar Terminal = (function () {\n    function Terminal(options) {\n        this._core = new Terminal_1.Terminal(options);\n    }\n    Object.defineProperty(Terminal.prototype, "element", {\n        get: function () { return this._core.element; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, "textarea", {\n        get: function () { return this._core.textarea; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, "rows", {\n        get: function () { return this._core.rows; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, "cols", {\n        get: function () { return this._core.cols; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Terminal.prototype, "markers", {\n        get: function () { return this._core.markers; },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.blur = function () {\n        this._core.blur();\n    };\n    Terminal.prototype.focus = function () {\n        this._core.focus();\n    };\n    Terminal.prototype.on = function (type, listener) {\n        this._core.on(type, listener);\n    };\n    Terminal.prototype.off = function (type, listener) {\n        this._core.off(type, listener);\n    };\n    Terminal.prototype.emit = function (type, data) {\n        this._core.emit(type, data);\n    };\n    Terminal.prototype.addDisposableListener = function (type, handler) {\n        return this._core.addDisposableListener(type, handler);\n    };\n    Terminal.prototype.resize = function (columns, rows) {\n        this._core.resize(columns, rows);\n    };\n    Terminal.prototype.writeln = function (data) {\n        this._core.writeln(data);\n    };\n    Terminal.prototype.open = function (parent) {\n        this._core.open(parent);\n    };\n    Terminal.prototype.attachCustomKeyEventHandler = function (customKeyEventHandler) {\n        this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n    };\n    Terminal.prototype.registerLinkMatcher = function (regex, handler, options) {\n        return this._core.registerLinkMatcher(regex, handler, options);\n    };\n    Terminal.prototype.deregisterLinkMatcher = function (matcherId) {\n        this._core.deregisterLinkMatcher(matcherId);\n    };\n    Terminal.prototype.registerCharacterJoiner = function (handler) {\n        return this._core.registerCharacterJoiner(handler);\n    };\n    Terminal.prototype.deregisterCharacterJoiner = function (joinerId) {\n        this._core.deregisterCharacterJoiner(joinerId);\n    };\n    Terminal.prototype.addMarker = function (cursorYOffset) {\n        return this._core.addMarker(cursorYOffset);\n    };\n    Terminal.prototype.hasSelection = function () {\n        return this._core.hasSelection();\n    };\n    Terminal.prototype.getSelection = function () {\n        return this._core.getSelection();\n    };\n    Terminal.prototype.clearSelection = function () {\n        this._core.clearSelection();\n    };\n    Terminal.prototype.selectAll = function () {\n        this._core.selectAll();\n    };\n    Terminal.prototype.selectLines = function (start, end) {\n        this._core.selectLines(start, end);\n    };\n    Terminal.prototype.dispose = function () {\n        this._core.dispose();\n    };\n    Terminal.prototype.destroy = function () {\n        this._core.destroy();\n    };\n    Terminal.prototype.scrollLines = function (amount) {\n        this._core.scrollLines(amount);\n    };\n    Terminal.prototype.scrollPages = function (pageCount) {\n        this._core.scrollPages(pageCount);\n    };\n    Terminal.prototype.scrollToTop = function () {\n        this._core.scrollToTop();\n    };\n    Terminal.prototype.scrollToBottom = function () {\n        this._core.scrollToBottom();\n    };\n    Terminal.prototype.scrollToLine = function (line) {\n        this._core.scrollToLine(line);\n    };\n    Terminal.prototype.clear = function () {\n        this._core.clear();\n    };\n    Terminal.prototype.write = function (data) {\n        this._core.write(data);\n    };\n    Terminal.prototype.getOption = function (key) {\n        return this._core.getOption(key);\n    };\n    Terminal.prototype.setOption = function (key, value) {\n        this._core.setOption(key, value);\n    };\n    Terminal.prototype.refresh = function (start, end) {\n        this._core.refresh(start, end);\n    };\n    Terminal.prototype.reset = function () {\n        this._core.reset();\n    };\n    Terminal.applyAddon = function (addon) {\n        addon.apply(Terminal);\n    };\n    Object.defineProperty(Terminal, "strings", {\n        get: function () {\n            return Strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Terminal;\n}());\nexports.Terminal = Terminal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BufferSet_1 = __webpack_require__(27);\nvar Buffer_1 = __webpack_require__(0);\nvar CompositionHelper_1 = __webpack_require__(30);\nvar EventEmitter_1 = __webpack_require__(2);\nvar Viewport_1 = __webpack_require__(31);\nvar Clipboard_1 = __webpack_require__(32);\nvar EscapeSequences_1 = __webpack_require__(7);\nvar InputHandler_1 = __webpack_require__(33);\nvar Renderer_1 = __webpack_require__(37);\nvar Linkifier_1 = __webpack_require__(48);\nvar SelectionManager_1 = __webpack_require__(49);\nvar CharMeasure_1 = __webpack_require__(52);\nvar Browser = __webpack_require__(5);\nvar Lifecycle_1 = __webpack_require__(6);\nvar Strings = __webpack_require__(12);\nvar MouseHelper_1 = __webpack_require__(18);\nvar Clone_1 = __webpack_require__(53);\nvar SoundManager_1 = __webpack_require__(54);\nvar ColorManager_1 = __webpack_require__(9);\nvar MouseZoneManager_1 = __webpack_require__(17);\nvar AccessibilityManager_1 = __webpack_require__(55);\nvar ScreenDprMonitor_1 = __webpack_require__(16);\nvar CharAtlasCache_1 = __webpack_require__(14);\nvar DomRenderer_1 = __webpack_require__(56);\nvar Keyboard_1 = __webpack_require__(58);\nvar document = (typeof window !== 'undefined') ? window.document : null;\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\nvar WRITE_BATCH_SIZE = 300;\nvar CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\nvar DEFAULT_OPTIONS = {\n    cols: 80,\n    rows: 24,\n    convertEol: false,\n    termName: 'xterm',\n    cursorBlink: false,\n    cursorStyle: 'block',\n    bellSound: SoundManager_1.DEFAULT_BELL_SOUND,\n    bellStyle: 'none',\n    drawBoldTextInBrightColors: true,\n    enableBold: true,\n    experimentalCharAtlas: 'static',\n    fontFamily: 'courier-new, courier, monospace',\n    fontSize: 15,\n    fontWeight: 'normal',\n    fontWeightBold: 'bold',\n    lineHeight: 1.0,\n    letterSpacing: 0,\n    scrollback: 1000,\n    screenKeys: false,\n    screenReaderMode: false,\n    debug: false,\n    macOptionIsMeta: false,\n    macOptionClickForcesSelection: false,\n    cancelEvents: false,\n    disableStdin: false,\n    useFlowControl: false,\n    allowTransparency: false,\n    tabStopWidth: 8,\n    theme: null,\n    rightClickSelectsWord: Browser.isMac,\n    rendererType: 'canvas',\n    experimentalBufferLineImpl: 'TypedArray'\n};\nvar Terminal = (function (_super) {\n    __extends(Terminal, _super);\n    function Terminal(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.browser = Browser;\n        _this._blankLine = null;\n        _this.options = Clone_1.clone(options);\n        _this._setup();\n        return _this;\n    }\n    Terminal.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._customKeyEventHandler = null;\n        CharAtlasCache_1.removeTerminalFromCache(this);\n        this.handler = function () { };\n        this.write = function () { };\n        if (this.element && this.element.parentNode) {\n            this.element.parentNode.removeChild(this.element);\n        }\n    };\n    Terminal.prototype.destroy = function () {\n        this.dispose();\n    };\n    Terminal.prototype._setup = function () {\n        var _this = this;\n        Object.keys(DEFAULT_OPTIONS).forEach(function (key) {\n            if (_this.options[key] === null || _this.options[key] === undefined) {\n                _this.options[key] = DEFAULT_OPTIONS[key];\n            }\n        });\n        this._parent = document ? document.body : null;\n        this.cols = this.options.cols;\n        this.rows = this.options.rows;\n        if (this.options.handler) {\n            this.on('data', this.options.handler);\n        }\n        this.cursorState = 0;\n        this.cursorHidden = false;\n        this._customKeyEventHandler = null;\n        this.applicationKeypad = false;\n        this.applicationCursor = false;\n        this.originMode = false;\n        this.insertMode = false;\n        this.wraparoundMode = true;\n        this.bracketedPasteMode = false;\n        this.charset = null;\n        this.gcharset = null;\n        this.glevel = 0;\n        this.charsets = [null];\n        this.curAttr = Buffer_1.DEFAULT_ATTR;\n        this.params = [];\n        this.currentParam = 0;\n        this.writeBuffer = [];\n        this._writeInProgress = false;\n        this._xoffSentToCatchUp = false;\n        this._userScrolling = false;\n        this._inputHandler = new InputHandler_1.InputHandler(this);\n        this.register(this._inputHandler);\n        this.renderer = this.renderer || null;\n        this.selectionManager = this.selectionManager || null;\n        this.linkifier = this.linkifier || new Linkifier_1.Linkifier(this);\n        this._mouseZoneManager = this._mouseZoneManager || null;\n        this.soundManager = this.soundManager || new SoundManager_1.SoundManager(this);\n        this.buffers = new BufferSet_1.BufferSet(this);\n        if (this.selectionManager) {\n            this.selectionManager.clearSelection();\n            this.selectionManager.initBuffersListeners();\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"buffer\", {\n        get: function () {\n            return this.buffers.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.eraseAttr = function () {\n        return (Buffer_1.DEFAULT_ATTR & ~0x1ff) | (this.curAttr & 0x1ff);\n    };\n    Terminal.prototype.focus = function () {\n        if (this.textarea) {\n            this.textarea.focus();\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"isFocused\", {\n        get: function () {\n            return document.activeElement === this.textarea && document.hasFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.getOption = function (key) {\n        if (!(key in DEFAULT_OPTIONS)) {\n            throw new Error('No option with key \"' + key + '\"');\n        }\n        return this.options[key];\n    };\n    Terminal.prototype.setOption = function (key, value) {\n        if (!(key in DEFAULT_OPTIONS)) {\n            throw new Error('No option with key \"' + key + '\"');\n        }\n        if (CONSTRUCTOR_ONLY_OPTIONS.indexOf(key) !== -1) {\n            console.error(\"Option \\\"\" + key + \"\\\" can only be set in the constructor\");\n        }\n        if (this.options[key] === value) {\n            return;\n        }\n        switch (key) {\n            case 'bellStyle':\n                if (!value) {\n                    value = 'none';\n                }\n                break;\n            case 'cursorStyle':\n                if (!value) {\n                    value = 'block';\n                }\n                break;\n            case 'fontWeight':\n                if (!value) {\n                    value = 'normal';\n                }\n                break;\n            case 'fontWeightBold':\n                if (!value) {\n                    value = 'bold';\n                }\n                break;\n            case 'lineHeight':\n                if (value < 1) {\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\n                    return;\n                }\n            case 'rendererType':\n                if (!value) {\n                    value = 'canvas';\n                }\n                break;\n            case 'tabStopWidth':\n                if (value < 1) {\n                    console.warn(key + \" cannot be less than 1, value: \" + value);\n                    return;\n                }\n                break;\n            case 'theme':\n                if (this.renderer) {\n                    this._setTheme(value);\n                    return;\n                }\n                break;\n            case 'scrollback':\n                value = Math.min(value, Buffer_1.MAX_BUFFER_SIZE);\n                if (value < 0) {\n                    console.warn(key + \" cannot be less than 0, value: \" + value);\n                    return;\n                }\n                if (this.options[key] !== value) {\n                    var newBufferLength = this.rows + value;\n                    if (this.buffer.lines.length > newBufferLength) {\n                        var amountToTrim = this.buffer.lines.length - newBufferLength;\n                        var needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\n                        this.buffer.lines.trimStart(amountToTrim);\n                        this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\n                        this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\n                        if (needsRefresh) {\n                            this.refresh(0, this.rows - 1);\n                        }\n                    }\n                }\n                break;\n        }\n        this.options[key] = value;\n        switch (key) {\n            case 'fontFamily':\n            case 'fontSize':\n                if (this.renderer) {\n                    this.renderer.clear();\n                    this.charMeasure.measure(this.options);\n                }\n                break;\n            case 'drawBoldTextInBrightColors':\n            case 'experimentalCharAtlas':\n            case 'enableBold':\n            case 'letterSpacing':\n            case 'lineHeight':\n            case 'fontWeight':\n            case 'fontWeightBold':\n                if (this.renderer) {\n                    this.renderer.clear();\n                    this.renderer.onResize(this.cols, this.rows);\n                    this.refresh(0, this.rows - 1);\n                }\n            case 'rendererType':\n                if (this.renderer) {\n                    this.unregister(this.renderer);\n                    this.renderer.dispose();\n                    this.renderer = null;\n                }\n                this._setupRenderer();\n                this.renderer.onCharSizeChanged();\n                if (this._theme) {\n                    this.renderer.setTheme(this._theme);\n                }\n                this.mouseHelper.setRenderer(this.renderer);\n                break;\n            case 'scrollback':\n                this.buffers.resize(this.cols, this.rows);\n                if (this.viewport) {\n                    this.viewport.syncScrollArea();\n                }\n                break;\n            case 'screenReaderMode':\n                if (value) {\n                    if (!this._accessibilityManager) {\n                        this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this);\n                    }\n                }\n                else {\n                    if (this._accessibilityManager) {\n                        this._accessibilityManager.dispose();\n                        this._accessibilityManager = null;\n                    }\n                }\n                break;\n            case 'tabStopWidth':\n                this.buffers.setupTabStops();\n                break;\n            case 'experimentalBufferLineImpl':\n                this.buffers.normal.setBufferLineFactory(value);\n                this.buffers.alt.setBufferLineFactory(value);\n                this._blankLine = null;\n                break;\n        }\n        if (this.renderer) {\n            this.renderer.onOptionsChanged();\n        }\n    };\n    Terminal.prototype._onTextAreaFocus = function (ev) {\n        if (this.sendFocus) {\n            this.handler(EscapeSequences_1.C0.ESC + '[I');\n        }\n        this.updateCursorStyle(ev);\n        this.element.classList.add('focus');\n        this.showCursor();\n        this.emit('focus');\n    };\n    Terminal.prototype.blur = function () {\n        return this.textarea.blur();\n    };\n    Terminal.prototype._onTextAreaBlur = function () {\n        this.textarea.value = '';\n        this.refresh(this.buffer.y, this.buffer.y);\n        if (this.sendFocus) {\n            this.handler(EscapeSequences_1.C0.ESC + '[O');\n        }\n        this.element.classList.remove('focus');\n        this.emit('blur');\n    };\n    Terminal.prototype._initGlobal = function () {\n        var _this = this;\n        this._bindKeys();\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'copy', function (event) {\n            if (!_this.hasSelection()) {\n                return;\n            }\n            Clipboard_1.copyHandler(event, _this, _this.selectionManager);\n        }));\n        var pasteHandlerWrapper = function (event) { return Clipboard_1.pasteHandler(event, _this); };\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'paste', pasteHandlerWrapper));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'paste', pasteHandlerWrapper));\n        if (Browser.isFirefox) {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'mousedown', function (event) {\n                if (event.button === 2) {\n                    Clipboard_1.rightClickHandler(event, _this.textarea, _this.selectionManager, _this.options.rightClickSelectsWord);\n                }\n            }));\n        }\n        else {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'contextmenu', function (event) {\n                Clipboard_1.rightClickHandler(event, _this.textarea, _this.selectionManager, _this.options.rightClickSelectsWord);\n            }));\n        }\n        if (Browser.isLinux) {\n            this.register(Lifecycle_1.addDisposableDomListener(this.element, 'auxclick', function (event) {\n                if (event.button === 1) {\n                    Clipboard_1.moveTextAreaUnderMouseCursor(event, _this.textarea);\n                }\n            }));\n        }\n    };\n    Terminal.prototype._bindKeys = function () {\n        var _this = this;\n        var self = this;\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keydown', function (ev) {\n            if (document.activeElement !== this) {\n                return;\n            }\n            self._keyDown(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keypress', function (ev) {\n            if (document.activeElement !== this) {\n                return;\n            }\n            self._keyPress(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'keyup', function (ev) {\n            if (!wasModifierKeyOnlyEvent(ev)) {\n                _this.focus();\n            }\n            self._keyUp(ev);\n        }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'keydown', function (ev) { return _this._keyDown(ev); }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'keypress', function (ev) { return _this._keyPress(ev); }, true));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionstart', function () { return _this._compositionHelper.compositionstart(); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionupdate', function (e) { return _this._compositionHelper.compositionupdate(e); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'compositionend', function () { return _this._compositionHelper.compositionend(); }));\n        this.register(this.addDisposableListener('refresh', function () { return _this._compositionHelper.updateCompositionElements(); }));\n        this.register(this.addDisposableListener('refresh', function (data) { return _this._queueLinkification(data.start, data.end); }));\n    };\n    Terminal.prototype.open = function (parent) {\n        var _this = this;\n        this._parent = parent || this._parent;\n        if (!this._parent) {\n            throw new Error('Terminal requires a parent element.');\n        }\n        this._context = this._parent.ownerDocument.defaultView;\n        this._document = this._parent.ownerDocument;\n        this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\n        this._screenDprMonitor.setListener(function () { return _this.emit('dprchange', window.devicePixelRatio); });\n        this.register(this._screenDprMonitor);\n        this.element = this._document.createElement('div');\n        this.element.dir = 'ltr';\n        this.element.classList.add('terminal');\n        this.element.classList.add('xterm');\n        this.element.setAttribute('tabindex', '0');\n        this._parent.appendChild(this.element);\n        var fragment = document.createDocumentFragment();\n        this._viewportElement = document.createElement('div');\n        this._viewportElement.classList.add('xterm-viewport');\n        fragment.appendChild(this._viewportElement);\n        this._viewportScrollArea = document.createElement('div');\n        this._viewportScrollArea.classList.add('xterm-scroll-area');\n        this._viewportElement.appendChild(this._viewportScrollArea);\n        this.screenElement = document.createElement('div');\n        this.screenElement.classList.add('xterm-screen');\n        this._helperContainer = document.createElement('div');\n        this._helperContainer.classList.add('xterm-helpers');\n        this.screenElement.appendChild(this._helperContainer);\n        fragment.appendChild(this.screenElement);\n        this._mouseZoneManager = new MouseZoneManager_1.MouseZoneManager(this);\n        this.register(this._mouseZoneManager);\n        this.register(this.addDisposableListener('scroll', function () { return _this._mouseZoneManager.clearAll(); }));\n        this.linkifier.attachToDom(this._mouseZoneManager);\n        this.textarea = document.createElement('textarea');\n        this.textarea.classList.add('xterm-helper-textarea');\n        this.textarea.setAttribute('aria-label', Strings.promptLabel);\n        this.textarea.setAttribute('aria-multiline', 'false');\n        this.textarea.setAttribute('autocorrect', 'off');\n        this.textarea.setAttribute('autocapitalize', 'off');\n        this.textarea.setAttribute('spellcheck', 'false');\n        this.textarea.tabIndex = 0;\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'focus', function (ev) { return _this._onTextAreaFocus(ev); }));\n        this.register(Lifecycle_1.addDisposableDomListener(this.textarea, 'blur', function () { return _this._onTextAreaBlur(); }));\n        this._helperContainer.appendChild(this.textarea);\n        this._compositionView = document.createElement('div');\n        this._compositionView.classList.add('composition-view');\n        this._compositionHelper = new CompositionHelper_1.CompositionHelper(this.textarea, this._compositionView, this);\n        this._helperContainer.appendChild(this._compositionView);\n        this.charMeasure = new CharMeasure_1.CharMeasure(document, this._helperContainer);\n        this.element.appendChild(fragment);\n        this._setupRenderer();\n        this._theme = this.options.theme;\n        this.options.theme = null;\n        this.viewport = new Viewport_1.Viewport(this, this._viewportElement, this._viewportScrollArea, this.charMeasure);\n        this.viewport.onThemeChanged(this.renderer.colorManager.colors);\n        this.register(this.viewport);\n        this.register(this.addDisposableListener('cursormove', function () { return _this.renderer.onCursorMove(); }));\n        this.register(this.addDisposableListener('resize', function () { return _this.renderer.onResize(_this.cols, _this.rows); }));\n        this.register(this.addDisposableListener('blur', function () { return _this.renderer.onBlur(); }));\n        this.register(this.addDisposableListener('focus', function () { return _this.renderer.onFocus(); }));\n        this.register(this.addDisposableListener('dprchange', function () { return _this.renderer.onWindowResize(window.devicePixelRatio); }));\n        this.register(Lifecycle_1.addDisposableDomListener(window, 'resize', function () { return _this.renderer.onWindowResize(window.devicePixelRatio); }));\n        this.register(this.charMeasure.addDisposableListener('charsizechanged', function () { return _this.renderer.onCharSizeChanged(); }));\n        this.register(this.renderer.addDisposableListener('resize', function (dimensions) { return _this.viewport.syncScrollArea(); }));\n        this.selectionManager = new SelectionManager_1.SelectionManager(this, this.charMeasure);\n        this.register(Lifecycle_1.addDisposableDomListener(this.element, 'mousedown', function (e) { return _this.selectionManager.onMouseDown(e); }));\n        this.register(this.selectionManager.addDisposableListener('refresh', function (data) { return _this.renderer.onSelectionChanged(data.start, data.end, data.columnSelectMode); }));\n        this.register(this.selectionManager.addDisposableListener('newselection', function (text) {\n            _this.textarea.value = text;\n            _this.textarea.focus();\n            _this.textarea.select();\n        }));\n        this.register(this.addDisposableListener('scroll', function () {\n            _this.viewport.syncScrollArea();\n            _this.selectionManager.refresh();\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(this._viewportElement, 'scroll', function () { return _this.selectionManager.refresh(); }));\n        this.mouseHelper = new MouseHelper_1.MouseHelper(this.renderer);\n        if (this.options.screenReaderMode) {\n            this._accessibilityManager = new AccessibilityManager_1.AccessibilityManager(this);\n        }\n        this.charMeasure.measure(this.options);\n        this.refresh(0, this.rows - 1);\n        this._initGlobal();\n        this.bindMouse();\n    };\n    Terminal.prototype._setupRenderer = function () {\n        switch (this.options.rendererType) {\n            case 'canvas':\n                this.renderer = new Renderer_1.Renderer(this, this.options.theme);\n                break;\n            case 'dom':\n                this.renderer = new DomRenderer_1.DomRenderer(this, this.options.theme);\n                break;\n            default: throw new Error(\"Unrecognized rendererType \\\"\" + this.options.rendererType + \"\\\"\");\n        }\n        this.register(this.renderer);\n    };\n    Terminal.prototype._setTheme = function (theme) {\n        this._theme = theme;\n        var colors = this.renderer.setTheme(theme);\n        if (this.viewport) {\n            this.viewport.onThemeChanged(colors);\n        }\n    };\n    Terminal.prototype.bindMouse = function () {\n        var _this = this;\n        var el = this.element;\n        var self = this;\n        var pressed = 32;\n        function sendButton(ev) {\n            var button;\n            var pos;\n            button = getButton(ev);\n            pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\n            if (!pos)\n                return;\n            sendEvent(button, pos);\n            switch (ev.overrideType || ev.type) {\n                case 'mousedown':\n                    pressed = button;\n                    break;\n                case 'mouseup':\n                    pressed = 32;\n                    break;\n                case 'wheel':\n                    break;\n            }\n        }\n        function sendMove(ev) {\n            var button = pressed;\n            var pos = self.mouseHelper.getRawByteCoords(ev, self.screenElement, self.charMeasure, self.cols, self.rows);\n            if (!pos)\n                return;\n            button += 32;\n            sendEvent(button, pos);\n        }\n        function encode(data, ch) {\n            if (!self.utfMouse) {\n                if (ch === 255) {\n                    data.push(0);\n                    return;\n                }\n                if (ch > 127)\n                    ch = 127;\n                data.push(ch);\n            }\n            else {\n                if (ch === 2047) {\n                    data.push(0);\n                    return;\n                }\n                if (ch < 127) {\n                    data.push(ch);\n                }\n                else {\n                    if (ch > 2047)\n                        ch = 2047;\n                    data.push(0xC0 | (ch >> 6));\n                    data.push(0x80 | (ch & 0x3F));\n                }\n            }\n        }\n        function sendEvent(button, pos) {\n            if (self._vt300Mouse) {\n                button &= 3;\n                pos.x -= 32;\n                pos.y -= 32;\n                var data_1 = EscapeSequences_1.C0.ESC + '[24';\n                if (button === 0)\n                    data_1 += '1';\n                else if (button === 1)\n                    data_1 += '3';\n                else if (button === 2)\n                    data_1 += '5';\n                else if (button === 3)\n                    return;\n                else\n                    data_1 += '0';\n                data_1 += '~[' + pos.x + ',' + pos.y + ']\\r';\n                self.handler(data_1);\n                return;\n            }\n            if (self._decLocator) {\n                button &= 3;\n                pos.x -= 32;\n                pos.y -= 32;\n                if (button === 0)\n                    button = 2;\n                else if (button === 1)\n                    button = 4;\n                else if (button === 2)\n                    button = 6;\n                else if (button === 3)\n                    button = 3;\n                self.handler(EscapeSequences_1.C0.ESC + '['\n                    + button\n                    + ';'\n                    + (button === 3 ? 4 : 0)\n                    + ';'\n                    + pos.y\n                    + ';'\n                    + pos.x\n                    + ';'\n                    + pos.page || 0\n                    + '&w');\n                return;\n            }\n            if (self.urxvtMouse) {\n                pos.x -= 32;\n                pos.y -= 32;\n                pos.x++;\n                pos.y++;\n                self.handler(EscapeSequences_1.C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\n                return;\n            }\n            if (self.sgrMouse) {\n                pos.x -= 32;\n                pos.y -= 32;\n                self.handler(EscapeSequences_1.C0.ESC + '[<'\n                    + (((button & 3) === 3 ? button & ~3 : button) - 32)\n                    + ';'\n                    + pos.x\n                    + ';'\n                    + pos.y\n                    + ((button & 3) === 3 ? 'm' : 'M'));\n                return;\n            }\n            var data = [];\n            encode(data, button);\n            encode(data, pos.x);\n            encode(data, pos.y);\n            self.handler(EscapeSequences_1.C0.ESC + '[M' + String.fromCharCode.apply(String, data));\n        }\n        function getButton(ev) {\n            var button;\n            var shift;\n            var meta;\n            var ctrl;\n            var mod;\n            switch (ev.overrideType || ev.type) {\n                case 'mousedown':\n                    button = ev.button !== null && ev.button !== undefined\n                        ? +ev.button\n                        : ev.which !== null && ev.which !== undefined\n                            ? ev.which - 1\n                            : null;\n                    if (Browser.isMSIE) {\n                        button = button === 1 ? 0 : button === 4 ? 1 : button;\n                    }\n                    break;\n                case 'mouseup':\n                    button = 3;\n                    break;\n                case 'DOMMouseScroll':\n                    button = ev.detail < 0\n                        ? 64\n                        : 65;\n                    break;\n                case 'wheel':\n                    button = ev.deltaY < 0\n                        ? 64\n                        : 65;\n                    break;\n            }\n            shift = ev.shiftKey ? 4 : 0;\n            meta = ev.metaKey ? 8 : 0;\n            ctrl = ev.ctrlKey ? 16 : 0;\n            mod = shift | meta | ctrl;\n            if (self.vt200Mouse) {\n                mod &= ctrl;\n            }\n            else if (!self.normalMouse) {\n                mod = 0;\n            }\n            button = (32 + (mod << 2)) + button;\n            return button;\n        }\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'mousedown', function (ev) {\n            ev.preventDefault();\n            _this.focus();\n            if (!_this.mouseEvents || _this.selectionManager.shouldForceSelection(ev)) {\n                return;\n            }\n            sendButton(ev);\n            if (_this.vt200Mouse) {\n                ev.overrideType = 'mouseup';\n                sendButton(ev);\n                return _this.cancel(ev);\n            }\n            var moveHandler;\n            if (_this.normalMouse) {\n                moveHandler = function (event) {\n                    if (!_this.normalMouse) {\n                        return;\n                    }\n                    sendMove(event);\n                };\n                _this._document.addEventListener('mousemove', moveHandler);\n            }\n            var handler = function (ev) {\n                if (_this.normalMouse && !_this.x10Mouse) {\n                    sendButton(ev);\n                }\n                if (moveHandler) {\n                    _this._document.removeEventListener('mousemove', moveHandler);\n                    moveHandler = null;\n                }\n                _this._document.removeEventListener('mouseup', handler);\n                return _this.cancel(ev);\n            };\n            _this._document.addEventListener('mouseup', handler);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'wheel', function (ev) {\n            if (!_this.mouseEvents) {\n                if (!_this.buffer.hasScrollback) {\n                    var amount = _this.viewport.getLinesScrolled(ev);\n                    if (amount === 0) {\n                        return;\n                    }\n                    var sequence = EscapeSequences_1.C0.ESC + (_this.applicationCursor ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n                    var data = '';\n                    for (var i = 0; i < Math.abs(amount); i++) {\n                        data += sequence;\n                    }\n                    _this.handler(data);\n                }\n                return;\n            }\n            if (_this.x10Mouse || _this._vt300Mouse || _this._decLocator)\n                return;\n            sendButton(ev);\n            ev.preventDefault();\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'wheel', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onWheel(ev);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'touchstart', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onTouchStart(ev);\n            return _this.cancel(ev);\n        }));\n        this.register(Lifecycle_1.addDisposableDomListener(el, 'touchmove', function (ev) {\n            if (_this.mouseEvents)\n                return;\n            _this.viewport.onTouchMove(ev);\n            return _this.cancel(ev);\n        }));\n    };\n    Terminal.prototype.refresh = function (start, end) {\n        if (this.renderer) {\n            this.renderer.refreshRows(start, end);\n        }\n    };\n    Terminal.prototype._queueLinkification = function (start, end) {\n        if (this.linkifier) {\n            this.linkifier.linkifyRows(start, end);\n        }\n    };\n    Terminal.prototype.updateCursorStyle = function (ev) {\n        if (this.selectionManager && this.selectionManager.shouldColumnSelect(ev)) {\n            this.element.classList.add('column-select');\n        }\n        else {\n            this.element.classList.remove('column-select');\n        }\n    };\n    Terminal.prototype.showCursor = function () {\n        if (!this.cursorState) {\n            this.cursorState = 1;\n            this.refresh(this.buffer.y, this.buffer.y);\n        }\n    };\n    Terminal.prototype.scroll = function (isWrapped) {\n        if (isWrapped === void 0) { isWrapped = false; }\n        var newLine;\n        var useRecycling = this.options.experimentalBufferLineImpl !== 'JsArray';\n        if (useRecycling) {\n            newLine = this._blankLine;\n            if (!newLine || newLine.length !== this.cols || newLine.get(0)[Buffer_1.CHAR_DATA_ATTR_INDEX] !== this.eraseAttr()) {\n                newLine = this.buffer.getBlankLine(this.eraseAttr(), isWrapped);\n                this._blankLine = newLine;\n            }\n            newLine.isWrapped = isWrapped;\n        }\n        else {\n            newLine = this.buffer.getBlankLine(this.eraseAttr(), isWrapped);\n        }\n        var topRow = this.buffer.ybase + this.buffer.scrollTop;\n        var bottomRow = this.buffer.ybase + this.buffer.scrollBottom;\n        if (this.buffer.scrollTop === 0) {\n            var willBufferBeTrimmed = this.buffer.lines.isFull;\n            if (bottomRow === this.buffer.lines.length - 1) {\n                if (useRecycling) {\n                    if (willBufferBeTrimmed) {\n                        this.buffer.lines.recycle().copyFrom(newLine);\n                    }\n                    else {\n                        this.buffer.lines.push(newLine.clone());\n                    }\n                }\n                else {\n                    this.buffer.lines.push(newLine);\n                }\n            }\n            else {\n                this.buffer.lines.splice(bottomRow + 1, 0, (useRecycling) ? newLine.clone() : newLine);\n            }\n            if (!willBufferBeTrimmed) {\n                this.buffer.ybase++;\n                if (!this._userScrolling) {\n                    this.buffer.ydisp++;\n                }\n            }\n            else {\n                if (this._userScrolling) {\n                    this.buffer.ydisp = Math.max(this.buffer.ydisp - 1, 0);\n                }\n            }\n        }\n        else {\n            var scrollRegionHeight = bottomRow - topRow + 1;\n            this.buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n            this.buffer.lines.set(bottomRow, (useRecycling) ? newLine.clone() : newLine);\n        }\n        if (!this._userScrolling) {\n            this.buffer.ydisp = this.buffer.ybase;\n        }\n        this.updateRange(this.buffer.scrollTop);\n        this.updateRange(this.buffer.scrollBottom);\n        this.emit('scroll', this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollLines = function (disp, suppressScrollEvent) {\n        if (disp < 0) {\n            if (this.buffer.ydisp === 0) {\n                return;\n            }\n            this._userScrolling = true;\n        }\n        else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\n            this._userScrolling = false;\n        }\n        var oldYdisp = this.buffer.ydisp;\n        this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\n        if (oldYdisp === this.buffer.ydisp) {\n            return;\n        }\n        if (!suppressScrollEvent) {\n            this.emit('scroll', this.buffer.ydisp);\n        }\n        this.refresh(0, this.rows - 1);\n    };\n    Terminal.prototype.scrollPages = function (pageCount) {\n        this.scrollLines(pageCount * (this.rows - 1));\n    };\n    Terminal.prototype.scrollToTop = function () {\n        this.scrollLines(-this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollToBottom = function () {\n        this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n    };\n    Terminal.prototype.scrollToLine = function (line) {\n        var scrollAmount = line - this.buffer.ydisp;\n        if (scrollAmount !== 0) {\n            this.scrollLines(scrollAmount);\n        }\n    };\n    Terminal.prototype.write = function (data) {\n        var _this = this;\n        if (this._isDisposed) {\n            return;\n        }\n        if (!data) {\n            return;\n        }\n        this.writeBuffer.push(data);\n        if (this.options.useFlowControl && !this._xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\n            this.handler(EscapeSequences_1.C0.DC3);\n            this._xoffSentToCatchUp = true;\n        }\n        if (!this._writeInProgress && this.writeBuffer.length > 0) {\n            this._writeInProgress = true;\n            setTimeout(function () {\n                _this._innerWrite();\n            });\n        }\n    };\n    Terminal.prototype._innerWrite = function () {\n        var _this = this;\n        if (this._isDisposed) {\n            this.writeBuffer = [];\n        }\n        var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\n        while (writeBatch.length > 0) {\n            var data = writeBatch.shift();\n            if (this._xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\n                this.handler(EscapeSequences_1.C0.DC1);\n                this._xoffSentToCatchUp = false;\n            }\n            this._refreshStart = this.buffer.y;\n            this._refreshEnd = this.buffer.y;\n            this._inputHandler.parse(data);\n            this.updateRange(this.buffer.y);\n            this.refresh(this._refreshStart, this._refreshEnd);\n        }\n        if (this.writeBuffer.length > 0) {\n            setTimeout(function () { return _this._innerWrite(); }, 0);\n        }\n        else {\n            this._writeInProgress = false;\n        }\n    };\n    Terminal.prototype.writeln = function (data) {\n        this.write(data + '\\r\\n');\n    };\n    Terminal.prototype.attachCustomKeyEventHandler = function (customKeyEventHandler) {\n        this._customKeyEventHandler = customKeyEventHandler;\n    };\n    Terminal.prototype.registerLinkMatcher = function (regex, handler, options) {\n        var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n        this.refresh(0, this.rows - 1);\n        return matcherId;\n    };\n    Terminal.prototype.deregisterLinkMatcher = function (matcherId) {\n        if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n            this.refresh(0, this.rows - 1);\n        }\n    };\n    Terminal.prototype.registerCharacterJoiner = function (handler) {\n        var joinerId = this.renderer.registerCharacterJoiner(handler);\n        this.refresh(0, this.rows - 1);\n        return joinerId;\n    };\n    Terminal.prototype.deregisterCharacterJoiner = function (joinerId) {\n        if (this.renderer.deregisterCharacterJoiner(joinerId)) {\n            this.refresh(0, this.rows - 1);\n        }\n    };\n    Object.defineProperty(Terminal.prototype, \"markers\", {\n        get: function () {\n            return this.buffer.markers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Terminal.prototype.addMarker = function (cursorYOffset) {\n        if (this.buffer !== this.buffers.normal) {\n            return;\n        }\n        return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n    };\n    Terminal.prototype.hasSelection = function () {\n        return this.selectionManager ? this.selectionManager.hasSelection : false;\n    };\n    Terminal.prototype.getSelection = function () {\n        return this.selectionManager ? this.selectionManager.selectionText : '';\n    };\n    Terminal.prototype.clearSelection = function () {\n        if (this.selectionManager) {\n            this.selectionManager.clearSelection();\n        }\n    };\n    Terminal.prototype.selectAll = function () {\n        if (this.selectionManager) {\n            this.selectionManager.selectAll();\n        }\n    };\n    Terminal.prototype.selectLines = function (start, end) {\n        if (this.selectionManager) {\n            this.selectionManager.selectLines(start, end);\n        }\n    };\n    Terminal.prototype._keyDown = function (event) {\n        if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n            return false;\n        }\n        if (!this._compositionHelper.keydown(event)) {\n            if (this.buffer.ybase !== this.buffer.ydisp) {\n                this.scrollToBottom();\n            }\n            return false;\n        }\n        var result = Keyboard_1.evaluateKeyboardEvent(event, this.applicationCursor, this.browser.isMac, this.options.macOptionIsMeta);\n        this.updateCursorStyle(event);\n        if (result.type === 3 || result.type === 2) {\n            var scrollCount = this.rows - 1;\n            this.scrollLines(result.type === 2 ? -scrollCount : scrollCount);\n            return this.cancel(event, true);\n        }\n        if (result.type === 1) {\n            this.selectAll();\n        }\n        if (this._isThirdLevelShift(this.browser, event)) {\n            return true;\n        }\n        if (result.cancel) {\n            this.cancel(event, true);\n        }\n        if (!result.key) {\n            return true;\n        }\n        this.emit('keydown', event);\n        this.emit('key', result.key, event);\n        this.showCursor();\n        this.handler(result.key);\n        return this.cancel(event, true);\n    };\n    Terminal.prototype._isThirdLevelShift = function (browser, ev) {\n        var thirdLevelKey = (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n            (browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\n        if (ev.type === 'keypress') {\n            return thirdLevelKey;\n        }\n        return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n    };\n    Terminal.prototype.setgLevel = function (g) {\n        this.glevel = g;\n        this.charset = this.charsets[g];\n    };\n    Terminal.prototype.setgCharset = function (g, charset) {\n        this.charsets[g] = charset;\n        if (this.glevel === g) {\n            this.charset = charset;\n        }\n    };\n    Terminal.prototype._keyUp = function (ev) {\n        this.updateCursorStyle(ev);\n    };\n    Terminal.prototype._keyPress = function (ev) {\n        var key;\n        if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n            return false;\n        }\n        this.cancel(ev);\n        if (ev.charCode) {\n            key = ev.charCode;\n        }\n        else if (ev.which === null || ev.which === undefined) {\n            key = ev.keyCode;\n        }\n        else if (ev.which !== 0 && ev.charCode !== 0) {\n            key = ev.which;\n        }\n        else {\n            return false;\n        }\n        if (!key || ((ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev))) {\n            return false;\n        }\n        key = String.fromCharCode(key);\n        this.emit('keypress', key, ev);\n        this.emit('key', key, ev);\n        this.showCursor();\n        this.handler(key);\n        return true;\n    };\n    Terminal.prototype.bell = function () {\n        var _this = this;\n        this.emit('bell');\n        if (this._soundBell()) {\n            this.soundManager.playBellSound();\n        }\n        if (this._visualBell()) {\n            this.element.classList.add('visual-bell-active');\n            clearTimeout(this._visualBellTimer);\n            this._visualBellTimer = window.setTimeout(function () {\n                _this.element.classList.remove('visual-bell-active');\n            }, 200);\n        }\n    };\n    Terminal.prototype.log = function (text, data) {\n        if (!this.options.debug)\n            return;\n        if (!this._context.console || !this._context.console.log)\n            return;\n        this._context.console.log(text, data);\n    };\n    Terminal.prototype.error = function (text, data) {\n        if (!this.options.debug)\n            return;\n        if (!this._context.console || !this._context.console.error)\n            return;\n        this._context.console.error(text, data);\n    };\n    Terminal.prototype.resize = function (x, y) {\n        if (isNaN(x) || isNaN(y)) {\n            return;\n        }\n        if (x === this.cols && y === this.rows) {\n            if (this.charMeasure && (!this.charMeasure.width || !this.charMeasure.height)) {\n                this.charMeasure.measure(this.options);\n            }\n            return;\n        }\n        if (x < 1)\n            x = 1;\n        if (y < 1)\n            y = 1;\n        this.buffers.resize(x, y);\n        this.cols = x;\n        this.rows = y;\n        this.buffers.setupTabStops(this.cols);\n        if (this.charMeasure) {\n            this.charMeasure.measure(this.options);\n        }\n        this.refresh(0, this.rows - 1);\n        this.emit('resize', { cols: x, rows: y });\n    };\n    Terminal.prototype.updateRange = function (y) {\n        if (y < this._refreshStart)\n            this._refreshStart = y;\n        if (y > this._refreshEnd)\n            this._refreshEnd = y;\n    };\n    Terminal.prototype.maxRange = function () {\n        this._refreshStart = 0;\n        this._refreshEnd = this.rows - 1;\n    };\n    Terminal.prototype.clear = function () {\n        if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n            return;\n        }\n        this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\n        this.buffer.lines.length = 1;\n        this.buffer.ydisp = 0;\n        this.buffer.ybase = 0;\n        this.buffer.y = 0;\n        for (var i = 1; i < this.rows; i++) {\n            this.buffer.lines.push(this.buffer.getBlankLine(Buffer_1.DEFAULT_ATTR));\n        }\n        this.refresh(0, this.rows - 1);\n        this.emit('scroll', this.buffer.ydisp);\n    };\n    Terminal.prototype.ch = function (cur) {\n        if (cur) {\n            return [this.eraseAttr(), Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE];\n        }\n        return [Buffer_1.DEFAULT_ATTR, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE];\n    };\n    Terminal.prototype.is = function (term) {\n        return (this.options.termName + '').indexOf(term) === 0;\n    };\n    Terminal.prototype.handler = function (data) {\n        if (this.options.disableStdin) {\n            return;\n        }\n        if (this.selectionManager && this.selectionManager.hasSelection) {\n            this.selectionManager.clearSelection();\n        }\n        if (this.buffer.ybase !== this.buffer.ydisp) {\n            this.scrollToBottom();\n        }\n        this.emit('data', data);\n    };\n    Terminal.prototype.handleTitle = function (title) {\n        this.emit('title', title);\n    };\n    Terminal.prototype.index = function () {\n        this.buffer.y++;\n        if (this.buffer.y > this.buffer.scrollBottom) {\n            this.buffer.y--;\n            this.scroll();\n        }\n        if (this.buffer.x >= this.cols) {\n            this.buffer.x--;\n        }\n    };\n    Terminal.prototype.reverseIndex = function () {\n        if (this.buffer.y === this.buffer.scrollTop) {\n            var scrollRegionHeight = this.buffer.scrollBottom - this.buffer.scrollTop;\n            this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, scrollRegionHeight, 1);\n            this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.buffer.getBlankLine(this.eraseAttr()));\n            this.updateRange(this.buffer.scrollTop);\n            this.updateRange(this.buffer.scrollBottom);\n        }\n        else {\n            this.buffer.y--;\n        }\n    };\n    Terminal.prototype.reset = function () {\n        this.options.rows = this.rows;\n        this.options.cols = this.cols;\n        var customKeyEventHandler = this._customKeyEventHandler;\n        var inputHandler = this._inputHandler;\n        var cursorState = this.cursorState;\n        this._setup();\n        this._customKeyEventHandler = customKeyEventHandler;\n        this._inputHandler = inputHandler;\n        this.cursorState = cursorState;\n        this.refresh(0, this.rows - 1);\n        if (this.viewport) {\n            this.viewport.syncScrollArea();\n        }\n    };\n    Terminal.prototype.tabSet = function () {\n        this.buffer.tabs[this.buffer.x] = true;\n    };\n    Terminal.prototype.cancel = function (ev, force) {\n        if (!this.options.cancelEvents && !force) {\n            return;\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n        return false;\n    };\n    Terminal.prototype.matchColor = function (r1, g1, b1) {\n        var hash = (r1 << 16) | (g1 << 8) | b1;\n        if (matchColorCache[hash] !== null && matchColorCache[hash] !== undefined) {\n            return matchColorCache[hash];\n        }\n        var ldiff = Infinity;\n        var li = -1;\n        var i = 0;\n        var c;\n        var r2;\n        var g2;\n        var b2;\n        var diff;\n        for (; i < ColorManager_1.DEFAULT_ANSI_COLORS.length; i++) {\n            c = ColorManager_1.DEFAULT_ANSI_COLORS[i].rgba;\n            r2 = c >>> 24;\n            g2 = c >>> 16 & 0xFF;\n            b2 = c >>> 8 & 0xFF;\n            diff = matchColorDistance(r1, g1, b1, r2, g2, b2);\n            if (diff === 0) {\n                li = i;\n                break;\n            }\n            if (diff < ldiff) {\n                ldiff = diff;\n                li = i;\n            }\n        }\n        return matchColorCache[hash] = li;\n    };\n    Terminal.prototype._visualBell = function () {\n        return false;\n    };\n    Terminal.prototype._soundBell = function () {\n        return this.options.bellStyle === 'sound';\n    };\n    return Terminal;\n}(EventEmitter_1.EventEmitter));\nexports.Terminal = Terminal;\nfunction wasModifierKeyOnlyEvent(ev) {\n    return ev.keyCode === 16 ||\n        ev.keyCode === 17 ||\n        ev.keyCode === 18;\n}\nvar matchColorCache = {};\nfunction matchColorDistance(r1, g1, b1, r2, g2, b2) {\n    return Math.pow(30 * (r1 - r2), 2)\n        + Math.pow(59 * (g1 - g2), 2)\n        + Math.pow(11 * (b1 - b2), 2);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar EventEmitter_1 = __webpack_require__(2);\nvar BufferSet = (function (_super) {\n    __extends(BufferSet, _super);\n    function BufferSet(_terminal) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._normal = new Buffer_1.Buffer(_this._terminal, true);\n        _this._normal.fillViewportRows();\n        _this._alt = new Buffer_1.Buffer(_this._terminal, false);\n        _this._activeBuffer = _this._normal;\n        _this.setupTabStops();\n        return _this;\n    }\n    Object.defineProperty(BufferSet.prototype, "alt", {\n        get: function () {\n            return this._alt;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferSet.prototype, "active", {\n        get: function () {\n            return this._activeBuffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BufferSet.prototype, "normal", {\n        get: function () {\n            return this._normal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BufferSet.prototype.activateNormalBuffer = function () {\n        if (this._activeBuffer === this._normal) {\n            return;\n        }\n        this._normal.x = this._alt.x;\n        this._normal.y = this._alt.y;\n        this._alt.clear();\n        this._activeBuffer = this._normal;\n        this.emit(\'activate\', {\n            activeBuffer: this._normal,\n            inactiveBuffer: this._alt\n        });\n    };\n    BufferSet.prototype.activateAltBuffer = function (fillAttr) {\n        if (this._activeBuffer === this._alt) {\n            return;\n        }\n        this._alt.fillViewportRows(fillAttr);\n        this._alt.x = this._normal.x;\n        this._alt.y = this._normal.y;\n        this._activeBuffer = this._alt;\n        this.emit(\'activate\', {\n            activeBuffer: this._alt,\n            inactiveBuffer: this._normal\n        });\n    };\n    BufferSet.prototype.resize = function (newCols, newRows) {\n        this._normal.resize(newCols, newRows);\n        this._alt.resize(newCols, newRows);\n    };\n    BufferSet.prototype.setupTabStops = function (i) {\n        this._normal.setupTabStops(i);\n        this._alt.setupTabStops(i);\n    };\n    return BufferSet;\n}(EventEmitter_1.EventEmitter));\nexports.BufferSet = BufferSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL0J1ZmZlclNldC50cz9lNmNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQU1BLHNDQUFrQztBQUNsQyw0Q0FBcUQ7QUFNckQ7SUFBK0IsNkJBQVk7SUFTekMsbUJBQW9CLFNBQW9CO1FBQXhDLFlBQ0UsaUJBQU8sU0FVUjtRQVhtQixlQUFTLEdBQVQsU0FBUyxDQUFXO1FBRXRDLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxlQUFNLENBQUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRCxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFJaEMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLGVBQU0sQ0FBQyxLQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLEtBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQztRQUVsQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7O0lBQ3ZCLENBQUM7SUFLRCxzQkFBVywwQkFBRzthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBS0Qsc0JBQVcsNkJBQU07YUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVyw2QkFBTTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDOzs7T0FBQTtJQUtNLHdDQUFvQixHQUEzQjtRQUNFLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3ZDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBSTdCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTztZQUMxQixjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDMUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUtNLHFDQUFpQixHQUF4QixVQUF5QixRQUFpQjtRQUN4QyxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUNwQyxPQUFPO1NBQ1I7UUFHRCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDdkIsY0FBYyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFPTSwwQkFBTSxHQUFiLFVBQWMsT0FBZSxFQUFFLE9BQWU7UUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBTU0saUNBQWEsR0FBcEIsVUFBcUIsQ0FBVTtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLENBcEc4QiwyQkFBWSxHQW9HMUM7QUFwR1ksOEJBQVMiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IElUZXJtaW5hbCwgSUJ1ZmZlclNldCB9IGZyb20gJy4vVHlwZXMnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnLi9CdWZmZXInO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9jb21tb24vRXZlbnRFbWl0dGVyJztcblxuLyoqXG4gKiBUaGUgQnVmZmVyU2V0IHJlcHJlc2VudHMgdGhlIHNldCBvZiB0d28gYnVmZmVycyB1c2VkIGJ5IHh0ZXJtIHRlcm1pbmFscyAobm9ybWFsIGFuZCBhbHQpIGFuZFxuICogcHJvdmlkZXMgYWxzbyB1dGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCB0aGVtLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyU2V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIGltcGxlbWVudHMgSUJ1ZmZlclNldCB7XG4gIHByaXZhdGUgX25vcm1hbDogQnVmZmVyO1xuICBwcml2YXRlIF9hbHQ6IEJ1ZmZlcjtcbiAgcHJpdmF0ZSBfYWN0aXZlQnVmZmVyOiBCdWZmZXI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBCdWZmZXJTZXQgZm9yIHRoZSBnaXZlbiB0ZXJtaW5hbC5cbiAgICogQHBhcmFtIF90ZXJtaW5hbCAtIFRoZSB0ZXJtaW5hbCB0aGUgQnVmZmVyU2V0IHdpbGwgYmVsb25nIHRvXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9ub3JtYWwgPSBuZXcgQnVmZmVyKHRoaXMuX3Rlcm1pbmFsLCB0cnVlKTtcbiAgICB0aGlzLl9ub3JtYWwuZmlsbFZpZXdwb3J0Um93cygpO1xuXG4gICAgLy8gVGhlIGFsdCBidWZmZXIgc2hvdWxkIG5ldmVyIGhhdmUgc2Nyb2xsYmFjay5cbiAgICAvLyBTZWUgaHR0cDovL2ludmlzaWJsZS1pc2xhbmQubmV0L3h0ZXJtL2N0bHNlcXMvY3Rsc2Vxcy5odG1sI2gyLVRoZS1BbHRlcm5hdGUtU2NyZWVuLUJ1ZmZlclxuICAgIHRoaXMuX2FsdCA9IG5ldyBCdWZmZXIodGhpcy5fdGVybWluYWwsIGZhbHNlKTtcbiAgICB0aGlzLl9hY3RpdmVCdWZmZXIgPSB0aGlzLl9ub3JtYWw7XG5cbiAgICB0aGlzLnNldHVwVGFiU3RvcHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhbHQgQnVmZmVyIG9mIHRoZSBCdWZmZXJTZXRcbiAgICovXG4gIHB1YmxpYyBnZXQgYWx0KCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBub3JtYWwgQnVmZmVyIG9mIHRoZSBCdWZmZXJTZXRcbiAgICovXG4gIHB1YmxpYyBnZXQgYWN0aXZlKCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgYWN0aXZlIEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0XG4gICAqL1xuICBwdWJsaWMgZ2V0IG5vcm1hbCgpOiBCdWZmZXIge1xuICAgIHJldHVybiB0aGlzLl9ub3JtYWw7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgbm9ybWFsIEJ1ZmZlciBvZiB0aGUgQnVmZmVyU2V0IGFzIGl0cyBjdXJyZW50bHkgYWN0aXZlIEJ1ZmZlclxuICAgKi9cbiAgcHVibGljIGFjdGl2YXRlTm9ybWFsQnVmZmVyKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIgPT09IHRoaXMuX25vcm1hbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9ub3JtYWwueCA9IHRoaXMuX2FsdC54O1xuICAgIHRoaXMuX25vcm1hbC55ID0gdGhpcy5fYWx0Lnk7XG4gICAgLy8gVGhlIGFsdCBidWZmZXIgc2hvdWxkIGFsd2F5cyBiZSBjbGVhcmVkIHdoZW4gd2Ugc3dpdGNoIHRvIHRoZSBub3JtYWxcbiAgICAvLyBidWZmZXIuIFRoaXMgZnJlZXMgdXAgbWVtb3J5IHNpbmNlIHRoZSBhbHQgYnVmZmVyIHNob3VsZCBhbHdheXMgYmUgbmV3XG4gICAgLy8gd2hlbiBhY3RpdmF0ZWQuXG4gICAgdGhpcy5fYWx0LmNsZWFyKCk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fbm9ybWFsO1xuICAgIHRoaXMuZW1pdCgnYWN0aXZhdGUnLCB7XG4gICAgICBhY3RpdmVCdWZmZXI6IHRoaXMuX25vcm1hbCxcbiAgICAgIGluYWN0aXZlQnVmZmVyOiB0aGlzLl9hbHRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhbHQgQnVmZmVyIG9mIHRoZSBCdWZmZXJTZXQgYXMgaXRzIGN1cnJlbnRseSBhY3RpdmUgQnVmZmVyXG4gICAqL1xuICBwdWJsaWMgYWN0aXZhdGVBbHRCdWZmZXIoZmlsbEF0dHI/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9hbHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2luY2UgdGhlIGFsdCBidWZmZXIgaXMgYWx3YXlzIGNsZWFyZWQgd2hlbiB0aGUgbm9ybWFsIGJ1ZmZlciBpc1xuICAgIC8vIGFjdGl2YXRlZCwgd2Ugd2FudCB0byBmaWxsIGl0IHdoZW4gc3dpdGNoaW5nIHRvIGl0LlxuICAgIHRoaXMuX2FsdC5maWxsVmlld3BvcnRSb3dzKGZpbGxBdHRyKTtcbiAgICB0aGlzLl9hbHQueCA9IHRoaXMuX25vcm1hbC54O1xuICAgIHRoaXMuX2FsdC55ID0gdGhpcy5fbm9ybWFsLnk7XG4gICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fYWx0O1xuICAgIHRoaXMuZW1pdCgnYWN0aXZhdGUnLCB7XG4gICAgICBhY3RpdmVCdWZmZXI6IHRoaXMuX2FsdCxcbiAgICAgIGluYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemVzIGJvdGggbm9ybWFsIGFuZCBhbHQgYnVmZmVycywgYWRqdXN0aW5nIHRoZWlyIGRhdGEgYWNjb3JkaW5nbHkuXG4gICAqIEBwYXJhbSBuZXdDb2xzIFRoZSBuZXcgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBwYXJhbSBuZXdSb3dzIFRoZSBuZXcgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld0NvbHM6IG51bWJlciwgbmV3Um93czogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbm9ybWFsLnJlc2l6ZShuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB0aGlzLl9hbHQucmVzaXplKG5ld0NvbHMsIG5ld1Jvd3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSB0YWIgc3RvcHMuXG4gICAqIEBwYXJhbSBpIFRoZSBpbmRleCB0byBzdGFydCBzZXR0aW5nIHVwIHRhYiBzdG9wcyBmcm9tLlxuICAgKi9cbiAgcHVibGljIHNldHVwVGFiU3RvcHMoaT86IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX25vcm1hbC5zZXR1cFRhYlN0b3BzKGkpO1xuICAgIHRoaXMuX2FsdC5zZXR1cFRhYlN0b3BzKGkpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL0J1ZmZlclNldC50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter_1 = __webpack_require__(2);\nvar CircularList = (function (_super) {\n    __extends(CircularList, _super);\n    function CircularList(_maxLength) {\n        var _this = _super.call(this) || this;\n        _this._maxLength = _maxLength;\n        _this._array = new Array(_this._maxLength);\n        _this._startIndex = 0;\n        _this._length = 0;\n        return _this;\n    }\n    Object.defineProperty(CircularList.prototype, \"maxLength\", {\n        get: function () {\n            return this._maxLength;\n        },\n        set: function (newMaxLength) {\n            if (this._maxLength === newMaxLength) {\n                return;\n            }\n            var newArray = new Array(newMaxLength);\n            for (var i = 0; i < Math.min(newMaxLength, this.length); i++) {\n                newArray[i] = this._array[this._getCyclicIndex(i)];\n            }\n            this._array = newArray;\n            this._maxLength = newMaxLength;\n            this._startIndex = 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CircularList.prototype, \"length\", {\n        get: function () {\n            return this._length;\n        },\n        set: function (newLength) {\n            if (newLength > this._length) {\n                for (var i = this._length; i < newLength; i++) {\n                    this._array[i] = undefined;\n                }\n            }\n            this._length = newLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CircularList.prototype.get = function (index) {\n        return this._array[this._getCyclicIndex(index)];\n    };\n    CircularList.prototype.set = function (index, value) {\n        this._array[this._getCyclicIndex(index)] = value;\n    };\n    CircularList.prototype.push = function (value) {\n        this._array[this._getCyclicIndex(this._length)] = value;\n        if (this._length === this._maxLength) {\n            this._startIndex = ++this._startIndex % this._maxLength;\n            this.emit('trim', 1);\n        }\n        else {\n            this._length++;\n        }\n    };\n    CircularList.prototype.recycle = function () {\n        if (this._length !== this._maxLength) {\n            throw new Error('Can only recycle when the buffer is full');\n        }\n        this._startIndex = ++this._startIndex % this._maxLength;\n        this.emit('trim', 1);\n        return this._array[this._getCyclicIndex(this._length - 1)];\n    };\n    Object.defineProperty(CircularList.prototype, \"isFull\", {\n        get: function () {\n            return this._length === this._maxLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CircularList.prototype.pop = function () {\n        return this._array[this._getCyclicIndex(this._length-- - 1)];\n    };\n    CircularList.prototype.splice = function (start, deleteCount) {\n        var items = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            items[_i - 2] = arguments[_i];\n        }\n        if (deleteCount) {\n            for (var i = start; i < this._length - deleteCount; i++) {\n                this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n            }\n            this._length -= deleteCount;\n        }\n        if (items && items.length) {\n            for (var i = this._length - 1; i >= start; i--) {\n                this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n            }\n            for (var i = 0; i < items.length; i++) {\n                this._array[this._getCyclicIndex(start + i)] = items[i];\n            }\n            if (this._length + items.length > this._maxLength) {\n                var countToTrim = (this._length + items.length) - this._maxLength;\n                this._startIndex += countToTrim;\n                this._length = this._maxLength;\n                this.emit('trim', countToTrim);\n            }\n            else {\n                this._length += items.length;\n            }\n        }\n    };\n    CircularList.prototype.trimStart = function (count) {\n        if (count > this._length) {\n            count = this._length;\n        }\n        this._startIndex += count;\n        this._length -= count;\n        this.emit('trim', count);\n    };\n    CircularList.prototype.shiftElements = function (start, count, offset) {\n        if (count <= 0) {\n            return;\n        }\n        if (start < 0 || start >= this._length) {\n            throw new Error('start argument out of range');\n        }\n        if (start + offset < 0) {\n            throw new Error('Cannot shift elements in list beyond index 0');\n        }\n        if (offset > 0) {\n            for (var i = count - 1; i >= 0; i--) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n            var expandListBy = (start + count + offset) - this._length;\n            if (expandListBy > 0) {\n                this._length += expandListBy;\n                while (this._length > this._maxLength) {\n                    this._length--;\n                    this._startIndex++;\n                    this.emit('trim', 1);\n                }\n            }\n        }\n        else {\n            for (var i = 0; i < count; i++) {\n                this.set(start + i + offset, this.get(start + i));\n            }\n        }\n    };\n    CircularList.prototype._getCyclicIndex = function (index) {\n        return (this._startIndex + index) % this._maxLength;\n    };\n    return CircularList;\n}(EventEmitter_1.EventEmitter));\nexports.CircularList = CircularList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar BufferLineJSArray = (function () {\n    function BufferLineJSArray(cols, fillCharData, isWrapped) {\n        this.isWrapped = false;\n        this._data = [];\n        if (!fillCharData) {\n            fillCharData = [0, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE];\n        }\n        for (var i = 0; i < cols; i++) {\n            this._push(fillCharData);\n        }\n        if (isWrapped) {\n            this.isWrapped = true;\n        }\n        this.length = this._data.length;\n    }\n    BufferLineJSArray.prototype._pop = function () {\n        var data = this._data.pop();\n        this.length = this._data.length;\n        return data;\n    };\n    BufferLineJSArray.prototype._push = function (data) {\n        this._data.push(data);\n        this.length = this._data.length;\n    };\n    BufferLineJSArray.prototype._splice = function (start, deleteCount) {\n        var items = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            items[_i - 2] = arguments[_i];\n        }\n        var _a;\n        var removed = (_a = this._data).splice.apply(_a, [start, deleteCount].concat(items));\n        this.length = this._data.length;\n        return removed;\n    };\n    BufferLineJSArray.prototype.get = function (index) {\n        return this._data[index];\n    };\n    BufferLineJSArray.prototype.set = function (index, data) {\n        this._data[index] = data;\n    };\n    BufferLineJSArray.prototype.insertCells = function (pos, n, ch) {\n        while (n--) {\n            this._splice(pos, 0, ch);\n            this._pop();\n        }\n    };\n    BufferLineJSArray.prototype.deleteCells = function (pos, n, fillCharData) {\n        while (n--) {\n            this._splice(pos, 1);\n            this._push(fillCharData);\n        }\n    };\n    BufferLineJSArray.prototype.replaceCells = function (start, end, fillCharData) {\n        while (start < end && start < this.length) {\n            this.set(start++, fillCharData);\n        }\n    };\n    BufferLineJSArray.prototype.resize = function (cols, fillCharData, shrink) {\n        if (shrink === void 0) { shrink = false; }\n        while (this._data.length < cols) {\n            this._data.push(fillCharData);\n        }\n        if (shrink) {\n            while (this._data.length > cols) {\n                this._data.pop();\n            }\n        }\n        this.length = this._data.length;\n    };\n    BufferLineJSArray.prototype.fill = function (fillCharData) {\n        for (var i = 0; i < this.length; ++i) {\n            this.set(i, fillCharData);\n        }\n    };\n    BufferLineJSArray.prototype.copyFrom = function (line) {\n        this._data = line._data.slice(0);\n        this.length = line.length;\n        this.isWrapped = line.isWrapped;\n    };\n    BufferLineJSArray.prototype.clone = function () {\n        var newLine = new BufferLineJSArray(0);\n        newLine.copyFrom(this);\n        return newLine;\n    };\n    return BufferLineJSArray;\n}());\nexports.BufferLineJSArray = BufferLineJSArray;\nvar CELL_SIZE = 3;\nvar BufferLine = (function () {\n    function BufferLine(cols, fillCharData, isWrapped) {\n        if (isWrapped === void 0) { isWrapped = false; }\n        this.isWrapped = isWrapped;\n        this._data = null;\n        this._combined = {};\n        if (!fillCharData) {\n            fillCharData = [0, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE];\n        }\n        if (cols) {\n            this._data = new Uint32Array(cols * CELL_SIZE);\n            for (var i = 0; i < cols; ++i) {\n                this.set(i, fillCharData);\n            }\n        }\n        this.length = cols;\n    }\n    BufferLine.prototype.get = function (index) {\n        var stringData = this._data[index * CELL_SIZE + 1];\n        return [\n            this._data[index * CELL_SIZE + 0],\n            (stringData & 0x80000000)\n                ? this._combined[index]\n                : (stringData) ? String.fromCharCode(stringData) : '',\n            this._data[index * CELL_SIZE + 2],\n            (stringData & 0x80000000)\n                ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n                : stringData\n        ];\n    };\n    BufferLine.prototype.set = function (index, value) {\n        this._data[index * CELL_SIZE + 0] = value[0];\n        if (value[1].length > 1) {\n            this._combined[index] = value[1];\n            this._data[index * CELL_SIZE + 1] = index | 0x80000000;\n        }\n        else {\n            this._data[index * CELL_SIZE + 1] = value[1].charCodeAt(0);\n        }\n        this._data[index * CELL_SIZE + 2] = value[2];\n    };\n    BufferLine.prototype.insertCells = function (pos, n, fillCharData) {\n        pos %= this.length;\n        if (n < this.length - pos) {\n            for (var i = this.length - pos - n - 1; i >= 0; --i) {\n                this.set(pos + n + i, this.get(pos + i));\n            }\n            for (var i = 0; i < n; ++i) {\n                this.set(pos + i, fillCharData);\n            }\n        }\n        else {\n            for (var i = pos; i < this.length; ++i) {\n                this.set(i, fillCharData);\n            }\n        }\n    };\n    BufferLine.prototype.deleteCells = function (pos, n, fillCharData) {\n        pos %= this.length;\n        if (n < this.length - pos) {\n            for (var i = 0; i < this.length - pos - n; ++i) {\n                this.set(pos + i, this.get(pos + n + i));\n            }\n            for (var i = this.length - n; i < this.length; ++i) {\n                this.set(i, fillCharData);\n            }\n        }\n        else {\n            for (var i = pos; i < this.length; ++i) {\n                this.set(i, fillCharData);\n            }\n        }\n    };\n    BufferLine.prototype.replaceCells = function (start, end, fillCharData) {\n        while (start < end && start < this.length) {\n            this.set(start++, fillCharData);\n        }\n    };\n    BufferLine.prototype.resize = function (cols, fillCharData, shrink) {\n        if (shrink === void 0) { shrink = false; }\n        if (cols === this.length || (!shrink && cols < this.length)) {\n            return;\n        }\n        if (cols > this.length) {\n            var data = new Uint32Array(cols * CELL_SIZE);\n            if (this.length) {\n                if (cols * CELL_SIZE < this._data.length) {\n                    data.set(this._data.subarray(0, cols * CELL_SIZE));\n                }\n                else {\n                    data.set(this._data);\n                }\n            }\n            this._data = data;\n            for (var i = this.length; i < cols; ++i) {\n                this.set(i, fillCharData);\n            }\n        }\n        else if (shrink) {\n            if (cols) {\n                var data = new Uint32Array(cols * CELL_SIZE);\n                data.set(this._data.subarray(0, cols * CELL_SIZE));\n                this._data = data;\n            }\n            else {\n                this._data = null;\n            }\n        }\n        this.length = cols;\n    };\n    BufferLine.prototype.fill = function (fillCharData) {\n        this._combined = {};\n        for (var i = 0; i < this.length; ++i) {\n            this.set(i, fillCharData);\n        }\n    };\n    BufferLine.prototype.copyFrom = function (line) {\n        if (this.length !== line.length) {\n            this._data = new Uint32Array(line._data);\n        }\n        else {\n            this._data.set(line._data);\n        }\n        this.length = line.length;\n        this._combined = {};\n        for (var el in line._combined) {\n            this._combined[el] = line._combined[el];\n        }\n        this.isWrapped = line.isWrapped;\n    };\n    BufferLine.prototype.clone = function () {\n        var newLine = new BufferLine(0);\n        newLine._data = new Uint32Array(this._data);\n        newLine.length = this.length;\n        for (var el in this._combined) {\n            newLine._combined[el] = this._combined[el];\n        }\n        newLine.isWrapped = this.isWrapped;\n        return newLine;\n    };\n    return BufferLine;\n}());\nexports.BufferLine = BufferLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL0J1ZmZlckxpbmUudHM/ZjE3YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHNDQUEyRTtBQU8zRTtJQUtFLDJCQUFZLElBQVksRUFBRSxZQUF1QixFQUFFLFNBQW1CO1FBSC9ELGNBQVMsR0FBRyxLQUFLLENBQUM7UUFJdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixZQUFZLEdBQUcsQ0FBQyxDQUFDLEVBQUUsdUJBQWMsRUFBRSx3QkFBZSxFQUFFLHVCQUFjLENBQUMsQ0FBQztTQUNyRTtRQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMxQjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ2xDLENBQUM7SUFFTyxnQ0FBSSxHQUFaO1FBQ0UsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLGlDQUFLLEdBQWIsVUFBYyxJQUFjO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVPLG1DQUFPLEdBQWYsVUFBZ0IsS0FBYSxFQUFFLFdBQW1CO1FBQUUsZUFBb0I7YUFBcEIsVUFBb0IsRUFBcEIscUJBQW9CLEVBQXBCLElBQW9CO1lBQXBCLDhCQUFvQjs7O1FBQ3RFLElBQU0sT0FBTyxHQUFHLFVBQUksQ0FBQyxLQUFLLEVBQUMsTUFBTSxZQUFDLEtBQUssRUFBRSxXQUFXLFNBQUssS0FBSyxFQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU0sK0JBQUcsR0FBVixVQUFXLEtBQWE7UUFDdEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSwrQkFBRyxHQUFWLFVBQVcsS0FBYSxFQUFFLElBQWM7UUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUdNLHVDQUFXLEdBQWxCLFVBQW1CLEdBQVcsRUFBRSxDQUFTLEVBQUUsRUFBWTtRQUNyRCxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUdNLHVDQUFXLEdBQWxCLFVBQW1CLEdBQVcsRUFBRSxDQUFTLEVBQUUsWUFBc0I7UUFDL0QsT0FBTyxDQUFDLEVBQUUsRUFBRTtZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBR00sd0NBQVksR0FBbkIsVUFBb0IsS0FBYSxFQUFFLEdBQVcsRUFBRSxZQUFzQjtRQUNwRSxPQUFPLEtBQUssR0FBRyxHQUFHLElBQUssS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFHTSxrQ0FBTSxHQUFiLFVBQWMsSUFBWSxFQUFFLFlBQXNCLEVBQUUsTUFBdUI7UUFBdkIsdUNBQXVCO1FBQ3pFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFO1lBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRTtnQkFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNsQjtTQUNGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxDQUFDO0lBRU0sZ0NBQUksR0FBWCxVQUFZLFlBQXNCO1FBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQUVNLG9DQUFRLEdBQWYsVUFBZ0IsSUFBdUI7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxpQ0FBSyxHQUFaO1FBQ0UsSUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUM7QUFqR1ksOENBQWlCO0FBb0c5QixJQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFZcEI7SUFLRSxvQkFBWSxJQUFZLEVBQUUsWUFBdUIsRUFBUyxTQUEwQjtRQUExQiw2Q0FBMEI7UUFBMUIsY0FBUyxHQUFULFNBQVMsQ0FBaUI7UUFKMUUsVUFBSyxHQUF1QixJQUFJLENBQUM7UUFDakMsY0FBUyxHQUE4QixFQUFFLENBQUM7UUFJbEQsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixZQUFZLEdBQUcsQ0FBQyxDQUFDLEVBQUUsdUJBQWMsRUFBRSx3QkFBZSxFQUFFLHVCQUFjLENBQUMsQ0FBQztTQUNyRTtRQUNELElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDL0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDM0I7U0FDRjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSx3QkFBRyxHQUFWLFVBQVcsS0FBYTtRQUN0QixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLElBQWMsQ0FBQyxDQUFDO1FBQy9ELE9BQU87WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLElBQWEsQ0FBQztZQUMxQyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsU0FBUyxJQUFhLENBQUM7WUFDMUMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO2dCQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNwRSxDQUFDLENBQUMsVUFBVTtTQUNmLENBQUM7SUFDSixDQUFDO0lBRU0sd0JBQUcsR0FBVixVQUFXLEtBQWEsRUFBRSxLQUFlO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVMsSUFBYSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsU0FBUyxJQUFjLENBQUMsR0FBRyxLQUFLLEdBQUcsVUFBVSxDQUFDO1NBQ2xFO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLElBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEU7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxTQUFTLElBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU0sZ0NBQVcsR0FBbEIsVUFBbUIsR0FBVyxFQUFFLENBQVMsRUFBRSxZQUFzQjtRQUMvRCxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ2pDO1NBQ0Y7YUFBTTtZQUNMLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUMzQjtTQUNGO0lBQ0gsQ0FBQztJQUVNLGdDQUFXLEdBQWxCLFVBQW1CLEdBQVcsRUFBRSxDQUFTLEVBQUUsWUFBc0I7UUFDL0QsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDM0I7U0FDRjthQUFNO1lBQ0wsS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQzNCO1NBQ0Y7SUFDSCxDQUFDO0lBRU0saUNBQVksR0FBbkIsVUFBb0IsS0FBYSxFQUFFLEdBQVcsRUFBRSxZQUFzQjtRQUNwRSxPQUFPLEtBQUssR0FBRyxHQUFHLElBQUssS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFTSwyQkFBTSxHQUFiLFVBQWMsSUFBWSxFQUFFLFlBQXNCLEVBQUUsTUFBdUI7UUFBdkIsdUNBQXVCO1FBQ3pFLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNELE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQy9DLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLElBQUksR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7b0JBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO2lCQUNwRDtxQkFBTTtvQkFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDdEI7YUFDRjtZQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUMzQjtTQUNGO2FBQU0sSUFBSSxNQUFNLEVBQUU7WUFDakIsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDbkI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDbkI7U0FDRjtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFHTSx5QkFBSSxHQUFYLFVBQVksWUFBc0I7UUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBR00sNkJBQVEsR0FBZixVQUFnQixJQUFnQjtRQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBRUwsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssSUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDbEMsQ0FBQztJQUdNLDBCQUFLLEdBQVo7UUFDRSxJQUFNLE9BQU8sR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdsQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDN0IsS0FBSyxJQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDO0FBbkpZLGdDQUFVIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgQ2hhckRhdGEsIElCdWZmZXJMaW5lIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgeyBOVUxMX0NFTExfQ09ERSwgTlVMTF9DRUxMX1dJRFRILCBOVUxMX0NFTExfQ0hBUiB9IGZyb20gJy4vQnVmZmVyJztcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSB0ZXJtaW5hbCBsaW5lLlxuICpcbiAqIEBkZXByZWNhdGVkIHRvIGJlIHJlbW92ZWQgd2l0aCBvbmUgb2YgdGhlIG5leHQgcmVsZWFzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlckxpbmVKU0FycmF5IGltcGxlbWVudHMgSUJ1ZmZlckxpbmUge1xuICBwcm90ZWN0ZWQgX2RhdGE6IENoYXJEYXRhW107XG4gIHB1YmxpYyBpc1dyYXBwZWQgPSBmYWxzZTtcbiAgcHVibGljIGxlbmd0aDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGNvbHM6IG51bWJlciwgZmlsbENoYXJEYXRhPzogQ2hhckRhdGEsIGlzV3JhcHBlZD86IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kYXRhID0gW107XG4gICAgaWYgKCFmaWxsQ2hhckRhdGEpIHtcbiAgICAgIGZpbGxDaGFyRGF0YSA9IFswLCBOVUxMX0NFTExfQ0hBUiwgTlVMTF9DRUxMX1dJRFRILCBOVUxMX0NFTExfQ09ERV07XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sczsgaSsrKSB7XG4gICAgICB0aGlzLl9wdXNoKGZpbGxDaGFyRGF0YSk7ICAvLyBOb3RlOiB0aGUgY3RvciBjaCBpcyBub3QgY2xvbmVkIChyZXNlbWJsZXMgb2xkIGJlaGF2aW9yKVxuICAgIH1cbiAgICBpZiAoaXNXcmFwcGVkKSB7XG4gICAgICB0aGlzLmlzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gIH1cblxuICBwcml2YXRlIF9wb3AoKTogQ2hhckRhdGEgfCB1bmRlZmluZWQgIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YS5wb3AoKTtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgcHJpdmF0ZSBfcHVzaChkYXRhOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2RhdGEucHVzaChkYXRhKTtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICB9XG5cbiAgcHJpdmF0ZSBfc3BsaWNlKHN0YXJ0OiBudW1iZXIsIGRlbGV0ZUNvdW50OiBudW1iZXIsIC4uLml0ZW1zOiBDaGFyRGF0YVtdKTogQ2hhckRhdGFbXSB7XG4gICAgY29uc3QgcmVtb3ZlZCA9IHRoaXMuX2RhdGEuc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgLi4uaXRlbXMpO1xuICAgIHRoaXMubGVuZ3RoID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gICAgcmV0dXJuIHJlbW92ZWQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBDaGFyRGF0YSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFbaW5kZXhdO1xuICB9XG5cbiAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCBkYXRhOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2RhdGFbaW5kZXhdID0gZGF0YTtcbiAgfVxuXG4gIC8qKiBpbnNlcnQgbiBjZWxscyBjaCBhdCBwb3MsIHJpZ2h0IGNlbGxzIGFyZSBsb3N0IChzdGFibGUgbGVuZ3RoKSAgKi9cbiAgcHVibGljIGluc2VydENlbGxzKHBvczogbnVtYmVyLCBuOiBudW1iZXIsIGNoOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHdoaWxlIChuLS0pIHtcbiAgICAgIHRoaXMuX3NwbGljZShwb3MsIDAsIGNoKTtcbiAgICAgIHRoaXMuX3BvcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBkZWxldGUgbiBjZWxscyBhdCBwb3MsIHJpZ2h0IHNpZGUgaXMgZmlsbGVkIHdpdGggZmlsbCAoc3RhYmxlIGxlbmd0aCkgKi9cbiAgcHVibGljIGRlbGV0ZUNlbGxzKHBvczogbnVtYmVyLCBuOiBudW1iZXIsIGZpbGxDaGFyRGF0YTogQ2hhckRhdGEpOiB2b2lkIHtcbiAgICB3aGlsZSAobi0tKSB7XG4gICAgICB0aGlzLl9zcGxpY2UocG9zLCAxKTtcbiAgICAgIHRoaXMuX3B1c2goZmlsbENoYXJEYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKiogcmVwbGFjZSBjZWxscyBmcm9tIHBvcyB0byBwb3MgKyBuIC0gMSB3aXRoIGZpbGwgKi9cbiAgcHVibGljIHJlcGxhY2VDZWxscyhzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgZmlsbENoYXJEYXRhOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHdoaWxlIChzdGFydCA8IGVuZCAgJiYgc3RhcnQgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXQoc3RhcnQrKywgZmlsbENoYXJEYXRhKTsgIC8vIE5vdGU6IGZpbGwgaXMgbm90IGNsb25lZCAocmVzZW1ibGVzIG9sZCBiZWhhdmlvcilcbiAgICB9XG4gIH1cblxuICAvKiogcmVzaXplIGxpbmUgdG8gY29scyBmaWxsaW5nIG5ldyBjZWxscyB3aXRoIGZpbGwgKi9cbiAgcHVibGljIHJlc2l6ZShjb2xzOiBudW1iZXIsIGZpbGxDaGFyRGF0YTogQ2hhckRhdGEsIHNocmluazogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgd2hpbGUgKHRoaXMuX2RhdGEubGVuZ3RoIDwgY29scykge1xuICAgICAgdGhpcy5fZGF0YS5wdXNoKGZpbGxDaGFyRGF0YSk7XG4gICAgfVxuICAgIGlmIChzaHJpbmspIHtcbiAgICAgIHdoaWxlICh0aGlzLl9kYXRhLmxlbmd0aCA+IGNvbHMpIHtcbiAgICAgICAgdGhpcy5fZGF0YS5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLl9kYXRhLmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBmaWxsKGZpbGxDaGFyRGF0YTogQ2hhckRhdGEpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNvcHlGcm9tKGxpbmU6IEJ1ZmZlckxpbmVKU0FycmF5KTogdm9pZCB7XG4gICAgdGhpcy5fZGF0YSA9IGxpbmUuX2RhdGEuc2xpY2UoMCk7XG4gICAgdGhpcy5sZW5ndGggPSBsaW5lLmxlbmd0aDtcbiAgICB0aGlzLmlzV3JhcHBlZCA9IGxpbmUuaXNXcmFwcGVkO1xuICB9XG5cbiAgcHVibGljIGNsb25lKCk6IElCdWZmZXJMaW5lIHtcbiAgICBjb25zdCBuZXdMaW5lID0gbmV3IEJ1ZmZlckxpbmVKU0FycmF5KDApO1xuICAgIG5ld0xpbmUuY29weUZyb20odGhpcyk7XG4gICAgcmV0dXJuIG5ld0xpbmU7XG4gIH1cbn1cblxuLyoqIHR5cGVkIGFycmF5IHNsb3RzIHRha2VuIGJ5IG9uZSBjZWxsICovXG5jb25zdCBDRUxMX1NJWkUgPSAzO1xuXG4vKiogY2VsbCBtZW1iZXIgaW5kaWNlcyAqL1xuY29uc3QgZW51bSBDZWxsIHtcbiAgRkxBR1MgPSAwLFxuICBTVFJJTkcgPSAxLFxuICBXSURUSCA9IDJcbn1cblxuLyoqXG4gKiBUeXBlZCBhcnJheSBiYXNlZCBidWZmZXJsaW5lIGltcGxlbWVudGF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyTGluZSBpbXBsZW1lbnRzIElCdWZmZXJMaW5lIHtcbiAgcHJvdGVjdGVkIF9kYXRhOiBVaW50MzJBcnJheSB8IG51bGwgPSBudWxsO1xuICBwcm90ZWN0ZWQgX2NvbWJpbmVkOiB7W2luZGV4OiBudW1iZXJdOiBzdHJpbmd9ID0ge307XG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihjb2xzOiBudW1iZXIsIGZpbGxDaGFyRGF0YT86IENoYXJEYXRhLCBwdWJsaWMgaXNXcmFwcGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBpZiAoIWZpbGxDaGFyRGF0YSkge1xuICAgICAgZmlsbENoYXJEYXRhID0gWzAsIE5VTExfQ0VMTF9DSEFSLCBOVUxMX0NFTExfV0lEVEgsIE5VTExfQ0VMTF9DT0RFXTtcbiAgICB9XG4gICAgaWYgKGNvbHMpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkoY29scyAqIENFTExfU0laRSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHM7ICsraSkge1xuICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IGNvbHM7XG4gIH1cblxuICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBDaGFyRGF0YSB7XG4gICAgY29uc3Qgc3RyaW5nRGF0YSA9IHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLlNUUklOR107XG4gICAgcmV0dXJuIFtcbiAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkZMQUdTXSxcbiAgICAgIChzdHJpbmdEYXRhICYgMHg4MDAwMDAwMClcbiAgICAgICAgPyB0aGlzLl9jb21iaW5lZFtpbmRleF1cbiAgICAgICAgOiAoc3RyaW5nRGF0YSkgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0cmluZ0RhdGEpIDogJycsXG4gICAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5XSURUSF0sXG4gICAgICAoc3RyaW5nRGF0YSAmIDB4ODAwMDAwMDApXG4gICAgICAgID8gdGhpcy5fY29tYmluZWRbaW5kZXhdLmNoYXJDb2RlQXQodGhpcy5fY29tYmluZWRbaW5kZXhdLmxlbmd0aCAtIDEpXG4gICAgICAgIDogc3RyaW5nRGF0YVxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLkZMQUdTXSA9IHZhbHVlWzBdO1xuICAgIGlmICh2YWx1ZVsxXS5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLl9jb21iaW5lZFtpbmRleF0gPSB2YWx1ZVsxXTtcbiAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLlNUUklOR10gPSBpbmRleCB8IDB4ODAwMDAwMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyBDZWxsLlNUUklOR10gPSB2YWx1ZVsxXS5jaGFyQ29kZUF0KDApO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgQ2VsbC5XSURUSF0gPSB2YWx1ZVsyXTtcbiAgfVxuXG4gIHB1YmxpYyBpbnNlcnRDZWxscyhwb3M6IG51bWJlciwgbjogbnVtYmVyLCBmaWxsQ2hhckRhdGE6IENoYXJEYXRhKTogdm9pZCB7XG4gICAgcG9zICU9IHRoaXMubGVuZ3RoO1xuICAgIGlmIChuIDwgdGhpcy5sZW5ndGggLSBwb3MpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLmxlbmd0aCAtIHBvcyAtIG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB0aGlzLnNldChwb3MgKyBuICsgaSwgdGhpcy5nZXQocG9zICsgaSkpO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdGhpcy5zZXQocG9zICsgaSwgZmlsbENoYXJEYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgZmlsbENoYXJEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlQ2VsbHMocG9zOiBudW1iZXIsIG46IG51bWJlciwgZmlsbENoYXJEYXRhOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHBvcyAlPSB0aGlzLmxlbmd0aDtcbiAgICBpZiAobiA8IHRoaXMubGVuZ3RoIC0gcG9zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoIC0gcG9zIC0gbjsgKytpKSB7XG4gICAgICAgIHRoaXMuc2V0KHBvcyArIGksIHRoaXMuZ2V0KHBvcyArIG4gKyBpKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5sZW5ndGggLSBuOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXBsYWNlQ2VsbHMoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIGZpbGxDaGFyRGF0YTogQ2hhckRhdGEpOiB2b2lkIHtcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQgICYmIHN0YXJ0IDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2V0KHN0YXJ0KyssIGZpbGxDaGFyRGF0YSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc2l6ZShjb2xzOiBudW1iZXIsIGZpbGxDaGFyRGF0YTogQ2hhckRhdGEsIHNocmluazogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgaWYgKGNvbHMgPT09IHRoaXMubGVuZ3RoIHx8ICghc2hyaW5rICYmIGNvbHMgPCB0aGlzLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbHMgPiB0aGlzLmxlbmd0aCkge1xuICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCkge1xuICAgICAgICBpZiAoY29scyAqIENFTExfU0laRSA8IHRoaXMuX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgZGF0YS5zZXQodGhpcy5fZGF0YS5zdWJhcnJheSgwLCBjb2xzICogQ0VMTF9TSVpFKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YS5zZXQodGhpcy5fZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoOyBpIDwgY29sczsgKytpKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaHJpbmspIHtcbiAgICAgIGlmIChjb2xzKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDMyQXJyYXkoY29scyAqIENFTExfU0laRSk7XG4gICAgICAgIGRhdGEuc2V0KHRoaXMuX2RhdGEuc3ViYXJyYXkoMCwgY29scyAqIENFTExfU0laRSkpO1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IGNvbHM7XG4gIH1cblxuICAvKiogZmlsbCBhIGxpbmUgd2l0aCBmaWxsQ2hhckRhdGEgKi9cbiAgcHVibGljIGZpbGwoZmlsbENoYXJEYXRhOiBDaGFyRGF0YSk6IHZvaWQge1xuICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBhbHRlciB0byBhIGZ1bGwgY29weSBvZiBsaW5lICAqL1xuICBwdWJsaWMgY29weUZyb20obGluZTogQnVmZmVyTGluZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gbGluZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkobGluZS5fZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBoaWdoIHNwZWVkIGNvcHkgaWYgbGVuZ3RocyBhcmUgZXF1YWxcbiAgICAgIHRoaXMuX2RhdGEuc2V0KGxpbmUuX2RhdGEpO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgZm9yIChjb25zdCBlbCBpbiBsaW5lLl9jb21iaW5lZCkge1xuICAgICAgdGhpcy5fY29tYmluZWRbZWxdID0gbGluZS5fY29tYmluZWRbZWxdO1xuICAgIH1cbiAgICB0aGlzLmlzV3JhcHBlZCA9IGxpbmUuaXNXcmFwcGVkO1xuICB9XG5cbiAgLyoqIGNyZWF0ZSBhIG5ldyBjbG9uZSAqL1xuICBwdWJsaWMgY2xvbmUoKTogSUJ1ZmZlckxpbmUge1xuICAgIGNvbnN0IG5ld0xpbmUgPSBuZXcgQnVmZmVyTGluZSgwKTtcbiAgICAvLyBjcmVhdGlvbiBvZiBuZXcgdHlwZWQgYXJyYXkgZnJvbSBhbm90aGVyIGlzIGFjdHVhbGx5IHByZXR0eSBzbG93IDooXG4gICAgLy8gc3RpbGwgZmFzdGVyIHRoYW4gY29weWluZyB2YWx1ZXMgb25lIGJ5IG9uZVxuICAgIG5ld0xpbmUuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkodGhpcy5fZGF0YSk7XG4gICAgbmV3TGluZS5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBmb3IgKGNvbnN0IGVsIGluIHRoaXMuX2NvbWJpbmVkKSB7XG4gICAgICBuZXdMaW5lLl9jb21iaW5lZFtlbF0gPSB0aGlzLl9jb21iaW5lZFtlbF07XG4gICAgfVxuICAgIG5ld0xpbmUuaXNXcmFwcGVkID0gdGhpcy5pc1dyYXBwZWQ7XG4gICAgcmV0dXJuIG5ld0xpbmU7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvQnVmZmVyTGluZS50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositionHelper = (function () {\n    function CompositionHelper(_textarea, _compositionView, _terminal) {\n        this._textarea = _textarea;\n        this._compositionView = _compositionView;\n        this._terminal = _terminal;\n        this._isComposing = false;\n        this._isSendingComposition = false;\n        this._compositionPosition = { start: null, end: null };\n    }\n    CompositionHelper.prototype.compositionstart = function () {\n        this._isComposing = true;\n        this._compositionPosition.start = this._textarea.value.length;\n        this._compositionView.textContent = '';\n        this._compositionView.classList.add('active');\n    };\n    CompositionHelper.prototype.compositionupdate = function (ev) {\n        var _this = this;\n        this._compositionView.textContent = ev.data;\n        this.updateCompositionElements();\n        setTimeout(function () {\n            _this._compositionPosition.end = _this._textarea.value.length;\n        }, 0);\n    };\n    CompositionHelper.prototype.compositionend = function () {\n        this._finalizeComposition(true);\n    };\n    CompositionHelper.prototype.keydown = function (ev) {\n        if (this._isComposing || this._isSendingComposition) {\n            if (ev.keyCode === 229) {\n                return false;\n            }\n            else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n                return false;\n            }\n            this._finalizeComposition(false);\n        }\n        if (ev.keyCode === 229) {\n            this._handleAnyTextareaChanges();\n            return false;\n        }\n        return true;\n    };\n    CompositionHelper.prototype._finalizeComposition = function (waitForPropogation) {\n        var _this = this;\n        this._compositionView.classList.remove('active');\n        this._isComposing = false;\n        this._clearTextareaPosition();\n        if (!waitForPropogation) {\n            this._isSendingComposition = false;\n            var input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n            this._terminal.handler(input);\n        }\n        else {\n            var currentCompositionPosition_1 = {\n                start: this._compositionPosition.start,\n                end: this._compositionPosition.end\n            };\n            this._isSendingComposition = true;\n            setTimeout(function () {\n                if (_this._isSendingComposition) {\n                    _this._isSendingComposition = false;\n                    var input = void 0;\n                    if (_this._isComposing) {\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\n                    }\n                    else {\n                        input = _this._textarea.value.substring(currentCompositionPosition_1.start);\n                    }\n                    _this._terminal.handler(input);\n                }\n            }, 0);\n        }\n    };\n    CompositionHelper.prototype._handleAnyTextareaChanges = function () {\n        var _this = this;\n        var oldValue = this._textarea.value;\n        setTimeout(function () {\n            if (!_this._isComposing) {\n                var newValue = _this._textarea.value;\n                var diff = newValue.replace(oldValue, '');\n                if (diff.length > 0) {\n                    _this._terminal.handler(diff);\n                }\n            }\n        }, 0);\n    };\n    CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\n        var _this = this;\n        if (!this._isComposing) {\n            return;\n        }\n        if (this._terminal.buffer.isCursorInViewport) {\n            var cellHeight = Math.ceil(this._terminal.charMeasure.height * this._terminal.options.lineHeight);\n            var cursorTop = this._terminal.buffer.y * cellHeight;\n            var cursorLeft = this._terminal.buffer.x * this._terminal.charMeasure.width;\n            this._compositionView.style.left = cursorLeft + 'px';\n            this._compositionView.style.top = cursorTop + 'px';\n            this._compositionView.style.height = cellHeight + 'px';\n            this._compositionView.style.lineHeight = cellHeight + 'px';\n            var compositionViewBounds = this._compositionView.getBoundingClientRect();\n            this._textarea.style.left = cursorLeft + 'px';\n            this._textarea.style.top = cursorTop + 'px';\n            this._textarea.style.width = compositionViewBounds.width + 'px';\n            this._textarea.style.height = compositionViewBounds.height + 'px';\n            this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n        }\n        if (!dontRecurse) {\n            setTimeout(function () { return _this.updateCompositionElements(true); }, 0);\n        }\n    };\n    CompositionHelper.prototype._clearTextareaPosition = function () {\n        this._textarea.style.left = '';\n        this._textarea.style.top = '';\n    };\n    return CompositionHelper;\n}());\nexports.CompositionHelper = CompositionHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(3);\nvar Lifecycle_2 = __webpack_require__(6);\nvar FALLBACK_SCROLL_BAR_WIDTH = 15;\nvar Viewport = (function (_super) {\n    __extends(Viewport, _super);\n    function Viewport(_terminal, _viewportElement, _scrollArea, _charMeasure) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._viewportElement = _viewportElement;\n        _this._scrollArea = _scrollArea;\n        _this._charMeasure = _charMeasure;\n        _this.scrollBarWidth = 0;\n        _this._currentRowHeight = 0;\n        _this._lastRecordedBufferLength = 0;\n        _this._lastRecordedViewportHeight = 0;\n        _this._lastRecordedBufferHeight = 0;\n        _this._lastScrollTop = 0;\n        _this._wheelPartialScroll = 0;\n        _this._refreshAnimationFrame = null;\n        _this._ignoreNextScrollEvent = false;\n        _this.scrollBarWidth = (_this._viewportElement.offsetWidth - _this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n        _this.register(Lifecycle_2.addDisposableDomListener(_this._viewportElement, 'scroll', _this._onScroll.bind(_this)));\n        setTimeout(function () { return _this.syncScrollArea(); }, 0);\n        return _this;\n    }\n    Viewport.prototype.onThemeChanged = function (colors) {\n        this._viewportElement.style.backgroundColor = colors.background.css;\n    };\n    Viewport.prototype._refresh = function () {\n        var _this = this;\n        if (this._refreshAnimationFrame === null) {\n            this._refreshAnimationFrame = requestAnimationFrame(function () { return _this._innerRefresh(); });\n        }\n    };\n    Viewport.prototype._innerRefresh = function () {\n        if (this._charMeasure.height > 0) {\n            this._currentRowHeight = this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\n            this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n            var newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._terminal.renderer.dimensions.canvasHeight);\n            if (this._lastRecordedBufferHeight !== newBufferHeight) {\n                this._lastRecordedBufferHeight = newBufferHeight;\n                this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n            }\n        }\n        var scrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\n        if (this._viewportElement.scrollTop !== scrollTop) {\n            this._ignoreNextScrollEvent = true;\n            this._viewportElement.scrollTop = scrollTop;\n        }\n        this._refreshAnimationFrame = null;\n    };\n    Viewport.prototype.syncScrollArea = function () {\n        if (this._lastRecordedBufferLength !== this._terminal.buffer.lines.length) {\n            this._lastRecordedBufferLength = this._terminal.buffer.lines.length;\n            this._refresh();\n            return;\n        }\n        if (this._lastRecordedViewportHeight !== this._terminal.renderer.dimensions.canvasHeight) {\n            this._refresh();\n            return;\n        }\n        var newScrollTop = this._terminal.buffer.ydisp * this._currentRowHeight;\n        if (this._lastScrollTop !== newScrollTop) {\n            this._refresh();\n            return;\n        }\n        if (this._lastScrollTop !== this._viewportElement.scrollTop) {\n            this._refresh();\n            return;\n        }\n        if (this._terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this._currentRowHeight) {\n            this._refresh();\n            return;\n        }\n    };\n    Viewport.prototype._onScroll = function (ev) {\n        this._lastScrollTop = this._viewportElement.scrollTop;\n        if (!this._viewportElement.offsetParent) {\n            return;\n        }\n        if (this._ignoreNextScrollEvent) {\n            this._ignoreNextScrollEvent = false;\n            return;\n        }\n        var newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n        var diff = newRow - this._terminal.buffer.ydisp;\n        this._terminal.scrollLines(diff, true);\n    };\n    Viewport.prototype.onWheel = function (ev) {\n        var amount = this._getPixelsScrolled(ev);\n        if (amount === 0) {\n            return;\n        }\n        this._viewportElement.scrollTop += amount;\n        ev.preventDefault();\n    };\n    Viewport.prototype._getPixelsScrolled = function (ev) {\n        if (ev.deltaY === 0) {\n            return 0;\n        }\n        var amount = ev.deltaY;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n            amount *= this._currentRowHeight;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            amount *= this._currentRowHeight * this._terminal.rows;\n        }\n        return amount;\n    };\n    Viewport.prototype.getLinesScrolled = function (ev) {\n        if (ev.deltaY === 0) {\n            return 0;\n        }\n        var amount = ev.deltaY;\n        if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n            amount /= this._currentRowHeight + 0.0;\n            this._wheelPartialScroll += amount;\n            amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n            this._wheelPartialScroll %= 1;\n        }\n        else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n            amount *= this._terminal.rows;\n        }\n        return amount;\n    };\n    Viewport.prototype.onTouchStart = function (ev) {\n        this._lastTouchY = ev.touches[0].pageY;\n    };\n    Viewport.prototype.onTouchMove = function (ev) {\n        var deltaY = this._lastTouchY - ev.touches[0].pageY;\n        this._lastTouchY = ev.touches[0].pageY;\n        if (deltaY === 0) {\n            return;\n        }\n        this._viewportElement.scrollTop += deltaY;\n        ev.preventDefault();\n    };\n    return Viewport;\n}(Lifecycle_1.Disposable));\nexports.Viewport = Viewport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction prepareTextForTerminal(text) {\n    return text.replace(/\\r?\\n/g, '\\r');\n}\nexports.prepareTextForTerminal = prepareTextForTerminal;\nfunction bracketTextForPaste(text, bracketedPasteMode) {\n    if (bracketedPasteMode) {\n        return '\\x1b[200~' + text + '\\x1b[201~';\n    }\n    return text;\n}\nexports.bracketTextForPaste = bracketTextForPaste;\nfunction copyHandler(ev, term, selectionManager) {\n    if (term.browser.isMSIE) {\n        window.clipboardData.setData('Text', selectionManager.selectionText);\n    }\n    else {\n        ev.clipboardData.setData('text/plain', selectionManager.selectionText);\n    }\n    ev.preventDefault();\n}\nexports.copyHandler = copyHandler;\nfunction pasteHandler(ev, term) {\n    ev.stopPropagation();\n    var text;\n    var dispatchPaste = function (text) {\n        text = prepareTextForTerminal(text);\n        text = bracketTextForPaste(text, term.bracketedPasteMode);\n        term.handler(text);\n        term.textarea.value = '';\n        term.emit('paste', text);\n        term.cancel(ev);\n    };\n    if (term.browser.isMSIE) {\n        if (window.clipboardData) {\n            text = window.clipboardData.getData('Text');\n            dispatchPaste(text);\n        }\n    }\n    else {\n        if (ev.clipboardData) {\n            text = ev.clipboardData.getData('text/plain');\n            dispatchPaste(text);\n        }\n    }\n}\nexports.pasteHandler = pasteHandler;\nfunction moveTextAreaUnderMouseCursor(ev, textarea) {\n    textarea.style.position = 'fixed';\n    textarea.style.width = '20px';\n    textarea.style.height = '20px';\n    textarea.style.left = (ev.clientX - 10) + 'px';\n    textarea.style.top = (ev.clientY - 10) + 'px';\n    textarea.style.zIndex = '1000';\n    textarea.focus();\n    setTimeout(function () {\n        textarea.style.position = null;\n        textarea.style.width = null;\n        textarea.style.height = null;\n        textarea.style.left = null;\n        textarea.style.top = null;\n        textarea.style.zIndex = null;\n    }, 200);\n}\nexports.moveTextAreaUnderMouseCursor = moveTextAreaUnderMouseCursor;\nfunction rightClickHandler(ev, textarea, selectionManager, shouldSelectWord) {\n    moveTextAreaUnderMouseCursor(ev, textarea);\n    if (shouldSelectWord && !selectionManager.isClickInSelection(ev)) {\n        selectionManager.selectWordAtCursor(ev);\n    }\n    textarea.value = selectionManager.selectionText;\n    textarea.select();\n}\nexports.rightClickHandler = rightClickHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = __webpack_require__(7);\nvar Charsets_1 = __webpack_require__(34);\nvar Buffer_1 = __webpack_require__(0);\nvar CharWidth_1 = __webpack_require__(13);\nvar EscapeSequenceParser_1 = __webpack_require__(36);\nvar Lifecycle_1 = __webpack_require__(3);\nvar GLEVEL = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\nvar RequestTerminfo = (function () {\n    function RequestTerminfo(_terminal) {\n        this._terminal = _terminal;\n    }\n    RequestTerminfo.prototype.hook = function (collect, params, flag) {\n        this._data = '';\n    };\n    RequestTerminfo.prototype.put = function (data, start, end) {\n        this._data += data.substring(start, end);\n    };\n    RequestTerminfo.prototype.unhook = function () {\n        this._terminal.handler(EscapeSequences_1.C0.ESC + \"P0+r\" + this._data + EscapeSequences_1.C0.ESC + \"\\\\\");\n    };\n    return RequestTerminfo;\n}());\nvar DECRQSS = (function () {\n    function DECRQSS(_terminal) {\n        this._terminal = _terminal;\n    }\n    DECRQSS.prototype.hook = function (collect, params, flag) {\n        this._data = '';\n    };\n    DECRQSS.prototype.put = function (data, start, end) {\n        this._data += data.substring(start, end);\n    };\n    DECRQSS.prototype.unhook = function () {\n        switch (this._data) {\n            case '\"q':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r0\\\"q\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case '\"p':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r61\\\"p\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case 'r':\n                var pt = '' + (this._terminal.buffer.scrollTop + 1) +\n                    ';' + (this._terminal.buffer.scrollBottom + 1) + 'r';\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r\" + pt + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case 'm':\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r0m\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            case ' q':\n                var STYLES = { 'block': 2, 'underline': 4, 'bar': 6 };\n                var style = STYLES[this._terminal.getOption('cursorStyle')];\n                style -= this._terminal.getOption('cursorBlink');\n                return this._terminal.handler(EscapeSequences_1.C0.ESC + \"P1$r\" + style + \" q\" + EscapeSequences_1.C0.ESC + \"\\\\\");\n            default:\n                this._terminal.error('Unknown DCS $q %s', this._data);\n                this._terminal.handler(EscapeSequences_1.C0.ESC + \"P0$r\" + this._data + EscapeSequences_1.C0.ESC + \"\\\\\");\n        }\n    };\n    return DECRQSS;\n}());\nvar InputHandler = (function (_super) {\n    __extends(InputHandler, _super);\n    function InputHandler(_terminal, _parser) {\n        if (_parser === void 0) { _parser = new EscapeSequenceParser_1.EscapeSequenceParser(); }\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._parser = _parser;\n        _this.register(_this._parser);\n        _this._surrogateFirst = '';\n        _this._parser.setCsiHandlerFallback(function (collect, params, flag) {\n            _this._terminal.error('Unknown CSI code: ', { collect: collect, params: params, flag: String.fromCharCode(flag) });\n        });\n        _this._parser.setEscHandlerFallback(function (collect, flag) {\n            _this._terminal.error('Unknown ESC code: ', { collect: collect, flag: String.fromCharCode(flag) });\n        });\n        _this._parser.setExecuteHandlerFallback(function (code) {\n            _this._terminal.error('Unknown EXECUTE code: ', { code: code });\n        });\n        _this._parser.setOscHandlerFallback(function (identifier, data) {\n            _this._terminal.error('Unknown OSC code: ', { identifier: identifier, data: data });\n        });\n        _this._parser.setPrintHandler(function (data, start, end) { return _this.print(data, start, end); });\n        _this._parser.setCsiHandler('@', function (params, collect) { return _this.insertChars(params); });\n        _this._parser.setCsiHandler('A', function (params, collect) { return _this.cursorUp(params); });\n        _this._parser.setCsiHandler('B', function (params, collect) { return _this.cursorDown(params); });\n        _this._parser.setCsiHandler('C', function (params, collect) { return _this.cursorForward(params); });\n        _this._parser.setCsiHandler('D', function (params, collect) { return _this.cursorBackward(params); });\n        _this._parser.setCsiHandler('E', function (params, collect) { return _this.cursorNextLine(params); });\n        _this._parser.setCsiHandler('F', function (params, collect) { return _this.cursorPrecedingLine(params); });\n        _this._parser.setCsiHandler('G', function (params, collect) { return _this.cursorCharAbsolute(params); });\n        _this._parser.setCsiHandler('H', function (params, collect) { return _this.cursorPosition(params); });\n        _this._parser.setCsiHandler('I', function (params, collect) { return _this.cursorForwardTab(params); });\n        _this._parser.setCsiHandler('J', function (params, collect) { return _this.eraseInDisplay(params); });\n        _this._parser.setCsiHandler('K', function (params, collect) { return _this.eraseInLine(params); });\n        _this._parser.setCsiHandler('L', function (params, collect) { return _this.insertLines(params); });\n        _this._parser.setCsiHandler('M', function (params, collect) { return _this.deleteLines(params); });\n        _this._parser.setCsiHandler('P', function (params, collect) { return _this.deleteChars(params); });\n        _this._parser.setCsiHandler('S', function (params, collect) { return _this.scrollUp(params); });\n        _this._parser.setCsiHandler('T', function (params, collect) { return _this.scrollDown(params, collect); });\n        _this._parser.setCsiHandler('X', function (params, collect) { return _this.eraseChars(params); });\n        _this._parser.setCsiHandler('Z', function (params, collect) { return _this.cursorBackwardTab(params); });\n        _this._parser.setCsiHandler('`', function (params, collect) { return _this.charPosAbsolute(params); });\n        _this._parser.setCsiHandler('a', function (params, collect) { return _this.hPositionRelative(params); });\n        _this._parser.setCsiHandler('b', function (params, collect) { return _this.repeatPrecedingCharacter(params); });\n        _this._parser.setCsiHandler('c', function (params, collect) { return _this.sendDeviceAttributes(params, collect); });\n        _this._parser.setCsiHandler('d', function (params, collect) { return _this.linePosAbsolute(params); });\n        _this._parser.setCsiHandler('e', function (params, collect) { return _this.vPositionRelative(params); });\n        _this._parser.setCsiHandler('f', function (params, collect) { return _this.hVPosition(params); });\n        _this._parser.setCsiHandler('g', function (params, collect) { return _this.tabClear(params); });\n        _this._parser.setCsiHandler('h', function (params, collect) { return _this.setMode(params, collect); });\n        _this._parser.setCsiHandler('l', function (params, collect) { return _this.resetMode(params, collect); });\n        _this._parser.setCsiHandler('m', function (params, collect) { return _this.charAttributes(params); });\n        _this._parser.setCsiHandler('n', function (params, collect) { return _this.deviceStatus(params, collect); });\n        _this._parser.setCsiHandler('p', function (params, collect) { return _this.softReset(params, collect); });\n        _this._parser.setCsiHandler('q', function (params, collect) { return _this.setCursorStyle(params, collect); });\n        _this._parser.setCsiHandler('r', function (params, collect) { return _this.setScrollRegion(params, collect); });\n        _this._parser.setCsiHandler('s', function (params, collect) { return _this.saveCursor(params); });\n        _this._parser.setCsiHandler('u', function (params, collect) { return _this.restoreCursor(params); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.BEL, function () { return _this.bell(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.LF, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.VT, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.FF, function () { return _this.lineFeed(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.CR, function () { return _this.carriageReturn(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.BS, function () { return _this.backspace(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.HT, function () { return _this.tab(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.SO, function () { return _this.shiftOut(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C0.SI, function () { return _this.shiftIn(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.IND, function () { return _this.index(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.NEL, function () { return _this.nextLine(); });\n        _this._parser.setExecuteHandler(EscapeSequences_1.C1.HTS, function () { return _this.tabSet(); });\n        _this._parser.setOscHandler(0, function (data) { return _this.setTitle(data); });\n        _this._parser.setOscHandler(2, function (data) { return _this.setTitle(data); });\n        _this._parser.setEscHandler('7', function () { return _this.saveCursor([]); });\n        _this._parser.setEscHandler('8', function () { return _this.restoreCursor([]); });\n        _this._parser.setEscHandler('D', function () { return _this.index(); });\n        _this._parser.setEscHandler('E', function () { return _this.nextLine(); });\n        _this._parser.setEscHandler('H', function () { return _this.tabSet(); });\n        _this._parser.setEscHandler('M', function () { return _this.reverseIndex(); });\n        _this._parser.setEscHandler('=', function () { return _this.keypadApplicationMode(); });\n        _this._parser.setEscHandler('>', function () { return _this.keypadNumericMode(); });\n        _this._parser.setEscHandler('c', function () { return _this.reset(); });\n        _this._parser.setEscHandler('n', function () { return _this.setgLevel(2); });\n        _this._parser.setEscHandler('o', function () { return _this.setgLevel(3); });\n        _this._parser.setEscHandler('|', function () { return _this.setgLevel(3); });\n        _this._parser.setEscHandler('}', function () { return _this.setgLevel(2); });\n        _this._parser.setEscHandler('~', function () { return _this.setgLevel(1); });\n        _this._parser.setEscHandler('%@', function () { return _this.selectDefaultCharset(); });\n        _this._parser.setEscHandler('%G', function () { return _this.selectDefaultCharset(); });\n        var _loop_1 = function (flag) {\n            this_1._parser.setEscHandler('(' + flag, function () { return _this.selectCharset('(' + flag); });\n            this_1._parser.setEscHandler(')' + flag, function () { return _this.selectCharset(')' + flag); });\n            this_1._parser.setEscHandler('*' + flag, function () { return _this.selectCharset('*' + flag); });\n            this_1._parser.setEscHandler('+' + flag, function () { return _this.selectCharset('+' + flag); });\n            this_1._parser.setEscHandler('-' + flag, function () { return _this.selectCharset('-' + flag); });\n            this_1._parser.setEscHandler('.' + flag, function () { return _this.selectCharset('.' + flag); });\n            this_1._parser.setEscHandler('/' + flag, function () { return _this.selectCharset('/' + flag); });\n        };\n        var this_1 = this;\n        for (var flag in Charsets_1.CHARSETS) {\n            _loop_1(flag);\n        }\n        _this._parser.setErrorHandler(function (state) {\n            _this._terminal.error('Parsing error: ', state);\n            return state;\n        });\n        _this._parser.setDcsHandler('$q', new DECRQSS(_this._terminal));\n        _this._parser.setDcsHandler('+q', new RequestTerminfo(_this._terminal));\n        return _this;\n    }\n    InputHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._terminal = null;\n    };\n    InputHandler.prototype.parse = function (data) {\n        if (!this._terminal) {\n            return;\n        }\n        var buffer = this._terminal.buffer;\n        var cursorStartX = buffer.x;\n        var cursorStartY = buffer.y;\n        if (this._terminal.debug) {\n            this._terminal.log('data: ' + data);\n        }\n        if (this._surrogateFirst) {\n            data = this._surrogateFirst + data;\n            this._surrogateFirst = '';\n        }\n        this._parser.parse(data);\n        buffer = this._terminal.buffer;\n        if (buffer.x !== cursorStartX || buffer.y !== cursorStartY) {\n            this._terminal.emit('cursormove');\n        }\n    };\n    InputHandler.prototype.print = function (data, start, end) {\n        var char;\n        var code;\n        var chWidth;\n        var buffer = this._terminal.buffer;\n        var charset = this._terminal.charset;\n        var screenReaderMode = this._terminal.options.screenReaderMode;\n        var cols = this._terminal.cols;\n        var wraparoundMode = this._terminal.wraparoundMode;\n        var insertMode = this._terminal.insertMode;\n        var curAttr = this._terminal.curAttr;\n        var bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\n        this._terminal.updateRange(buffer.y);\n        for (var stringPosition = start; stringPosition < end; ++stringPosition) {\n            char = data.charAt(stringPosition);\n            code = data.charCodeAt(stringPosition);\n            if (0xD800 <= code && code <= 0xDBFF) {\n                if (++stringPosition >= end) {\n                    this._surrogateFirst = char;\n                    continue;\n                }\n                var second = data.charCodeAt(stringPosition);\n                if (0xDC00 <= second && second <= 0xDFFF) {\n                    code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n                    char += data.charAt(stringPosition);\n                }\n                else {\n                    stringPosition--;\n                }\n            }\n            chWidth = CharWidth_1.wcwidth(code);\n            if (charset) {\n                char = charset[char] || char;\n                code = char.charCodeAt(0);\n            }\n            if (screenReaderMode) {\n                this._terminal.emit('a11y.char', char);\n            }\n            if (!chWidth && buffer.x) {\n                var chMinusOne = bufferRow.get(buffer.x - 1);\n                if (chMinusOne) {\n                    if (!chMinusOne[Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\n                        var chMinusTwo = bufferRow.get(buffer.x - 2);\n                        if (chMinusTwo) {\n                            chMinusTwo[Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\n                            chMinusTwo[Buffer_1.CHAR_DATA_CODE_INDEX] = code;\n                            bufferRow.set(buffer.x - 2, chMinusTwo);\n                        }\n                    }\n                    else {\n                        chMinusOne[Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\n                        chMinusOne[Buffer_1.CHAR_DATA_CODE_INDEX] = code;\n                        bufferRow.set(buffer.x - 1, chMinusOne);\n                    }\n                }\n                continue;\n            }\n            if (buffer.x + chWidth - 1 >= cols) {\n                if (wraparoundMode) {\n                    buffer.x = 0;\n                    buffer.y++;\n                    if (buffer.y > buffer.scrollBottom) {\n                        buffer.y--;\n                        this._terminal.scroll(true);\n                    }\n                    else {\n                        buffer.lines.get(buffer.y).isWrapped = true;\n                    }\n                    bufferRow = buffer.lines.get(buffer.y + buffer.ybase);\n                }\n                else {\n                    if (chWidth === 2) {\n                        continue;\n                    }\n                }\n            }\n            if (insertMode) {\n                bufferRow.insertCells(buffer.x, chWidth, [curAttr, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n                var lastCell = bufferRow.get(cols - 1);\n                if (lastCell[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n                    bufferRow.set(cols - 1, [curAttr, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n                }\n            }\n            bufferRow.set(buffer.x++, [curAttr, char, chWidth, code]);\n            if (chWidth > 0) {\n                while (--chWidth) {\n                    bufferRow.set(buffer.x++, [curAttr, '', 0, undefined]);\n                }\n            }\n        }\n        this._terminal.updateRange(buffer.y);\n    };\n    InputHandler.prototype.bell = function () {\n        this._terminal.bell();\n    };\n    InputHandler.prototype.lineFeed = function () {\n        var buffer = this._terminal.buffer;\n        if (this._terminal.options.convertEol) {\n            buffer.x = 0;\n        }\n        buffer.y++;\n        if (buffer.y > buffer.scrollBottom) {\n            buffer.y--;\n            this._terminal.scroll();\n        }\n        if (buffer.x >= this._terminal.cols) {\n            buffer.x--;\n        }\n        this._terminal.emit('linefeed');\n    };\n    InputHandler.prototype.carriageReturn = function () {\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.backspace = function () {\n        if (this._terminal.buffer.x > 0) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.tab = function () {\n        var originalX = this._terminal.buffer.x;\n        this._terminal.buffer.x = this._terminal.buffer.nextStop();\n        if (this._terminal.options.screenReaderMode) {\n            this._terminal.emit('a11y.tab', this._terminal.buffer.x - originalX);\n        }\n    };\n    InputHandler.prototype.shiftOut = function () {\n        this._terminal.setgLevel(1);\n    };\n    InputHandler.prototype.shiftIn = function () {\n        this._terminal.setgLevel(0);\n    };\n    InputHandler.prototype.insertChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).insertCells(this._terminal.buffer.x, params[0] || 1, [this._terminal.eraseAttr(), Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.cursorUp = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y -= param;\n        if (this._terminal.buffer.y < 0) {\n            this._terminal.buffer.y = 0;\n        }\n    };\n    InputHandler.prototype.cursorDown = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.cursorForward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x += param;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.cursorBackward = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n        this._terminal.buffer.x -= param;\n        if (this._terminal.buffer.x < 0) {\n            this._terminal.buffer.x = 0;\n        }\n    };\n    InputHandler.prototype.cursorNextLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.cursorPrecedingLine = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y -= param;\n        if (this._terminal.buffer.y < 0) {\n            this._terminal.buffer.y = 0;\n        }\n        this._terminal.buffer.x = 0;\n    };\n    InputHandler.prototype.cursorCharAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x = param - 1;\n    };\n    InputHandler.prototype.cursorPosition = function (params) {\n        var col;\n        var row = params[0] - 1;\n        if (params.length >= 2) {\n            col = params[1] - 1;\n        }\n        else {\n            col = 0;\n        }\n        if (row < 0) {\n            row = 0;\n        }\n        else if (row >= this._terminal.rows) {\n            row = this._terminal.rows - 1;\n        }\n        if (col < 0) {\n            col = 0;\n        }\n        else if (col >= this._terminal.cols) {\n            col = this._terminal.cols - 1;\n        }\n        this._terminal.buffer.x = col;\n        this._terminal.buffer.y = row;\n    };\n    InputHandler.prototype.cursorForwardTab = function (params) {\n        var param = params[0] || 1;\n        while (param--) {\n            this._terminal.buffer.x = this._terminal.buffer.nextStop();\n        }\n    };\n    InputHandler.prototype._eraseInBufferLine = function (y, start, end, clearWrap) {\n        if (clearWrap === void 0) { clearWrap = false; }\n        var line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + y);\n        line.replaceCells(start, end, [this._terminal.eraseAttr(), Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n        if (clearWrap) {\n            line.isWrapped = false;\n        }\n    };\n    InputHandler.prototype._resetBufferLine = function (y) {\n        this._eraseInBufferLine(y, 0, this._terminal.cols, true);\n    };\n    InputHandler.prototype.eraseInDisplay = function (params) {\n        var j;\n        switch (params[0]) {\n            case 0:\n                j = this._terminal.buffer.y;\n                this._terminal.updateRange(j);\n                this._eraseInBufferLine(j++, this._terminal.buffer.x, this._terminal.cols, this._terminal.buffer.x === 0);\n                for (; j < this._terminal.rows; j++) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(j);\n                break;\n            case 1:\n                j = this._terminal.buffer.y;\n                this._terminal.updateRange(j);\n                this._eraseInBufferLine(j, 0, this._terminal.buffer.x + 1, true);\n                if (this._terminal.buffer.x + 1 >= this._terminal.cols) {\n                    this._terminal.buffer.lines.get(j + 1).isWrapped = false;\n                }\n                while (j--) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(0);\n                break;\n            case 2:\n                j = this._terminal.rows;\n                this._terminal.updateRange(j - 1);\n                while (j--) {\n                    this._resetBufferLine(j);\n                }\n                this._terminal.updateRange(0);\n                break;\n            case 3:\n                var scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\n                if (scrollBackSize > 0) {\n                    this._terminal.buffer.lines.trimStart(scrollBackSize);\n                    this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\n                    this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\n                    this._terminal.emit('scroll', 0);\n                }\n                break;\n        }\n    };\n    InputHandler.prototype.eraseInLine = function (params) {\n        switch (params[0]) {\n            case 0:\n                this._eraseInBufferLine(this._terminal.buffer.y, this._terminal.buffer.x, this._terminal.cols);\n                break;\n            case 1:\n                this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.buffer.x + 1);\n                break;\n            case 2:\n                this._eraseInBufferLine(this._terminal.buffer.y, 0, this._terminal.cols);\n                break;\n        }\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.insertLines = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        var buffer = this._terminal.buffer;\n        var row = buffer.y + buffer.ybase;\n        var scrollBottomRowsOffset = this._terminal.rows - 1 - buffer.scrollBottom;\n        var scrollBottomAbsolute = this._terminal.rows - 1 + buffer.ybase - scrollBottomRowsOffset + 1;\n        while (param--) {\n            buffer.lines.splice(scrollBottomAbsolute - 1, 1);\n            buffer.lines.splice(row, 0, buffer.getBlankLine(this._terminal.eraseAttr()));\n        }\n        this._terminal.updateRange(buffer.y);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.deleteLines = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        var buffer = this._terminal.buffer;\n        var row = buffer.y + buffer.ybase;\n        var j;\n        j = this._terminal.rows - 1 - buffer.scrollBottom;\n        j = this._terminal.rows - 1 + buffer.ybase - j;\n        while (param--) {\n            buffer.lines.splice(row, 1);\n            buffer.lines.splice(j, 0, buffer.getBlankLine(this._terminal.eraseAttr()));\n        }\n        this._terminal.updateRange(buffer.y);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.deleteChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).deleteCells(this._terminal.buffer.x, params[0] || 1, [this._terminal.eraseAttr(), Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n        this._terminal.updateRange(this._terminal.buffer.y);\n    };\n    InputHandler.prototype.scrollUp = function (params) {\n        var param = params[0] || 1;\n        var buffer = this._terminal.buffer;\n        while (param--) {\n            buffer.lines.splice(buffer.ybase + buffer.scrollTop, 1);\n            buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 0, buffer.getBlankLine(Buffer_1.DEFAULT_ATTR));\n        }\n        this._terminal.updateRange(buffer.scrollTop);\n        this._terminal.updateRange(buffer.scrollBottom);\n    };\n    InputHandler.prototype.scrollDown = function (params, collect) {\n        if (params.length < 2 && !collect) {\n            var param = params[0] || 1;\n            var buffer = this._terminal.buffer;\n            while (param--) {\n                buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 1);\n                buffer.lines.splice(buffer.ybase + buffer.scrollBottom, 0, buffer.getBlankLine(Buffer_1.DEFAULT_ATTR));\n            }\n            this._terminal.updateRange(buffer.scrollTop);\n            this._terminal.updateRange(buffer.scrollBottom);\n        }\n    };\n    InputHandler.prototype.eraseChars = function (params) {\n        this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).replaceCells(this._terminal.buffer.x, this._terminal.buffer.x + (params[0] || 1), [this._terminal.eraseAttr(), Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n    };\n    InputHandler.prototype.cursorBackwardTab = function (params) {\n        var param = params[0] || 1;\n        var buffer = this._terminal.buffer;\n        while (param--) {\n            buffer.x = buffer.prevStop();\n        }\n    };\n    InputHandler.prototype.charPosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x = param - 1;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.hPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.x += param;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.repeatPrecedingCharacter = function (params) {\n        var buffer = this._terminal.buffer;\n        var line = buffer.lines.get(buffer.ybase + buffer.y);\n        line.replaceCells(buffer.x, buffer.x + (params[0] || 1), line.get(buffer.x - 1) || [Buffer_1.DEFAULT_ATTR, Buffer_1.NULL_CELL_CHAR, Buffer_1.NULL_CELL_WIDTH, Buffer_1.NULL_CELL_CODE]);\n    };\n    InputHandler.prototype.sendDeviceAttributes = function (params, collect) {\n        if (params[0] > 0) {\n            return;\n        }\n        if (!collect) {\n            if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[?1;2c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[?6c');\n            }\n        }\n        else if (collect === '>') {\n            if (this._terminal.is('xterm')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>0;276;0c');\n            }\n            else if (this._terminal.is('rxvt-unicode')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>85;95;0c');\n            }\n            else if (this._terminal.is('linux')) {\n                this._terminal.handler(params[0] + 'c');\n            }\n            else if (this._terminal.is('screen')) {\n                this._terminal.handler(EscapeSequences_1.C0.ESC + '[>83;40003;0c');\n            }\n        }\n    };\n    InputHandler.prototype.linePosAbsolute = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y = param - 1;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n    };\n    InputHandler.prototype.vPositionRelative = function (params) {\n        var param = params[0];\n        if (param < 1) {\n            param = 1;\n        }\n        this._terminal.buffer.y += param;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x--;\n        }\n    };\n    InputHandler.prototype.hVPosition = function (params) {\n        if (params[0] < 1)\n            params[0] = 1;\n        if (params[1] < 1)\n            params[1] = 1;\n        this._terminal.buffer.y = params[0] - 1;\n        if (this._terminal.buffer.y >= this._terminal.rows) {\n            this._terminal.buffer.y = this._terminal.rows - 1;\n        }\n        this._terminal.buffer.x = params[1] - 1;\n        if (this._terminal.buffer.x >= this._terminal.cols) {\n            this._terminal.buffer.x = this._terminal.cols - 1;\n        }\n    };\n    InputHandler.prototype.tabClear = function (params) {\n        var param = params[0];\n        if (param <= 0) {\n            delete this._terminal.buffer.tabs[this._terminal.buffer.x];\n        }\n        else if (param === 3) {\n            this._terminal.buffer.tabs = {};\n        }\n    };\n    InputHandler.prototype.setMode = function (params, collect) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.setMode([params[i]]);\n            }\n            return;\n        }\n        if (!collect) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = true;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = true;\n                    break;\n                case 2:\n                    this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(1, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(2, Charsets_1.DEFAULT_CHARSET);\n                    this._terminal.setgCharset(3, Charsets_1.DEFAULT_CHARSET);\n                    break;\n                case 3:\n                    this._terminal.savedCols = this._terminal.cols;\n                    this._terminal.resize(132, this._terminal.rows);\n                    break;\n                case 6:\n                    this._terminal.originMode = true;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = true;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Serial port requested application keypad.');\n                    this._terminal.applicationKeypad = true;\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = params[0] === 9;\n                    this._terminal.vt200Mouse = params[0] === 1000;\n                    this._terminal.normalMouse = params[0] > 1000;\n                    this._terminal.mouseEvents = true;\n                    this._terminal.element.classList.add('enable-mouse-events');\n                    this._terminal.selectionManager.disable();\n                    this._terminal.log('Binding to mouse events.');\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = true;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = true;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = true;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = true;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = false;\n                    break;\n                case 1048:\n                    this.saveCursor(params);\n                    break;\n                case 1049:\n                    this.saveCursor(params);\n                case 47:\n                case 1047:\n                    this._terminal.buffers.activateAltBuffer(this._terminal.eraseAttr());\n                    this._terminal.refresh(0, this._terminal.rows - 1);\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    this._terminal.showCursor();\n                    break;\n                case 2004:\n                    this._terminal.bracketedPasteMode = true;\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.resetMode = function (params, collect) {\n        if (params.length > 1) {\n            for (var i = 0; i < params.length; i++) {\n                this.resetMode([params[i]]);\n            }\n            return;\n        }\n        if (!collect) {\n            switch (params[0]) {\n                case 4:\n                    this._terminal.insertMode = false;\n                    break;\n                case 20:\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 1:\n                    this._terminal.applicationCursor = false;\n                    break;\n                case 3:\n                    if (this._terminal.cols === 132 && this._terminal.savedCols) {\n                        this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\n                    }\n                    delete this._terminal.savedCols;\n                    break;\n                case 6:\n                    this._terminal.originMode = false;\n                    break;\n                case 7:\n                    this._terminal.wraparoundMode = false;\n                    break;\n                case 12:\n                    break;\n                case 66:\n                    this._terminal.log('Switching back to normal keypad.');\n                    this._terminal.applicationKeypad = false;\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    break;\n                case 9:\n                case 1000:\n                case 1002:\n                case 1003:\n                    this._terminal.x10Mouse = false;\n                    this._terminal.vt200Mouse = false;\n                    this._terminal.normalMouse = false;\n                    this._terminal.mouseEvents = false;\n                    this._terminal.element.classList.remove('enable-mouse-events');\n                    this._terminal.selectionManager.enable();\n                    break;\n                case 1004:\n                    this._terminal.sendFocus = false;\n                    break;\n                case 1005:\n                    this._terminal.utfMouse = false;\n                    break;\n                case 1006:\n                    this._terminal.sgrMouse = false;\n                    break;\n                case 1015:\n                    this._terminal.urxvtMouse = false;\n                    break;\n                case 25:\n                    this._terminal.cursorHidden = true;\n                    break;\n                case 1048:\n                    this.restoreCursor(params);\n                    break;\n                case 1049:\n                case 47:\n                case 1047:\n                    this._terminal.buffers.activateNormalBuffer();\n                    if (params[0] === 1049) {\n                        this.restoreCursor(params);\n                    }\n                    this._terminal.refresh(0, this._terminal.rows - 1);\n                    if (this._terminal.viewport) {\n                        this._terminal.viewport.syncScrollArea();\n                    }\n                    this._terminal.showCursor();\n                    break;\n                case 2004:\n                    this._terminal.bracketedPasteMode = false;\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.charAttributes = function (params) {\n        if (params.length === 1 && params[0] === 0) {\n            this._terminal.curAttr = Buffer_1.DEFAULT_ATTR;\n            return;\n        }\n        var l = params.length;\n        var flags = this._terminal.curAttr >> 18;\n        var fg = (this._terminal.curAttr >> 9) & 0x1ff;\n        var bg = this._terminal.curAttr & 0x1ff;\n        var p;\n        for (var i = 0; i < l; i++) {\n            p = params[i];\n            if (p >= 30 && p <= 37) {\n                fg = p - 30;\n            }\n            else if (p >= 40 && p <= 47) {\n                bg = p - 40;\n            }\n            else if (p >= 90 && p <= 97) {\n                p += 8;\n                fg = p - 90;\n            }\n            else if (p >= 100 && p <= 107) {\n                p += 8;\n                bg = p - 100;\n            }\n            else if (p === 0) {\n                flags = Buffer_1.DEFAULT_ATTR >> 18;\n                fg = (Buffer_1.DEFAULT_ATTR >> 9) & 0x1ff;\n                bg = Buffer_1.DEFAULT_ATTR & 0x1ff;\n            }\n            else if (p === 1) {\n                flags |= 1;\n            }\n            else if (p === 3) {\n                flags |= 64;\n            }\n            else if (p === 4) {\n                flags |= 2;\n            }\n            else if (p === 5) {\n                flags |= 4;\n            }\n            else if (p === 7) {\n                flags |= 8;\n            }\n            else if (p === 8) {\n                flags |= 16;\n            }\n            else if (p === 2) {\n                flags |= 32;\n            }\n            else if (p === 22) {\n                flags &= ~1;\n                flags &= ~32;\n            }\n            else if (p === 23) {\n                flags &= ~64;\n            }\n            else if (p === 24) {\n                flags &= ~2;\n            }\n            else if (p === 25) {\n                flags &= ~4;\n            }\n            else if (p === 27) {\n                flags &= ~8;\n            }\n            else if (p === 28) {\n                flags &= ~16;\n            }\n            else if (p === 39) {\n                fg = (Buffer_1.DEFAULT_ATTR >> 9) & 0x1ff;\n            }\n            else if (p === 49) {\n                bg = Buffer_1.DEFAULT_ATTR & 0x1ff;\n            }\n            else if (p === 38) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    fg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n                    if (fg === -1)\n                        fg = 0x1ff;\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    fg = p;\n                }\n            }\n            else if (p === 48) {\n                if (params[i + 1] === 2) {\n                    i += 2;\n                    bg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n                    if (bg === -1)\n                        bg = 0x1ff;\n                    i += 2;\n                }\n                else if (params[i + 1] === 5) {\n                    i += 2;\n                    p = params[i] & 0xff;\n                    bg = p;\n                }\n            }\n            else if (p === 100) {\n                fg = (Buffer_1.DEFAULT_ATTR >> 9) & 0x1ff;\n                bg = Buffer_1.DEFAULT_ATTR & 0x1ff;\n            }\n            else {\n                this._terminal.error('Unknown SGR attribute: %d.', p);\n            }\n        }\n        this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\n    };\n    InputHandler.prototype.deviceStatus = function (params, collect) {\n        if (!collect) {\n            switch (params[0]) {\n                case 5:\n                    this._terminal.emit('data', EscapeSequences_1.C0.ESC + \"[0n\");\n                    break;\n                case 6:\n                    var y = this._terminal.buffer.y + 1;\n                    var x = this._terminal.buffer.x + 1;\n                    this._terminal.emit('data', EscapeSequences_1.C0.ESC + \"[\" + y + \";\" + x + \"R\");\n                    break;\n            }\n        }\n        else if (collect === '?') {\n            switch (params[0]) {\n                case 6:\n                    var y = this._terminal.buffer.y + 1;\n                    var x = this._terminal.buffer.x + 1;\n                    this._terminal.emit('data', EscapeSequences_1.C0.ESC + \"[?\" + y + \";\" + x + \"R\");\n                    break;\n                case 15:\n                    break;\n                case 25:\n                    break;\n                case 26:\n                    break;\n                case 53:\n                    break;\n            }\n        }\n    };\n    InputHandler.prototype.softReset = function (params, collect) {\n        if (collect === '!') {\n            this._terminal.cursorHidden = false;\n            this._terminal.insertMode = false;\n            this._terminal.originMode = false;\n            this._terminal.wraparoundMode = true;\n            this._terminal.applicationKeypad = false;\n            if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n            }\n            this._terminal.applicationCursor = false;\n            this._terminal.buffer.scrollTop = 0;\n            this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\n            this._terminal.curAttr = Buffer_1.DEFAULT_ATTR;\n            this._terminal.buffer.x = this._terminal.buffer.y = 0;\n            this._terminal.charset = null;\n            this._terminal.glevel = 0;\n            this._terminal.charsets = [null];\n        }\n    };\n    InputHandler.prototype.setCursorStyle = function (params, collect) {\n        if (collect === ' ') {\n            var param = params[0] < 1 ? 1 : params[0];\n            switch (param) {\n                case 1:\n                case 2:\n                    this._terminal.setOption('cursorStyle', 'block');\n                    break;\n                case 3:\n                case 4:\n                    this._terminal.setOption('cursorStyle', 'underline');\n                    break;\n                case 5:\n                case 6:\n                    this._terminal.setOption('cursorStyle', 'bar');\n                    break;\n            }\n            var isBlinking = param % 2 === 1;\n            this._terminal.setOption('cursorBlink', isBlinking);\n        }\n    };\n    InputHandler.prototype.setScrollRegion = function (params, collect) {\n        if (collect)\n            return;\n        this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\n        this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\n        this._terminal.buffer.x = 0;\n        this._terminal.buffer.y = 0;\n    };\n    InputHandler.prototype.saveCursor = function (params) {\n        this._terminal.buffer.savedX = this._terminal.buffer.x;\n        this._terminal.buffer.savedY = this._terminal.buffer.y;\n        this._terminal.buffer.savedCurAttr = this._terminal.curAttr;\n    };\n    InputHandler.prototype.restoreCursor = function (params) {\n        this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\n        this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\n        this._terminal.curAttr = this._terminal.buffer.savedCurAttr || Buffer_1.DEFAULT_ATTR;\n    };\n    InputHandler.prototype.setTitle = function (data) {\n        this._terminal.handleTitle(data);\n    };\n    InputHandler.prototype.nextLine = function () {\n        this._terminal.buffer.x = 0;\n        this.index();\n    };\n    InputHandler.prototype.keypadApplicationMode = function () {\n        this._terminal.log('Serial port requested application keypad.');\n        this._terminal.applicationKeypad = true;\n        if (this._terminal.viewport) {\n            this._terminal.viewport.syncScrollArea();\n        }\n    };\n    InputHandler.prototype.keypadNumericMode = function () {\n        this._terminal.log('Switching back to normal keypad.');\n        this._terminal.applicationKeypad = false;\n        if (this._terminal.viewport) {\n            this._terminal.viewport.syncScrollArea();\n        }\n    };\n    InputHandler.prototype.selectDefaultCharset = function () {\n        this._terminal.setgLevel(0);\n        this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n    };\n    InputHandler.prototype.selectCharset = function (collectAndFlag) {\n        if (collectAndFlag.length !== 2)\n            return this.selectDefaultCharset();\n        if (collectAndFlag[0] === '/')\n            return;\n        this._terminal.setgCharset(GLEVEL[collectAndFlag[0]], Charsets_1.CHARSETS[collectAndFlag[1]] || Charsets_1.DEFAULT_CHARSET);\n    };\n    InputHandler.prototype.index = function () {\n        this._terminal.index();\n    };\n    InputHandler.prototype.tabSet = function () {\n        this._terminal.tabSet();\n    };\n    InputHandler.prototype.reverseIndex = function () {\n        this._terminal.reverseIndex();\n    };\n    InputHandler.prototype.reset = function () {\n        this._parser.reset();\n        this._terminal.reset();\n    };\n    InputHandler.prototype.setgLevel = function (level) {\n        this._terminal.setgLevel(level);\n    };\n    return InputHandler;\n}(Lifecycle_1.Disposable));\nexports.InputHandler = InputHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHARSETS = {};\nexports.DEFAULT_CHARSET = exports.CHARSETS['B'];\nexports.CHARSETS['0'] = {\n    '`': '\\u25c6',\n    'a': '\\u2592',\n    'b': '\\u0009',\n    'c': '\\u000c',\n    'd': '\\u000d',\n    'e': '\\u000a',\n    'f': '\\u00b0',\n    'g': '\\u00b1',\n    'h': '\\u2424',\n    'i': '\\u000b',\n    'j': '\\u2518',\n    'k': '\\u2510',\n    'l': '\\u250c',\n    'm': '\\u2514',\n    'n': '\\u253c',\n    'o': '\\u23ba',\n    'p': '\\u23bb',\n    'q': '\\u2500',\n    'r': '\\u23bc',\n    's': '\\u23bd',\n    't': '\\u251c',\n    'u': '\\u2524',\n    'v': '\\u2534',\n    'w': '\\u252c',\n    'x': '\\u2502',\n    'y': '\\u2264',\n    'z': '\\u2265',\n    '{': '\\u03c0',\n    '|': '\\u2260',\n    '}': '\\u00a3',\n    '~': '\\u00b7'\n};\nexports.CHARSETS['A'] = {\n    '#': '£'\n};\nexports.CHARSETS['B'] = null;\nexports.CHARSETS['4'] = {\n    '#': '£',\n    '@': '¾',\n    '[': 'ij',\n    '\\\\': '½',\n    ']': '|',\n    '{': '¨',\n    '|': 'f',\n    '}': '¼',\n    '~': '´'\n};\nexports.CHARSETS['C'] =\n    exports.CHARSETS['5'] = {\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['R'] = {\n    '#': '£',\n    '@': 'à',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': '§',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': '¨'\n};\nexports.CHARSETS['Q'] = {\n    '@': 'à',\n    '[': 'â',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '`': 'ô',\n    '{': 'é',\n    '|': 'ù',\n    '}': 'è',\n    '~': 'û'\n};\nexports.CHARSETS['K'] = {\n    '@': '§',\n    '[': 'Ä',\n    '\\\\': 'Ö',\n    ']': 'Ü',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'ß'\n};\nexports.CHARSETS['Y'] = {\n    '#': '£',\n    '@': '§',\n    '[': '°',\n    '\\\\': 'ç',\n    ']': 'é',\n    '`': 'ù',\n    '{': 'à',\n    '|': 'ò',\n    '}': 'è',\n    '~': 'ì'\n};\nexports.CHARSETS['E'] =\n    exports.CHARSETS['6'] = {\n        '@': 'Ä',\n        '[': 'Æ',\n        '\\\\': 'Ø',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'ä',\n        '{': 'æ',\n        '|': 'ø',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['Z'] = {\n    '#': '£',\n    '@': '§',\n    '[': '¡',\n    '\\\\': 'Ñ',\n    ']': '¿',\n    '{': '°',\n    '|': 'ñ',\n    '}': 'ç'\n};\nexports.CHARSETS['H'] =\n    exports.CHARSETS['7'] = {\n        '@': 'É',\n        '[': 'Ä',\n        '\\\\': 'Ö',\n        ']': 'Å',\n        '^': 'Ü',\n        '`': 'é',\n        '{': 'ä',\n        '|': 'ö',\n        '}': 'å',\n        '~': 'ü'\n    };\nexports.CHARSETS['='] = {\n    '#': 'ù',\n    '@': 'à',\n    '[': 'é',\n    '\\\\': 'ç',\n    ']': 'ê',\n    '^': 'î',\n    '_': 'è',\n    '`': 'ô',\n    '{': 'ä',\n    '|': 'ö',\n    '}': 'ü',\n    '~': 'û'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction fill(array, value, start, end) {\n    if (array.fill) {\n        return array.fill(value, start, end);\n    }\n    return fillFallback(array, value, start, end);\n}\nexports.fill = fill;\nfunction fillFallback(array, value, start, end) {\n    if (start === void 0) { start = 0; }\n    if (end === void 0) { end = array.length; }\n    if (start >= array.length) {\n        return array;\n    }\n    start = (array.length + start) % array.length;\n    if (end >= array.length) {\n        end = array.length;\n    }\n    else {\n        end = (array.length + end) % array.length;\n    }\n    for (var i = start; i < end; ++i) {\n        array[i] = value;\n    }\n    return array;\n}\nexports.fillFallback = fillFallback;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvbW1vbi9UeXBlZEFycmF5VXRpbHMudHM/YWQwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWNBLFNBQWdCLElBQUksQ0FBdUIsS0FBUSxFQUFFLEtBQWEsRUFBRSxLQUFjLEVBQUUsR0FBWTtJQUU5RixJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQU0sQ0FBQztLQUMzQztJQUNELE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFORCxvQkFNQztBQUVELFNBQWdCLFlBQVksQ0FBdUIsS0FBUSxFQUFFLEtBQWEsRUFBRSxLQUFpQixFQUFFLEdBQTBCO0lBQTdDLGlDQUFpQjtJQUFFLDRCQUFjLEtBQUssQ0FBQyxNQUFNO0lBS3ZILElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDekIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM5QyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0tBQ3BCO1NBQU07UUFDTCxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7S0FDM0M7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2hDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDbEI7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFsQkQsb0NBa0JDIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vKipcbiAqIHBvbHlmaWxsIGZvciBUeXBlZEFycmF5LmZpbGxcbiAqIFRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgLmZpbGwgaW4gYWxsIHNhZmFyaSB2ZXJzaW9ucyBhbmQgSUUgMTEuXG4gKi9cblxudHlwZSBUeXBlZEFycmF5ID0gVWludDhBcnJheSB8IFVpbnQxNkFycmF5IHwgVWludDMyQXJyYXkgfCBVaW50OENsYW1wZWRBcnJheVxuICB8IEludDhBcnJheSB8IEludDE2QXJyYXkgfCBJbnQzMkFycmF5XG4gIHwgRmxvYXQzMkFycmF5IHwgRmxvYXQ2NEFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsbDxUIGV4dGVuZHMgVHlwZWRBcnJheT4oYXJyYXk6IFQsIHZhbHVlOiBudW1iZXIsIHN0YXJ0PzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBUIHtcbiAgLy8gYWxsIG1vZGVybiBlbmdpbmVzIHRoYXQgc3VwcG9ydCAuZmlsbFxuICBpZiAoYXJyYXkuZmlsbCkge1xuICAgIHJldHVybiBhcnJheS5maWxsKHZhbHVlLCBzdGFydCwgZW5kKSBhcyBUO1xuICB9XG4gIHJldHVybiBmaWxsRmFsbGJhY2soYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxGYWxsYmFjazxUIGV4dGVuZHMgVHlwZWRBcnJheT4oYXJyYXk6IFQsIHZhbHVlOiBudW1iZXIsIHN0YXJ0OiBudW1iZXIgPSAwLCBlbmQ6IG51bWJlciA9IGFycmF5Lmxlbmd0aCk6IFQge1xuICAvLyBzYWZhcmkgYW5kIElFIDExXG4gIC8vIHNpbmNlIElFIDExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkucHJvdG90eXBlLmZpbGwgZWl0aGVyXG4gIC8vIHdlIGNhbm5vdCB1c2UgdGhlIHN1Z2dlc3RlZCBwb2x5ZmlsbCBmcm9tIE1ETlxuICAvLyBpbnN0ZWFkIHdlIHNpbXBseSBmYWxsIGJhY2sgdG8gbG9vcGluZ1xuICBpZiAoc3RhcnQgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIHN0YXJ0ID0gKGFycmF5Lmxlbmd0aCArIHN0YXJ0KSAlIGFycmF5Lmxlbmd0aDtcbiAgaWYgKGVuZCA+PSBhcnJheS5sZW5ndGgpIHtcbiAgICBlbmQgPSBhcnJheS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgZW5kID0gKGFycmF5Lmxlbmd0aCArIGVuZCkgJSBhcnJheS5sZW5ndGg7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBhcnJheVtpXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvY29tbW9uL1R5cGVkQXJyYXlVdGlscy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle_1 = __webpack_require__(3);\nfunction r(low, high) {\n    var c = high - low;\n    var arr = new Array(c);\n    while (c--) {\n        arr[c] = --high;\n    }\n    return arr;\n}\nvar TransitionTable = (function () {\n    function TransitionTable(length) {\n        this.table = (typeof Uint8Array === 'undefined')\n            ? new Array(length)\n            : new Uint8Array(length);\n    }\n    TransitionTable.prototype.add = function (code, state, action, next) {\n        this.table[state << 8 | code] = ((action | 0) << 4) | ((next === undefined) ? state : next);\n    };\n    TransitionTable.prototype.addMany = function (codes, state, action, next) {\n        for (var i = 0; i < codes.length; i++) {\n            this.add(codes[i], state, action, next);\n        }\n    };\n    return TransitionTable;\n}());\nexports.TransitionTable = TransitionTable;\nvar PRINTABLES = r(0x20, 0x7f);\nvar EXECUTABLES = r(0x00, 0x18);\nEXECUTABLES.push(0x19);\nEXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\nvar DEFAULT_TRANSITION = 1 << 4 | 0;\nexports.VT500_TRANSITION_TABLE = (function () {\n    var table = new TransitionTable(4095);\n    var states = r(0, 13 + 1);\n    var state;\n    for (state in states) {\n        for (var code = 0; code < 160; ++code) {\n            table.add(code, state, 1, 0);\n        }\n    }\n    table.addMany(PRINTABLES, 0, 2, 0);\n    for (state in states) {\n        table.addMany([0x18, 0x1a, 0x99, 0x9a], state, 3, 0);\n        table.addMany(r(0x80, 0x90), state, 3, 0);\n        table.addMany(r(0x90, 0x98), state, 3, 0);\n        table.add(0x9c, state, 0, 0);\n        table.add(0x1b, state, 11, 1);\n        table.add(0x9d, state, 4, 8);\n        table.addMany([0x98, 0x9e, 0x9f], state, 0, 7);\n        table.add(0x9b, state, 11, 3);\n        table.add(0x90, state, 11, 9);\n    }\n    table.addMany(EXECUTABLES, 0, 3, 0);\n    table.addMany(EXECUTABLES, 1, 3, 1);\n    table.add(0x7f, 1, 0, 1);\n    table.addMany(EXECUTABLES, 8, 0, 8);\n    table.addMany(EXECUTABLES, 3, 3, 3);\n    table.add(0x7f, 3, 0, 3);\n    table.addMany(EXECUTABLES, 4, 3, 4);\n    table.add(0x7f, 4, 0, 4);\n    table.addMany(EXECUTABLES, 6, 3, 6);\n    table.addMany(EXECUTABLES, 5, 3, 5);\n    table.add(0x7f, 5, 0, 5);\n    table.addMany(EXECUTABLES, 2, 3, 2);\n    table.add(0x7f, 2, 0, 2);\n    table.add(0x5d, 1, 4, 8);\n    table.addMany(PRINTABLES, 8, 5, 8);\n    table.add(0x7f, 8, 5, 8);\n    table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], 8, 6, 0);\n    table.addMany(r(0x1c, 0x20), 8, 0, 8);\n    table.addMany([0x58, 0x5e, 0x5f], 1, 0, 7);\n    table.addMany(PRINTABLES, 7, 0, 7);\n    table.addMany(EXECUTABLES, 7, 0, 7);\n    table.add(0x9c, 7, 0, 0);\n    table.add(0x5b, 1, 11, 3);\n    table.addMany(r(0x40, 0x7f), 3, 7, 0);\n    table.addMany(r(0x30, 0x3a), 3, 8, 4);\n    table.add(0x3b, 3, 8, 4);\n    table.addMany([0x3c, 0x3d, 0x3e, 0x3f], 3, 9, 4);\n    table.addMany(r(0x30, 0x3a), 4, 8, 4);\n    table.add(0x3b, 4, 8, 4);\n    table.addMany(r(0x40, 0x7f), 4, 7, 0);\n    table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 4, 0, 6);\n    table.addMany(r(0x20, 0x40), 6, 0, 6);\n    table.add(0x7f, 6, 0, 6);\n    table.addMany(r(0x40, 0x7f), 6, 0, 0);\n    table.add(0x3a, 3, 0, 6);\n    table.addMany(r(0x20, 0x30), 3, 9, 5);\n    table.addMany(r(0x20, 0x30), 5, 9, 5);\n    table.addMany(r(0x30, 0x40), 5, 0, 6);\n    table.addMany(r(0x40, 0x7f), 5, 7, 0);\n    table.addMany(r(0x20, 0x30), 4, 9, 5);\n    table.addMany(r(0x20, 0x30), 1, 9, 2);\n    table.addMany(r(0x20, 0x30), 2, 9, 2);\n    table.addMany(r(0x30, 0x7f), 2, 10, 0);\n    table.addMany(r(0x30, 0x50), 1, 10, 0);\n    table.addMany(r(0x51, 0x58), 1, 10, 0);\n    table.addMany([0x59, 0x5a, 0x5c], 1, 10, 0);\n    table.addMany(r(0x60, 0x7f), 1, 10, 0);\n    table.add(0x50, 1, 11, 9);\n    table.addMany(EXECUTABLES, 9, 0, 9);\n    table.add(0x7f, 9, 0, 9);\n    table.addMany(r(0x1c, 0x20), 9, 0, 9);\n    table.addMany(r(0x20, 0x30), 9, 9, 12);\n    table.add(0x3a, 9, 0, 11);\n    table.addMany(r(0x30, 0x3a), 9, 8, 10);\n    table.add(0x3b, 9, 8, 10);\n    table.addMany([0x3c, 0x3d, 0x3e, 0x3f], 9, 9, 10);\n    table.addMany(EXECUTABLES, 11, 0, 11);\n    table.addMany(r(0x20, 0x80), 11, 0, 11);\n    table.addMany(r(0x1c, 0x20), 11, 0, 11);\n    table.addMany(EXECUTABLES, 10, 0, 10);\n    table.add(0x7f, 10, 0, 10);\n    table.addMany(r(0x1c, 0x20), 10, 0, 10);\n    table.addMany(r(0x30, 0x3a), 10, 8, 10);\n    table.add(0x3b, 10, 8, 10);\n    table.addMany([0x3a, 0x3c, 0x3d, 0x3e, 0x3f], 10, 0, 11);\n    table.addMany(r(0x20, 0x30), 10, 9, 12);\n    table.addMany(EXECUTABLES, 12, 0, 12);\n    table.add(0x7f, 12, 0, 12);\n    table.addMany(r(0x1c, 0x20), 12, 0, 12);\n    table.addMany(r(0x20, 0x30), 12, 9, 12);\n    table.addMany(r(0x30, 0x40), 12, 0, 11);\n    table.addMany(r(0x40, 0x7f), 12, 12, 13);\n    table.addMany(r(0x40, 0x7f), 10, 12, 13);\n    table.addMany(r(0x40, 0x7f), 9, 12, 13);\n    table.addMany(EXECUTABLES, 13, 13, 13);\n    table.addMany(PRINTABLES, 13, 13, 13);\n    table.add(0x7f, 13, 0, 13);\n    table.addMany([0x1b, 0x9c], 13, 14, 0);\n    return table;\n})();\nvar DcsDummy = (function () {\n    function DcsDummy() {\n    }\n    DcsDummy.prototype.hook = function (collect, params, flag) { };\n    DcsDummy.prototype.put = function (data, start, end) { };\n    DcsDummy.prototype.unhook = function () { };\n    return DcsDummy;\n}());\nvar EscapeSequenceParser = (function (_super) {\n    __extends(EscapeSequenceParser, _super);\n    function EscapeSequenceParser(TRANSITIONS) {\n        if (TRANSITIONS === void 0) { TRANSITIONS = exports.VT500_TRANSITION_TABLE; }\n        var _this = _super.call(this) || this;\n        _this.TRANSITIONS = TRANSITIONS;\n        _this.initialState = 0;\n        _this.currentState = _this.initialState;\n        _this._osc = '';\n        _this._params = [0];\n        _this._collect = '';\n        _this._printHandlerFb = function (data, start, end) { };\n        _this._executeHandlerFb = function (code) { };\n        _this._csiHandlerFb = function (collect, params, flag) { };\n        _this._escHandlerFb = function (collect, flag) { };\n        _this._oscHandlerFb = function (identifier, data) { };\n        _this._dcsHandlerFb = new DcsDummy();\n        _this._errorHandlerFb = function (state) { return state; };\n        _this._printHandler = _this._printHandlerFb;\n        _this._executeHandlers = Object.create(null);\n        _this._csiHandlers = Object.create(null);\n        _this._escHandlers = Object.create(null);\n        _this._oscHandlers = Object.create(null);\n        _this._dcsHandlers = Object.create(null);\n        _this._activeDcsHandler = null;\n        _this._errorHandler = _this._errorHandlerFb;\n        _this.setEscHandler('\\\\', function () { });\n        return _this;\n    }\n    EscapeSequenceParser.prototype.dispose = function () {\n        this._printHandlerFb = null;\n        this._executeHandlerFb = null;\n        this._csiHandlerFb = null;\n        this._escHandlerFb = null;\n        this._oscHandlerFb = null;\n        this._dcsHandlerFb = null;\n        this._errorHandlerFb = null;\n        this._printHandler = null;\n        this._executeHandlers = null;\n        this._csiHandlers = null;\n        this._escHandlers = null;\n        this._oscHandlers = null;\n        this._dcsHandlers = null;\n        this._activeDcsHandler = null;\n        this._errorHandler = null;\n    };\n    EscapeSequenceParser.prototype.setPrintHandler = function (callback) {\n        this._printHandler = callback;\n    };\n    EscapeSequenceParser.prototype.clearPrintHandler = function () {\n        this._printHandler = this._printHandlerFb;\n    };\n    EscapeSequenceParser.prototype.setExecuteHandler = function (flag, callback) {\n        this._executeHandlers[flag.charCodeAt(0)] = callback;\n    };\n    EscapeSequenceParser.prototype.clearExecuteHandler = function (flag) {\n        if (this._executeHandlers[flag.charCodeAt(0)])\n            delete this._executeHandlers[flag.charCodeAt(0)];\n    };\n    EscapeSequenceParser.prototype.setExecuteHandlerFallback = function (callback) {\n        this._executeHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setCsiHandler = function (flag, callback) {\n        this._csiHandlers[flag.charCodeAt(0)] = callback;\n    };\n    EscapeSequenceParser.prototype.clearCsiHandler = function (flag) {\n        if (this._csiHandlers[flag.charCodeAt(0)])\n            delete this._csiHandlers[flag.charCodeAt(0)];\n    };\n    EscapeSequenceParser.prototype.setCsiHandlerFallback = function (callback) {\n        this._csiHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setEscHandler = function (collectAndFlag, callback) {\n        this._escHandlers[collectAndFlag] = callback;\n    };\n    EscapeSequenceParser.prototype.clearEscHandler = function (collectAndFlag) {\n        if (this._escHandlers[collectAndFlag])\n            delete this._escHandlers[collectAndFlag];\n    };\n    EscapeSequenceParser.prototype.setEscHandlerFallback = function (callback) {\n        this._escHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setOscHandler = function (ident, callback) {\n        this._oscHandlers[ident] = callback;\n    };\n    EscapeSequenceParser.prototype.clearOscHandler = function (ident) {\n        if (this._oscHandlers[ident])\n            delete this._oscHandlers[ident];\n    };\n    EscapeSequenceParser.prototype.setOscHandlerFallback = function (callback) {\n        this._oscHandlerFb = callback;\n    };\n    EscapeSequenceParser.prototype.setDcsHandler = function (collectAndFlag, handler) {\n        this._dcsHandlers[collectAndFlag] = handler;\n    };\n    EscapeSequenceParser.prototype.clearDcsHandler = function (collectAndFlag) {\n        if (this._dcsHandlers[collectAndFlag])\n            delete this._dcsHandlers[collectAndFlag];\n    };\n    EscapeSequenceParser.prototype.setDcsHandlerFallback = function (handler) {\n        this._dcsHandlerFb = handler;\n    };\n    EscapeSequenceParser.prototype.setErrorHandler = function (callback) {\n        this._errorHandler = callback;\n    };\n    EscapeSequenceParser.prototype.clearErrorHandler = function () {\n        this._errorHandler = this._errorHandlerFb;\n    };\n    EscapeSequenceParser.prototype.reset = function () {\n        this.currentState = this.initialState;\n        this._osc = '';\n        this._params = [0];\n        this._collect = '';\n        this._activeDcsHandler = null;\n    };\n    EscapeSequenceParser.prototype.parse = function (data) {\n        var code = 0;\n        var transition = 0;\n        var error = false;\n        var currentState = this.currentState;\n        var print = -1;\n        var dcs = -1;\n        var osc = this._osc;\n        var collect = this._collect;\n        var params = this._params;\n        var table = this.TRANSITIONS.table;\n        var dcsHandler = this._activeDcsHandler;\n        var callback = null;\n        var l = data.length;\n        for (var i = 0; i < l; ++i) {\n            code = data.charCodeAt(i);\n            if (currentState === 0 && code > 0x1f && code < 0x80) {\n                print = (~print) ? print : i;\n                do\n                    i++;\n                while (i < l && data.charCodeAt(i) > 0x1f && data.charCodeAt(i) < 0x80);\n                i--;\n                continue;\n            }\n            if (currentState === 4 && (code > 0x2f && code < 0x39)) {\n                params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\n                continue;\n            }\n            transition = (code < 0xa0) ? (table[currentState << 8 | code]) : DEFAULT_TRANSITION;\n            switch (transition >> 4) {\n                case 2:\n                    print = (~print) ? print : i;\n                    break;\n                case 3:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    callback = this._executeHandlers[code];\n                    if (callback)\n                        callback();\n                    else\n                        this._executeHandlerFb(code);\n                    break;\n                case 0:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    else if (~dcs) {\n                        dcsHandler.put(data, dcs, i);\n                        dcs = -1;\n                    }\n                    break;\n                case 1:\n                    if (code > 0x9f) {\n                        switch (currentState) {\n                            case 0:\n                                print = (~print) ? print : i;\n                                break;\n                            case 8:\n                                osc += String.fromCharCode(code);\n                                transition |= 8;\n                                break;\n                            case 6:\n                                transition |= 6;\n                                break;\n                            case 11:\n                                transition |= 11;\n                                break;\n                            case 13:\n                                dcs = (~dcs) ? dcs : i;\n                                transition |= 13;\n                                break;\n                            default:\n                                error = true;\n                        }\n                    }\n                    else {\n                        error = true;\n                    }\n                    if (error) {\n                        var inject = this._errorHandler({\n                            position: i,\n                            code: code,\n                            currentState: currentState,\n                            print: print,\n                            dcs: dcs,\n                            osc: osc,\n                            collect: collect,\n                            params: params,\n                            abort: false\n                        });\n                        if (inject.abort)\n                            return;\n                        error = false;\n                    }\n                    break;\n                case 7:\n                    callback = this._csiHandlers[code];\n                    if (callback)\n                        callback(params, collect);\n                    else\n                        this._csiHandlerFb(collect, params, code);\n                    break;\n                case 8:\n                    if (code === 0x3b)\n                        params.push(0);\n                    else\n                        params[params.length - 1] = params[params.length - 1] * 10 + code - 48;\n                    break;\n                case 9:\n                    collect += String.fromCharCode(code);\n                    break;\n                case 10:\n                    callback = this._escHandlers[collect + String.fromCharCode(code)];\n                    if (callback)\n                        callback(collect, code);\n                    else\n                        this._escHandlerFb(collect, code);\n                    break;\n                case 11:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n                case 12:\n                    dcsHandler = this._dcsHandlers[collect + String.fromCharCode(code)];\n                    if (!dcsHandler)\n                        dcsHandler = this._dcsHandlerFb;\n                    dcsHandler.hook(collect, params, code);\n                    break;\n                case 13:\n                    dcs = (~dcs) ? dcs : i;\n                    break;\n                case 14:\n                    if (dcsHandler) {\n                        if (~dcs)\n                            dcsHandler.put(data, dcs, i);\n                        dcsHandler.unhook();\n                        dcsHandler = null;\n                    }\n                    if (code === 0x1b)\n                        transition |= 1;\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n                case 4:\n                    if (~print) {\n                        this._printHandler(data, print, i);\n                        print = -1;\n                    }\n                    osc = '';\n                    break;\n                case 5:\n                    osc += data.charAt(i);\n                    break;\n                case 6:\n                    if (osc && code !== 0x18 && code !== 0x1a) {\n                        var idx = osc.indexOf(';');\n                        if (idx === -1) {\n                            this._oscHandlerFb(-1, osc);\n                        }\n                        else {\n                            var identifier = parseInt(osc.substring(0, idx));\n                            var content = osc.substring(idx + 1);\n                            callback = this._oscHandlers[identifier];\n                            if (callback)\n                                callback(content);\n                            else\n                                this._oscHandlerFb(identifier, content);\n                        }\n                    }\n                    if (code === 0x1b)\n                        transition |= 1;\n                    osc = '';\n                    params = [0];\n                    collect = '';\n                    dcs = -1;\n                    break;\n            }\n            currentState = transition & 15;\n        }\n        if (currentState === 0 && ~print) {\n            this._printHandler(data, print, data.length);\n        }\n        else if (currentState === 13 && ~dcs && dcsHandler) {\n            dcsHandler.put(data, dcs, data.length);\n        }\n        this._osc = osc;\n        this._collect = collect;\n        this._params = params;\n        this._activeDcsHandler = dcsHandler;\n        this.currentState = currentState;\n    };\n    return EscapeSequenceParser;\n}(Lifecycle_1.Disposable));\nexports.EscapeSequenceParser = EscapeSequenceParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TextRenderLayer_1 = __webpack_require__(38);\nvar SelectionRenderLayer_1 = __webpack_require__(44);\nvar CursorRenderLayer_1 = __webpack_require__(45);\nvar ColorManager_1 = __webpack_require__(9);\nvar LinkRenderLayer_1 = __webpack_require__(46);\nvar EventEmitter_1 = __webpack_require__(2);\nvar RenderDebouncer_1 = __webpack_require__(11);\nvar ScreenDprMonitor_1 = __webpack_require__(16);\nvar CharacterJoinerRegistry_1 = __webpack_require__(47);\nvar Renderer = (function (_super) {\n    __extends(Renderer, _super);\n    function Renderer(_terminal, theme) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._isPaused = false;\n        _this._needsFullRefresh = false;\n        var allowTransparency = _this._terminal.options.allowTransparency;\n        _this.colorManager = new ColorManager_1.ColorManager(document, allowTransparency);\n        _this._characterJoinerRegistry = new CharacterJoinerRegistry_1.CharacterJoinerRegistry(_terminal);\n        if (theme) {\n            _this.colorManager.setTheme(theme);\n        }\n        _this._renderLayers = [\n            new TextRenderLayer_1.TextRenderLayer(_this._terminal.screenElement, 0, _this.colorManager.colors, _this._characterJoinerRegistry, allowTransparency),\n            new SelectionRenderLayer_1.SelectionRenderLayer(_this._terminal.screenElement, 1, _this.colorManager.colors),\n            new LinkRenderLayer_1.LinkRenderLayer(_this._terminal.screenElement, 2, _this.colorManager.colors, _this._terminal),\n            new CursorRenderLayer_1.CursorRenderLayer(_this._terminal.screenElement, 3, _this.colorManager.colors)\n        ];\n        _this.dimensions = {\n            scaledCharWidth: null,\n            scaledCharHeight: null,\n            scaledCellWidth: null,\n            scaledCellHeight: null,\n            scaledCharLeft: null,\n            scaledCharTop: null,\n            scaledCanvasWidth: null,\n            scaledCanvasHeight: null,\n            canvasWidth: null,\n            canvasHeight: null,\n            actualCellWidth: null,\n            actualCellHeight: null\n        };\n        _this._devicePixelRatio = window.devicePixelRatio;\n        _this._updateDimensions();\n        _this.onOptionsChanged();\n        _this._renderDebouncer = new RenderDebouncer_1.RenderDebouncer(_this._terminal, _this._renderRows.bind(_this));\n        _this._screenDprMonitor = new ScreenDprMonitor_1.ScreenDprMonitor();\n        _this._screenDprMonitor.setListener(function () { return _this.onWindowResize(window.devicePixelRatio); });\n        _this.register(_this._screenDprMonitor);\n        if ('IntersectionObserver' in window) {\n            var observer_1 = new IntersectionObserver(function (e) { return _this.onIntersectionChange(e[0]); }, { threshold: 0 });\n            observer_1.observe(_this._terminal.element);\n            _this.register({ dispose: function () { return observer_1.disconnect(); } });\n        }\n        return _this;\n    }\n    Renderer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._renderLayers.forEach(function (l) { return l.dispose(); });\n    };\n    Renderer.prototype.onIntersectionChange = function (entry) {\n        this._isPaused = entry.intersectionRatio === 0;\n        if (!this._isPaused && this._needsFullRefresh) {\n            this._terminal.refresh(0, this._terminal.rows - 1);\n        }\n    };\n    Renderer.prototype.onWindowResize = function (devicePixelRatio) {\n        if (this._devicePixelRatio !== devicePixelRatio) {\n            this._devicePixelRatio = devicePixelRatio;\n            this.onResize(this._terminal.cols, this._terminal.rows);\n        }\n    };\n    Renderer.prototype.setTheme = function (theme) {\n        var _this = this;\n        this.colorManager.setTheme(theme);\n        this._renderLayers.forEach(function (l) {\n            l.onThemeChanged(_this._terminal, _this.colorManager.colors);\n            l.reset(_this._terminal);\n        });\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n        }\n        else {\n            this._terminal.refresh(0, this._terminal.rows - 1);\n        }\n        return this.colorManager.colors;\n    };\n    Renderer.prototype.onResize = function (cols, rows) {\n        var _this = this;\n        this._updateDimensions();\n        this._renderLayers.forEach(function (l) { return l.resize(_this._terminal, _this.dimensions); });\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n        }\n        else {\n            this._terminal.refresh(0, this._terminal.rows - 1);\n        }\n        this._terminal.screenElement.style.width = this.dimensions.canvasWidth + \"px\";\n        this._terminal.screenElement.style.height = this.dimensions.canvasHeight + \"px\";\n        this.emit('resize', {\n            width: this.dimensions.canvasWidth,\n            height: this.dimensions.canvasHeight\n        });\n    };\n    Renderer.prototype.onCharSizeChanged = function () {\n        this.onResize(this._terminal.cols, this._terminal.rows);\n    };\n    Renderer.prototype.onBlur = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onBlur(_this._terminal); });\n    };\n    Renderer.prototype.onFocus = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onFocus(_this._terminal); });\n    };\n    Renderer.prototype.onSelectionChanged = function (start, end, columnSelectMode) {\n        var _this = this;\n        if (columnSelectMode === void 0) { columnSelectMode = false; }\n        this._runOperation(function (l) { return l.onSelectionChanged(_this._terminal, start, end, columnSelectMode); });\n    };\n    Renderer.prototype.onCursorMove = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.onCursorMove(_this._terminal); });\n    };\n    Renderer.prototype.onOptionsChanged = function () {\n        var _this = this;\n        this.colorManager.allowTransparency = this._terminal.options.allowTransparency;\n        this._runOperation(function (l) { return l.onOptionsChanged(_this._terminal); });\n    };\n    Renderer.prototype.clear = function () {\n        var _this = this;\n        this._runOperation(function (l) { return l.reset(_this._terminal); });\n    };\n    Renderer.prototype._runOperation = function (operation) {\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n        }\n        else {\n            this._renderLayers.forEach(function (l) { return operation(l); });\n        }\n    };\n    Renderer.prototype.refreshRows = function (start, end) {\n        if (this._isPaused) {\n            this._needsFullRefresh = true;\n            return;\n        }\n        this._renderDebouncer.refresh(start, end);\n    };\n    Renderer.prototype._renderRows = function (start, end) {\n        var _this = this;\n        this._renderLayers.forEach(function (l) { return l.onGridChanged(_this._terminal, start, end); });\n        this._terminal.emit('refresh', { start: start, end: end });\n    };\n    Renderer.prototype._updateDimensions = function () {\n        if (!this._terminal.charMeasure.width || !this._terminal.charMeasure.height) {\n            return;\n        }\n        this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\n        this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\n        this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n        this.dimensions.scaledCharTop = this._terminal.options.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n        this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n        this.dimensions.scaledCharLeft = Math.floor(this._terminal.options.letterSpacing / 2);\n        this.dimensions.scaledCanvasHeight = this._terminal.rows * this.dimensions.scaledCellHeight;\n        this.dimensions.scaledCanvasWidth = this._terminal.cols * this.dimensions.scaledCellWidth;\n        this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n        this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n        this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n        this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n    };\n    Renderer.prototype.registerCharacterJoiner = function (handler) {\n        return this._characterJoinerRegistry.registerCharacterJoiner(handler);\n    };\n    Renderer.prototype.deregisterCharacterJoiner = function (joinerId) {\n        return this._characterJoinerRegistry.deregisterCharacterJoiner(joinerId);\n    };\n    return Renderer;\n}(EventEmitter_1.EventEmitter));\nexports.Renderer = Renderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar Types_1 = __webpack_require__(1);\nvar GridCache_1 = __webpack_require__(39);\nvar BaseRenderLayer_1 = __webpack_require__(8);\nvar CharAtlasUtils_1 = __webpack_require__(4);\nvar TextRenderLayer = (function (_super) {\n    __extends(TextRenderLayer, _super);\n    function TextRenderLayer(container, zIndex, colors, characterJoinerRegistry, alpha) {\n        var _this = _super.call(this, container, 'text', zIndex, alpha, colors) || this;\n        _this._characterOverlapCache = {};\n        _this._state = new GridCache_1.GridCache();\n        _this._characterJoinerRegistry = characterJoinerRegistry;\n        return _this;\n    }\n    TextRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        var terminalFont = this._getFont(terminal, false, false);\n        if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n            this._characterWidth = dim.scaledCharWidth;\n            this._characterFont = terminalFont;\n            this._characterOverlapCache = {};\n        }\n        this._state.clear();\n        this._state.resize(terminal.cols, terminal.rows);\n    };\n    TextRenderLayer.prototype.reset = function (terminal) {\n        this._state.clear();\n        this.clearAll();\n    };\n    TextRenderLayer.prototype._forEachCell = function (terminal, firstRow, lastRow, joinerRegistry, callback) {\n        for (var y = firstRow; y <= lastRow; y++) {\n            var row = y + terminal.buffer.ydisp;\n            var line = terminal.buffer.lines.get(row);\n            var joinedRanges = joinerRegistry ? joinerRegistry.getJoinedCharacters(row) : [];\n            for (var x = 0; x < terminal.cols; x++) {\n                var charData = line.get(x);\n                var code = charData[Buffer_1.CHAR_DATA_CODE_INDEX];\n                var chars = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\n                var attr = charData[Buffer_1.CHAR_DATA_ATTR_INDEX];\n                var width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n                var isJoined = false;\n                var lastCharX = x;\n                if (width === 0) {\n                    continue;\n                }\n                if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n                    isJoined = true;\n                    var range = joinedRanges.shift();\n                    chars = terminal.buffer.translateBufferLineToString(row, true, range[0], range[1]);\n                    width = range[1] - range[0];\n                    code = Infinity;\n                    lastCharX = range[1] - 1;\n                }\n                if (!isJoined && this._isOverlapping(charData)) {\n                    if (lastCharX < line.length - 1 && line.get(lastCharX + 1)[Buffer_1.CHAR_DATA_CODE_INDEX] === Buffer_1.NULL_CELL_CODE) {\n                        width = 2;\n                    }\n                }\n                var flags = attr >> 18;\n                var bg = attr & 0x1ff;\n                var fg = (attr >> 9) & 0x1ff;\n                if (flags & 8) {\n                    var temp = bg;\n                    bg = fg;\n                    fg = temp;\n                    if (fg === Types_1.DEFAULT_COLOR) {\n                        fg = Types_1.INVERTED_DEFAULT_COLOR;\n                    }\n                    if (bg === Types_1.DEFAULT_COLOR) {\n                        bg = Types_1.INVERTED_DEFAULT_COLOR;\n                    }\n                }\n                callback(code, chars, width, x, y, fg, bg, flags);\n                x = lastCharX;\n            }\n        }\n    };\n    TextRenderLayer.prototype._drawBackground = function (terminal, firstRow, lastRow) {\n        var _this = this;\n        var ctx = this._ctx;\n        var cols = terminal.cols;\n        var startX = 0;\n        var startY = 0;\n        var prevFillStyle = null;\n        ctx.save();\n        this._forEachCell(terminal, firstRow, lastRow, null, function (code, chars, width, x, y, fg, bg, flags) {\n            var nextFillStyle = null;\n            if (bg === Types_1.INVERTED_DEFAULT_COLOR) {\n                nextFillStyle = _this._colors.foreground.css;\n            }\n            else if (CharAtlasUtils_1.is256Color(bg)) {\n                nextFillStyle = _this._colors.ansi[bg].css;\n            }\n            if (prevFillStyle === null) {\n                startX = x;\n                startY = y;\n            }\n            if (y !== startY) {\n                ctx.fillStyle = prevFillStyle;\n                _this.fillCells(startX, startY, cols - startX, 1);\n                startX = x;\n                startY = y;\n            }\n            else if (prevFillStyle !== nextFillStyle) {\n                ctx.fillStyle = prevFillStyle;\n                _this.fillCells(startX, startY, x - startX, 1);\n                startX = x;\n                startY = y;\n            }\n            prevFillStyle = nextFillStyle;\n        });\n        if (prevFillStyle !== null) {\n            ctx.fillStyle = prevFillStyle;\n            this.fillCells(startX, startY, cols - startX, 1);\n        }\n        ctx.restore();\n    };\n    TextRenderLayer.prototype._drawForeground = function (terminal, firstRow, lastRow) {\n        var _this = this;\n        this._forEachCell(terminal, firstRow, lastRow, this._characterJoinerRegistry, function (code, chars, width, x, y, fg, bg, flags) {\n            if (flags & 16) {\n                return;\n            }\n            if (flags & 2) {\n                _this._ctx.save();\n                if (fg === Types_1.INVERTED_DEFAULT_COLOR) {\n                    _this._ctx.fillStyle = _this._colors.background.css;\n                }\n                else if (CharAtlasUtils_1.is256Color(fg)) {\n                    _this._ctx.fillStyle = _this._colors.ansi[fg].css;\n                }\n                else {\n                    _this._ctx.fillStyle = _this._colors.foreground.css;\n                }\n                _this.fillBottomLineAtCells(x, y, width);\n                _this._ctx.restore();\n            }\n            _this.drawChars(terminal, chars, code, width, x, y, fg, bg, !!(flags & 1), !!(flags & 32), !!(flags & 64));\n        });\n    };\n    TextRenderLayer.prototype.onGridChanged = function (terminal, firstRow, lastRow) {\n        if (this._state.cache.length === 0) {\n            return;\n        }\n        if (this._charAtlas) {\n            this._charAtlas.beginFrame();\n        }\n        this.clearCells(0, firstRow, terminal.cols, lastRow - firstRow + 1);\n        this._drawBackground(terminal, firstRow, lastRow);\n        this._drawForeground(terminal, firstRow, lastRow);\n    };\n    TextRenderLayer.prototype.onOptionsChanged = function (terminal) {\n        this.setTransparency(terminal, terminal.options.allowTransparency);\n    };\n    TextRenderLayer.prototype._isOverlapping = function (charData) {\n        if (charData[Buffer_1.CHAR_DATA_WIDTH_INDEX] !== 1) {\n            return false;\n        }\n        var code = charData[Buffer_1.CHAR_DATA_CODE_INDEX];\n        if (code < 256) {\n            return false;\n        }\n        var char = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\n        if (this._characterOverlapCache.hasOwnProperty(char)) {\n            return this._characterOverlapCache[char];\n        }\n        this._ctx.save();\n        this._ctx.font = this._characterFont;\n        var overlaps = Math.floor(this._ctx.measureText(char).width) > this._characterWidth;\n        this._ctx.restore();\n        this._characterOverlapCache[char] = overlaps;\n        return overlaps;\n    };\n    return TextRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.TextRenderLayer = TextRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar GridCache = (function () {\n    function GridCache() {\n        this.cache = [];\n    }\n    GridCache.prototype.resize = function (width, height) {\n        for (var x = 0; x < width; x++) {\n            if (this.cache.length <= x) {\n                this.cache.push([]);\n            }\n            for (var y = this.cache[x].length; y < height; y++) {\n                this.cache[x].push(null);\n            }\n            this.cache[x].length = height;\n        }\n        this.cache.length = width;\n    };\n    GridCache.prototype.clear = function () {\n        for (var x = 0; x < this.cache.length; x++) {\n            for (var y = 0; y < this.cache[x].length; y++) {\n                this.cache[x][y] = null;\n            }\n        }\n    };\n    return GridCache;\n}());\nexports.GridCache = GridCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL0dyaWRDYWNoZS50cz80OWYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0E7SUFHRTtRQUNFLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFTSwwQkFBTSxHQUFiLFVBQWMsS0FBYSxFQUFFLE1BQWM7UUFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDckI7WUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCO1lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFFTSx5QkFBSyxHQUFaO1FBQ0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDekI7U0FDRjtJQUNILENBQUM7SUFDSCxnQkFBQztBQUFELENBQUM7QUEzQlksOEJBQVMiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmV4cG9ydCBjbGFzcyBHcmlkQ2FjaGU8VD4ge1xuICBwdWJsaWMgY2FjaGU6IFRbXVtdO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhY2hlID0gW107XG4gIH1cblxuICBwdWJsaWMgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPD0geCkge1xuICAgICAgICB0aGlzLmNhY2hlLnB1c2goW10pO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgeSA9IHRoaXMuY2FjaGVbeF0ubGVuZ3RoOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgdGhpcy5jYWNoZVt4XS5wdXNoKG51bGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWNoZVt4XS5sZW5ndGggPSBoZWlnaHQ7XG4gICAgfVxuICAgIHRoaXMuY2FjaGUubGVuZ3RoID0gd2lkdGg7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLmNhY2hlLmxlbmd0aDsgeCsrKSB7XG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuY2FjaGVbeF0ubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgdGhpcy5jYWNoZVt4XVt5XSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL0dyaWRDYWNoZS50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(1);\nvar BaseCharAtlas_1 = __webpack_require__(10);\nvar ColorManager_1 = __webpack_require__(9);\nvar CharAtlasGenerator_1 = __webpack_require__(15);\nvar LRUMap_1 = __webpack_require__(41);\nvar Platform_1 = __webpack_require__(5);\nvar TEXTURE_WIDTH = 1024;\nvar TEXTURE_HEIGHT = 1024;\nvar TRANSPARENT_COLOR = {\n    css: 'rgba(0, 0, 0, 0)',\n    rgba: 0\n};\nvar FRAME_CACHE_DRAW_LIMIT = 100;\nvar GLYPH_BITMAP_COMMIT_DELAY = 100;\nfunction getGlyphCacheKey(glyph) {\n    return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\nexports.getGlyphCacheKey = getGlyphCacheKey;\nvar DynamicCharAtlas = (function (_super) {\n    __extends(DynamicCharAtlas, _super);\n    function DynamicCharAtlas(document, _config) {\n        var _this = _super.call(this) || this;\n        _this._config = _config;\n        _this._drawToCacheCount = 0;\n        _this._glyphsWaitingOnBitmap = [];\n        _this._bitmapCommitTimeout = null;\n        _this._bitmap = null;\n        _this._cacheCanvas = document.createElement('canvas');\n        _this._cacheCanvas.width = TEXTURE_WIDTH;\n        _this._cacheCanvas.height = TEXTURE_HEIGHT;\n        _this._cacheCtx = _this._cacheCanvas.getContext('2d', { alpha: true });\n        var tmpCanvas = document.createElement('canvas');\n        tmpCanvas.width = _this._config.scaledCharWidth;\n        tmpCanvas.height = _this._config.scaledCharHeight;\n        _this._tmpCtx = tmpCanvas.getContext('2d', { alpha: _this._config.allowTransparency });\n        _this._width = Math.floor(TEXTURE_WIDTH / _this._config.scaledCharWidth);\n        _this._height = Math.floor(TEXTURE_HEIGHT / _this._config.scaledCharHeight);\n        var capacity = _this._width * _this._height;\n        _this._cacheMap = new LRUMap_1.default(capacity);\n        _this._cacheMap.prealloc(capacity);\n        return _this;\n    }\n    DynamicCharAtlas.prototype.dispose = function () {\n        if (this._bitmapCommitTimeout !== null) {\n            window.clearTimeout(this._bitmapCommitTimeout);\n            this._bitmapCommitTimeout = null;\n        }\n    };\n    DynamicCharAtlas.prototype.beginFrame = function () {\n        this._drawToCacheCount = 0;\n    };\n    DynamicCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        if (glyph.code === 32) {\n            return true;\n        }\n        if (!this._canCache(glyph)) {\n            return false;\n        }\n        var glyphKey = getGlyphCacheKey(glyph);\n        var cacheValue = this._cacheMap.get(glyphKey);\n        if (cacheValue !== null && cacheValue !== undefined) {\n            this._drawFromCache(ctx, cacheValue, x, y);\n            return true;\n        }\n        else if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n            var index = void 0;\n            if (this._cacheMap.size < this._cacheMap.capacity) {\n                index = this._cacheMap.size;\n            }\n            else {\n                index = this._cacheMap.peek().index;\n            }\n            var cacheValue_1 = this._drawToCache(glyph, index);\n            this._cacheMap.set(glyphKey, cacheValue_1);\n            this._drawFromCache(ctx, cacheValue_1, x, y);\n            return true;\n        }\n        return false;\n    };\n    DynamicCharAtlas.prototype._canCache = function (glyph) {\n        return glyph.code < 256;\n    };\n    DynamicCharAtlas.prototype._toCoordinateX = function (index) {\n        return (index % this._width) * this._config.scaledCharWidth;\n    };\n    DynamicCharAtlas.prototype._toCoordinateY = function (index) {\n        return Math.floor(index / this._width) * this._config.scaledCharHeight;\n    };\n    DynamicCharAtlas.prototype._drawFromCache = function (ctx, cacheValue, x, y) {\n        if (cacheValue.isEmpty) {\n            return;\n        }\n        var cacheX = this._toCoordinateX(cacheValue.index);\n        var cacheY = this._toCoordinateY(cacheValue.index);\n        ctx.drawImage(cacheValue.inBitmap ? this._bitmap : this._cacheCanvas, cacheX, cacheY, this._config.scaledCharWidth, this._config.scaledCharHeight, x, y, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    };\n    DynamicCharAtlas.prototype._getColorFromAnsiIndex = function (idx) {\n        if (idx < this._config.colors.ansi.length) {\n            return this._config.colors.ansi[idx];\n        }\n        return ColorManager_1.DEFAULT_ANSI_COLORS[idx];\n    };\n    DynamicCharAtlas.prototype._getBackgroundColor = function (glyph) {\n        if (this._config.allowTransparency) {\n            return TRANSPARENT_COLOR;\n        }\n        else if (glyph.bg === Types_1.INVERTED_DEFAULT_COLOR) {\n            return this._config.colors.foreground;\n        }\n        else if (glyph.bg < 256) {\n            return this._getColorFromAnsiIndex(glyph.bg);\n        }\n        return this._config.colors.background;\n    };\n    DynamicCharAtlas.prototype._getForegroundColor = function (glyph) {\n        if (glyph.fg === Types_1.INVERTED_DEFAULT_COLOR) {\n            return this._config.colors.background;\n        }\n        else if (glyph.fg < 256) {\n            return this._getColorFromAnsiIndex(glyph.fg);\n        }\n        return this._config.colors.foreground;\n    };\n    DynamicCharAtlas.prototype._drawToCache = function (glyph, index) {\n        this._drawToCacheCount++;\n        this._tmpCtx.save();\n        var backgroundColor = this._getBackgroundColor(glyph);\n        this._tmpCtx.globalCompositeOperation = 'copy';\n        this._tmpCtx.fillStyle = backgroundColor.css;\n        this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n        this._tmpCtx.globalCompositeOperation = 'source-over';\n        var fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n        var fontStyle = glyph.italic ? 'italic' : '';\n        this._tmpCtx.font =\n            fontStyle + \" \" + fontWeight + \" \" + this._config.fontSize * this._config.devicePixelRatio + \"px \" + this._config.fontFamily;\n        this._tmpCtx.textBaseline = 'top';\n        this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n        if (glyph.dim) {\n            this._tmpCtx.globalAlpha = Types_1.DIM_OPACITY;\n        }\n        this._tmpCtx.fillText(glyph.chars, 0, 0);\n        this._tmpCtx.restore();\n        var imageData = this._tmpCtx.getImageData(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n        var isEmpty = false;\n        if (!this._config.allowTransparency) {\n            isEmpty = CharAtlasGenerator_1.clearColor(imageData, backgroundColor);\n        }\n        var x = this._toCoordinateX(index);\n        var y = this._toCoordinateY(index);\n        this._cacheCtx.putImageData(imageData, x, y);\n        var cacheValue = {\n            index: index,\n            isEmpty: isEmpty,\n            inBitmap: false\n        };\n        this._addGlyphToBitmap(cacheValue);\n        return cacheValue;\n    };\n    DynamicCharAtlas.prototype._addGlyphToBitmap = function (cacheValue) {\n        var _this = this;\n        if (!('createImageBitmap' in window) || Platform_1.isFirefox || Platform_1.isSafari) {\n            return;\n        }\n        this._glyphsWaitingOnBitmap.push(cacheValue);\n        if (this._bitmapCommitTimeout !== null) {\n            return;\n        }\n        this._bitmapCommitTimeout = window.setTimeout(function () { return _this._generateBitmap(); }, GLYPH_BITMAP_COMMIT_DELAY);\n    };\n    DynamicCharAtlas.prototype._generateBitmap = function () {\n        var _this = this;\n        var glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n        this._glyphsWaitingOnBitmap = [];\n        window.createImageBitmap(this._cacheCanvas).then(function (bitmap) {\n            _this._bitmap = bitmap;\n            for (var i = 0; i < glyphsMovingToBitmap.length; i++) {\n                var value = glyphsMovingToBitmap[i];\n                value.inBitmap = true;\n            }\n        });\n        this._bitmapCommitTimeout = null;\n    };\n    return DynamicCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = DynamicCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar LRUMap = (function () {\n    function LRUMap(capacity) {\n        this.capacity = capacity;\n        this._map = {};\n        this._head = null;\n        this._tail = null;\n        this._nodePool = [];\n        this.size = 0;\n    }\n    LRUMap.prototype._unlinkNode = function (node) {\n        var prev = node.prev;\n        var next = node.next;\n        if (node === this._head) {\n            this._head = next;\n        }\n        if (node === this._tail) {\n            this._tail = prev;\n        }\n        if (prev !== null) {\n            prev.next = next;\n        }\n        if (next !== null) {\n            next.prev = prev;\n        }\n    };\n    LRUMap.prototype._appendNode = function (node) {\n        var tail = this._tail;\n        if (tail !== null) {\n            tail.next = node;\n        }\n        node.prev = tail;\n        node.next = null;\n        this._tail = node;\n        if (this._head === null) {\n            this._head = node;\n        }\n    };\n    LRUMap.prototype.prealloc = function (count) {\n        var nodePool = this._nodePool;\n        for (var i = 0; i < count; i++) {\n            nodePool.push({\n                prev: null,\n                next: null,\n                key: null,\n                value: null\n            });\n        }\n    };\n    LRUMap.prototype.get = function (key) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            this._unlinkNode(node);\n            this._appendNode(node);\n            return node.value;\n        }\n        return null;\n    };\n    LRUMap.prototype.peekValue = function (key) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            return node.value;\n        }\n        return null;\n    };\n    LRUMap.prototype.peek = function () {\n        var head = this._head;\n        return head === null ? null : head.value;\n    };\n    LRUMap.prototype.set = function (key, value) {\n        var node = this._map[key];\n        if (node !== undefined) {\n            node = this._map[key];\n            this._unlinkNode(node);\n            node.value = value;\n        }\n        else if (this.size >= this.capacity) {\n            node = this._head;\n            this._unlinkNode(node);\n            delete this._map[node.key];\n            node.key = key;\n            node.value = value;\n            this._map[key] = node;\n        }\n        else {\n            var nodePool = this._nodePool;\n            if (nodePool.length > 0) {\n                node = nodePool.pop();\n                node.key = key;\n                node.value = value;\n            }\n            else {\n                node = {\n                    prev: null,\n                    next: null,\n                    key: key,\n                    value: value\n                };\n            }\n            this._map[key] = node;\n            this.size++;\n        }\n        this._appendNode(node);\n    };\n    return LRUMap;\n}());\nexports.default = LRUMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n')},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar BaseCharAtlas_1 = __webpack_require__(10);\nvar NoneCharAtlas = (function (_super) {\n    __extends(NoneCharAtlas, _super);\n    function NoneCharAtlas(document, config) {\n        return _super.call(this) || this;\n    }\n    NoneCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        return false;\n    };\n    return NoneCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = NoneCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL05vbmVDaGFyQXRsYXMudHM/YmNjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFRQSw4Q0FBNEM7QUFFNUM7SUFBMkMsaUNBQWE7SUFDdEQsdUJBQVksUUFBa0IsRUFBRSxNQUF3QjtlQUN0RCxpQkFBTztJQUNULENBQUM7SUFFTSw0QkFBSSxHQUFYLFVBQ0UsR0FBNkIsRUFDN0IsS0FBdUIsRUFDdkIsQ0FBUyxFQUNULENBQVM7UUFFVCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQ0FiMEMsdUJBQWEsR0FhdkQiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICpcbiAqIEEgZHVtbXkgQ2hhckF0bGFzIGltcGxlbWVudGF0aW9uIHRoYXQgYWx3YXlzIGZhaWxzIHRvIGRyYXcgY2hhcmFjdGVycy5cbiAqL1xuXG5pbXBvcnQgeyBJR2x5cGhJZGVudGlmaWVyLCBJQ2hhckF0bGFzQ29uZmlnIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgQmFzZUNoYXJBdGxhcyBmcm9tICcuL0Jhc2VDaGFyQXRsYXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb25lQ2hhckF0bGFzIGV4dGVuZHMgQmFzZUNoYXJBdGxhcyB7XG4gIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBEb2N1bWVudCwgY29uZmlnOiBJQ2hhckF0bGFzQ29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBkcmF3KFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIGdseXBoOiBJR2x5cGhJZGVudGlmaWVyLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL05vbmVDaGFyQXRsYXMudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = __webpack_require__(1);\nvar CharAtlasGenerator_1 = __webpack_require__(15);\nvar BaseCharAtlas_1 = __webpack_require__(10);\nvar CharAtlasUtils_1 = __webpack_require__(4);\nvar StaticCharAtlas = (function (_super) {\n    __extends(StaticCharAtlas, _super);\n    function StaticCharAtlas(_document, _config) {\n        var _this = _super.call(this) || this;\n        _this._document = _document;\n        _this._config = _config;\n        _this._canvasFactory = function (width, height) {\n            var canvas = _this._document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n        };\n        return _this;\n    }\n    StaticCharAtlas.prototype._doWarmUp = function () {\n        var _this = this;\n        var result = CharAtlasGenerator_1.generateStaticCharAtlasTexture(window, this._canvasFactory, this._config);\n        if (result instanceof HTMLCanvasElement) {\n            this._texture = result;\n        }\n        else {\n            result.then(function (texture) {\n                _this._texture = texture;\n            });\n        }\n    };\n    StaticCharAtlas.prototype._isCached = function (glyph, colorIndex) {\n        var isAscii = glyph.code < 256;\n        var isBasicColor = glyph.fg < 16;\n        var isDefaultColor = glyph.fg === Types_1.DEFAULT_COLOR;\n        var isDefaultBackground = glyph.bg === Types_1.DEFAULT_COLOR;\n        return isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground && !glyph.italic;\n    };\n    StaticCharAtlas.prototype.draw = function (ctx, glyph, x, y) {\n        if (this._texture === null || this._texture === undefined) {\n            return false;\n        }\n        var colorIndex = 0;\n        if (CharAtlasUtils_1.is256Color(glyph.fg)) {\n            colorIndex = 2 + glyph.fg + (glyph.bold ? 16 : 0);\n        }\n        else if (glyph.fg === Types_1.DEFAULT_COLOR) {\n            if (glyph.bold) {\n                colorIndex = 1;\n            }\n        }\n        if (!this._isCached(glyph, colorIndex)) {\n            return false;\n        }\n        ctx.save();\n        var charAtlasCellWidth = this._config.scaledCharWidth + Types_1.CHAR_ATLAS_CELL_SPACING;\n        var charAtlasCellHeight = this._config.scaledCharHeight + Types_1.CHAR_ATLAS_CELL_SPACING;\n        if (glyph.dim) {\n            ctx.globalAlpha = Types_1.DIM_OPACITY;\n        }\n        ctx.drawImage(this._texture, glyph.code * charAtlasCellWidth, colorIndex * charAtlasCellHeight, charAtlasCellWidth, this._config.scaledCharHeight, x, y, charAtlasCellWidth, this._config.scaledCharHeight);\n        ctx.restore();\n        return true;\n    };\n    return StaticCharAtlas;\n}(BaseCharAtlas_1.default));\nexports.default = StaticCharAtlas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL1N0YXRpY0NoYXJBdGxhcy50cz85ODVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHFDQUFrSDtBQUNsSCxtREFBc0U7QUFDdEUsOENBQTRDO0FBQzVDLDhDQUE4QztBQUU5QztJQUE2QyxtQ0FBYTtJQUd4RCx5QkFBb0IsU0FBbUIsRUFBVSxPQUF5QjtRQUExRSxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsZUFBUyxHQUFULFNBQVMsQ0FBVTtRQUFVLGFBQU8sR0FBUCxPQUFPLENBQWtCO1FBSWxFLG9CQUFjLEdBQUcsVUFBQyxLQUFhLEVBQUUsTUFBYztZQUNyRCxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNyQixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUt2QixPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDOztJQVhELENBQUM7SUFhUyxtQ0FBUyxHQUFuQjtRQUFBLGlCQVNDO1FBUkMsSUFBTSxNQUFNLEdBQUcsbURBQThCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pGLElBQUksTUFBTSxZQUFZLGlCQUFpQixFQUFFO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1NBQ3hCO2FBQU07WUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFPO2dCQUNqQixLQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVPLG1DQUFTLEdBQWpCLFVBQWtCLEtBQXVCLEVBQUUsVUFBa0I7UUFDM0QsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFFakMsSUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDbkMsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLEVBQUUsS0FBSyxxQkFBYSxDQUFDO1FBQ2xELElBQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLEVBQUUsS0FBSyxxQkFBYSxDQUFDO1FBQ3ZELE9BQU8sT0FBTyxJQUFJLENBQUMsWUFBWSxJQUFJLGNBQWMsQ0FBQyxJQUFJLG1CQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3RixDQUFDO0lBRU0sOEJBQUksR0FBWCxVQUNFLEdBQTZCLEVBQzdCLEtBQXVCLEVBQ3ZCLENBQVMsRUFDVCxDQUFTO1FBR1QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN6RCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksMkJBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEIsVUFBVSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUksS0FBSyxDQUFDLEVBQUUsS0FBSyxxQkFBYSxFQUFFO1lBRXJDLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDZCxVQUFVLEdBQUcsQ0FBQyxDQUFDO2FBQ2hCO1NBQ0Y7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDdEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUdYLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsK0JBQXVCLENBQUM7UUFDbEYsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLCtCQUF1QixDQUFDO1FBR3BGLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNiLEdBQUcsQ0FBQyxXQUFXLEdBQUcsbUJBQVcsQ0FBQztTQUMvQjtRQUVELEdBQUcsQ0FBQyxTQUFTLENBQ1gsSUFBSSxDQUFDLFFBQVEsRUFDYixLQUFLLENBQUMsSUFBSSxHQUFHLGtCQUFrQixFQUMvQixVQUFVLEdBQUcsbUJBQW1CLEVBQ2hDLGtCQUFrQixFQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUM3QixDQUFDLEVBQ0QsQ0FBQyxFQUNELGtCQUFrQixFQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUM5QixDQUFDO1FBRUYsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLENBekY0Qyx1QkFBYSxHQXlGekQiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgeHRlcm0uanMgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCB7IERJTV9PUEFDSVRZLCBJR2x5cGhJZGVudGlmaWVyLCBERUZBVUxUX0NPTE9SLCBJQ2hhckF0bGFzQ29uZmlnLCBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORyB9IGZyb20gJy4vVHlwZXMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVTdGF0aWNDaGFyQXRsYXNUZXh0dXJlIH0gZnJvbSAnLi9DaGFyQXRsYXNHZW5lcmF0b3InO1xuaW1wb3J0IEJhc2VDaGFyQXRsYXMgZnJvbSAnLi9CYXNlQ2hhckF0bGFzJztcbmltcG9ydCB7IGlzMjU2Q29sb3IgfSBmcm9tICcuL0NoYXJBdGxhc1V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljQ2hhckF0bGFzIGV4dGVuZHMgQmFzZUNoYXJBdGxhcyB7XG4gIHByaXZhdGUgX3RleHR1cmU6IEhUTUxDYW52YXNFbGVtZW50IHwgSW1hZ2VCaXRtYXA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50LCBwcml2YXRlIF9jb25maWc6IElDaGFyQXRsYXNDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2FudmFzRmFjdG9yeSA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvLyBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIHByb3RlY3RlZCBfZG9XYXJtVXAoKTogdm9pZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVTdGF0aWNDaGFyQXRsYXNUZXh0dXJlKHdpbmRvdywgdGhpcy5fY2FudmFzRmFjdG9yeSwgdGhpcy5fY29uZmlnKTtcbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgIHRoaXMuX3RleHR1cmUgPSByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC50aGVuKHRleHR1cmUgPT4ge1xuICAgICAgICB0aGlzLl90ZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2lzQ2FjaGVkKGdseXBoOiBJR2x5cGhJZGVudGlmaWVyLCBjb2xvckluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBpc0FzY2lpID0gZ2x5cGguY29kZSA8IDI1NjtcbiAgICAvLyBBIGNvbG9yIGlzIGJhc2ljIGlmIGl0IGlzIG9uZSBvZiB0aGUgNCBiaXQgQU5TSSBjb2xvcnMuXG4gICAgY29uc3QgaXNCYXNpY0NvbG9yID0gZ2x5cGguZmcgPCAxNjtcbiAgICBjb25zdCBpc0RlZmF1bHRDb2xvciA9IGdseXBoLmZnID09PSBERUZBVUxUX0NPTE9SO1xuICAgIGNvbnN0IGlzRGVmYXVsdEJhY2tncm91bmQgPSBnbHlwaC5iZyA9PT0gREVGQVVMVF9DT0xPUjtcbiAgICByZXR1cm4gaXNBc2NpaSAmJiAoaXNCYXNpY0NvbG9yIHx8IGlzRGVmYXVsdENvbG9yKSAmJiBpc0RlZmF1bHRCYWNrZ3JvdW5kICYmICFnbHlwaC5pdGFsaWM7XG4gIH1cblxuICBwdWJsaWMgZHJhdyhcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBnbHlwaDogSUdseXBoSWRlbnRpZmllcixcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIC8vIHdlJ3JlIG5vdCB3YXJtZWQgdXAgeWV0XG4gICAgaWYgKHRoaXMuX3RleHR1cmUgPT09IG51bGwgfHwgdGhpcy5fdGV4dHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGNvbG9ySW5kZXggPSAwO1xuICAgIGlmIChpczI1NkNvbG9yKGdseXBoLmZnKSkge1xuICAgICAgY29sb3JJbmRleCA9IDIgKyBnbHlwaC5mZyArIChnbHlwaC5ib2xkID8gMTYgOiAwKTtcbiAgICB9IGVsc2UgaWYgKGdseXBoLmZnID09PSBERUZBVUxUX0NPTE9SKSB7XG4gICAgICAvLyBJZiBkZWZhdWx0IGNvbG9yIGFuZCBib2xkXG4gICAgICBpZiAoZ2x5cGguYm9sZCkge1xuICAgICAgICBjb2xvckluZGV4ID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLl9pc0NhY2hlZChnbHlwaCwgY29sb3JJbmRleCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjdHguc2F2ZSgpO1xuXG4gICAgLy8gSW1hZ2VCaXRtYXAncyBkcmF3IGFib3V0IHR3aWNlIGFzIGZhc3QgYXMgZnJvbSBhIGNhbnZhc1xuICAgIGNvbnN0IGNoYXJBdGxhc0NlbGxXaWR0aCA9IHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGggKyBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcbiAgICBjb25zdCBjaGFyQXRsYXNDZWxsSGVpZ2h0ID0gdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQgKyBDSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcblxuICAgIC8vIEFwcGx5IGFscGhhIHRvIGRpbSB0aGUgY2hhcmFjdGVyXG4gICAgaWYgKGdseXBoLmRpbSkge1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gRElNX09QQUNJVFk7XG4gICAgfVxuXG4gICAgY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMuX3RleHR1cmUsXG4gICAgICBnbHlwaC5jb2RlICogY2hhckF0bGFzQ2VsbFdpZHRoLFxuICAgICAgY29sb3JJbmRleCAqIGNoYXJBdGxhc0NlbGxIZWlnaHQsXG4gICAgICBjaGFyQXRsYXNDZWxsV2lkdGgsXG4gICAgICB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgY2hhckF0bGFzQ2VsbFdpZHRoLFxuICAgICAgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHRcbiAgICApO1xuXG4gICAgY3R4LnJlc3RvcmUoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL2F0bGFzL1N0YXRpY0NoYXJBdGxhcy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseRenderLayer_1 = __webpack_require__(8);\nvar SelectionRenderLayer = (function (_super) {\n    __extends(SelectionRenderLayer, _super);\n    function SelectionRenderLayer(container, zIndex, colors) {\n        var _this = _super.call(this, container, 'selection', zIndex, true, colors) || this;\n        _this._clearState();\n        return _this;\n    }\n    SelectionRenderLayer.prototype._clearState = function () {\n        this._state = {\n            start: null,\n            end: null,\n            columnSelectMode: null,\n            ydisp: null\n        };\n    };\n    SelectionRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._clearState();\n    };\n    SelectionRenderLayer.prototype.reset = function (terminal) {\n        if (this._state.start && this._state.end) {\n            this._clearState();\n            this.clearAll();\n        }\n    };\n    SelectionRenderLayer.prototype.onSelectionChanged = function (terminal, start, end, columnSelectMode) {\n        if (!this._didStateChange(start, end, columnSelectMode, terminal.buffer.ydisp)) {\n            return;\n        }\n        this.clearAll();\n        if (!start || !end) {\n            return;\n        }\n        var viewportStartRow = start[1] - terminal.buffer.ydisp;\n        var viewportEndRow = end[1] - terminal.buffer.ydisp;\n        var viewportCappedStartRow = Math.max(viewportStartRow, 0);\n        var viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n        if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n            return;\n        }\n        this._ctx.fillStyle = this._colors.selection.css;\n        if (columnSelectMode) {\n            var startCol = start[0];\n            var width = end[0] - startCol;\n            var height = viewportCappedEndRow - viewportCappedStartRow + 1;\n            this.fillCells(startCol, viewportCappedStartRow, width, height);\n        }\n        else {\n            var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n            var startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\n            this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n            var middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n            this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\n            if (viewportCappedStartRow !== viewportCappedEndRow) {\n                var endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\n                this.fillCells(0, viewportCappedEndRow, endCol, 1);\n            }\n        }\n        this._state.start = [start[0], start[1]];\n        this._state.end = [end[0], end[1]];\n        this._state.columnSelectMode = columnSelectMode;\n        this._state.ydisp = terminal.buffer.ydisp;\n    };\n    SelectionRenderLayer.prototype._didStateChange = function (start, end, columnSelectMode, ydisp) {\n        return !this._areCoordinatesEqual(start, this._state.start) ||\n            !this._areCoordinatesEqual(end, this._state.end) ||\n            columnSelectMode !== this._state.columnSelectMode ||\n            ydisp !== this._state.ydisp;\n    };\n    SelectionRenderLayer.prototype._areCoordinatesEqual = function (coord1, coord2) {\n        if (!coord1 || !coord2) {\n            return false;\n        }\n        return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n    };\n    return SelectionRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.SelectionRenderLayer = SelectionRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar BaseRenderLayer_1 = __webpack_require__(8);\nvar BLINK_INTERVAL = 600;\nvar CursorRenderLayer = (function (_super) {\n    __extends(CursorRenderLayer, _super);\n    function CursorRenderLayer(container, zIndex, colors) {\n        var _this = _super.call(this, container, 'cursor', zIndex, true, colors) || this;\n        _this._state = {\n            x: null,\n            y: null,\n            isFocused: null,\n            style: null,\n            width: null\n        };\n        _this._cursorRenderers = {\n            'bar': _this._renderBarCursor.bind(_this),\n            'block': _this._renderBlockCursor.bind(_this),\n            'underline': _this._renderUnderlineCursor.bind(_this)\n        };\n        return _this;\n    }\n    CursorRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._state = {\n            x: null,\n            y: null,\n            isFocused: null,\n            style: null,\n            width: null\n        };\n    };\n    CursorRenderLayer.prototype.reset = function (terminal) {\n        this._clearCursor();\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.dispose();\n            this._cursorBlinkStateManager = null;\n            this.onOptionsChanged(terminal);\n        }\n    };\n    CursorRenderLayer.prototype.onBlur = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.pause();\n        }\n        terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    };\n    CursorRenderLayer.prototype.onFocus = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.resume(terminal);\n        }\n        else {\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n        }\n    };\n    CursorRenderLayer.prototype.onOptionsChanged = function (terminal) {\n        var _this = this;\n        if (terminal.options.cursorBlink) {\n            if (!this._cursorBlinkStateManager) {\n                this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, function () {\n                    _this._render(terminal, true);\n                });\n            }\n        }\n        else {\n            if (this._cursorBlinkStateManager) {\n                this._cursorBlinkStateManager.dispose();\n                this._cursorBlinkStateManager = null;\n            }\n            terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n        }\n    };\n    CursorRenderLayer.prototype.onCursorMove = function (terminal) {\n        if (this._cursorBlinkStateManager) {\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n        }\n    };\n    CursorRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {\n        if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n            this._render(terminal, false);\n        }\n        else {\n            this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n        }\n    };\n    CursorRenderLayer.prototype._render = function (terminal, triggeredByAnimationFrame) {\n        if (!terminal.cursorState || terminal.cursorHidden) {\n            this._clearCursor();\n            return;\n        }\n        var cursorY = terminal.buffer.ybase + terminal.buffer.y;\n        var viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\n        if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n            this._clearCursor();\n            return;\n        }\n        var charData = terminal.buffer.lines.get(cursorY).get(terminal.buffer.x);\n        if (!charData) {\n            return;\n        }\n        if (!terminal.isFocused) {\n            this._clearCursor();\n            this._ctx.save();\n            this._ctx.fillStyle = this._colors.cursor.css;\n            this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n            this._ctx.restore();\n            this._state.x = terminal.buffer.x;\n            this._state.y = viewportRelativeCursorY;\n            this._state.isFocused = false;\n            this._state.style = terminal.options.cursorStyle;\n            this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n            return;\n        }\n        if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n            this._clearCursor();\n            return;\n        }\n        if (this._state) {\n            if (this._state.x === terminal.buffer.x &&\n                this._state.y === viewportRelativeCursorY &&\n                this._state.isFocused === terminal.isFocused &&\n                this._state.style === terminal.options.cursorStyle &&\n                this._state.width === charData[Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\n                return;\n            }\n            this._clearCursor();\n        }\n        this._ctx.save();\n        this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n        this._ctx.restore();\n        this._state.x = terminal.buffer.x;\n        this._state.y = viewportRelativeCursorY;\n        this._state.isFocused = false;\n        this._state.style = terminal.options.cursorStyle;\n        this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n    };\n    CursorRenderLayer.prototype._clearCursor = function () {\n        if (this._state) {\n            this.clearCells(this._state.x, this._state.y, this._state.width, 1);\n            this._state = {\n                x: null,\n                y: null,\n                isFocused: null,\n                style: null,\n                width: null\n            };\n        }\n    };\n    CursorRenderLayer.prototype._renderBarCursor = function (terminal, x, y, charData) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillLeftLineAtCell(x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderBlockCursor = function (terminal, x, y, charData) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillCells(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\n        this._ctx.fillStyle = this._colors.cursorAccent.css;\n        this.fillCharTrueColor(terminal, charData, x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderUnderlineCursor = function (terminal, x, y, charData) {\n        this._ctx.save();\n        this._ctx.fillStyle = this._colors.cursor.css;\n        this.fillBottomLineAtCells(x, y);\n        this._ctx.restore();\n    };\n    CursorRenderLayer.prototype._renderBlurCursor = function (terminal, x, y, charData) {\n        this._ctx.save();\n        this._ctx.strokeStyle = this._colors.cursor.css;\n        this.strokeRectAtCell(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\n        this._ctx.restore();\n    };\n    return CursorRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.CursorRenderLayer = CursorRenderLayer;\nvar CursorBlinkStateManager = (function () {\n    function CursorBlinkStateManager(terminal, _renderCallback) {\n        this._renderCallback = _renderCallback;\n        this.isCursorVisible = true;\n        if (terminal.isFocused) {\n            this._restartInterval();\n        }\n    }\n    Object.defineProperty(CursorBlinkStateManager.prototype, \"isPaused\", {\n        get: function () { return !(this._blinkStartTimeout || this._blinkInterval); },\n        enumerable: true,\n        configurable: true\n    });\n    CursorBlinkStateManager.prototype.dispose = function () {\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n            this._blinkInterval = null;\n        }\n        if (this._blinkStartTimeout) {\n            window.clearTimeout(this._blinkStartTimeout);\n            this._blinkStartTimeout = null;\n        }\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = null;\n        }\n    };\n    CursorBlinkStateManager.prototype.restartBlinkAnimation = function (terminal) {\n        var _this = this;\n        if (this.isPaused) {\n            return;\n        }\n        this._animationTimeRestarted = Date.now();\n        this.isCursorVisible = true;\n        if (!this._animationFrame) {\n            this._animationFrame = window.requestAnimationFrame(function () {\n                _this._renderCallback();\n                _this._animationFrame = null;\n            });\n        }\n    };\n    CursorBlinkStateManager.prototype._restartInterval = function (timeToStart) {\n        var _this = this;\n        if (timeToStart === void 0) { timeToStart = BLINK_INTERVAL; }\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n        }\n        this._blinkStartTimeout = setTimeout(function () {\n            if (_this._animationTimeRestarted) {\n                var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n                _this._animationTimeRestarted = null;\n                if (time > 0) {\n                    _this._restartInterval(time);\n                    return;\n                }\n            }\n            _this.isCursorVisible = false;\n            _this._animationFrame = window.requestAnimationFrame(function () {\n                _this._renderCallback();\n                _this._animationFrame = null;\n            });\n            _this._blinkInterval = setInterval(function () {\n                if (_this._animationTimeRestarted) {\n                    var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n                    _this._animationTimeRestarted = null;\n                    _this._restartInterval(time);\n                    return;\n                }\n                _this.isCursorVisible = !_this.isCursorVisible;\n                _this._animationFrame = window.requestAnimationFrame(function () {\n                    _this._renderCallback();\n                    _this._animationFrame = null;\n                });\n            }, BLINK_INTERVAL);\n        }, timeToStart);\n    };\n    CursorBlinkStateManager.prototype.pause = function () {\n        this.isCursorVisible = true;\n        if (this._blinkInterval) {\n            window.clearInterval(this._blinkInterval);\n            this._blinkInterval = null;\n        }\n        if (this._blinkStartTimeout) {\n            window.clearTimeout(this._blinkStartTimeout);\n            this._blinkStartTimeout = null;\n        }\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n            this._animationFrame = null;\n        }\n    };\n    CursorBlinkStateManager.prototype.resume = function (terminal) {\n        this._animationTimeRestarted = null;\n        this._restartInterval();\n        this.restartBlinkAnimation(terminal);\n    };\n    return CursorBlinkStateManager;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar BaseRenderLayer_1 = __webpack_require__(8);\nvar Types_1 = __webpack_require__(1);\nvar CharAtlasUtils_1 = __webpack_require__(4);\nvar LinkRenderLayer = (function (_super) {\n    __extends(LinkRenderLayer, _super);\n    function LinkRenderLayer(container, zIndex, colors, terminal) {\n        var _this = _super.call(this, container, \'link\', zIndex, true, colors) || this;\n        _this._state = null;\n        terminal.linkifier.on("linkhover", function (e) { return _this._onLinkHover(e); });\n        terminal.linkifier.on("linkleave", function (e) { return _this._onLinkLeave(e); });\n        return _this;\n    }\n    LinkRenderLayer.prototype.resize = function (terminal, dim) {\n        _super.prototype.resize.call(this, terminal, dim);\n        this._state = null;\n    };\n    LinkRenderLayer.prototype.reset = function (terminal) {\n        this._clearCurrentLink();\n    };\n    LinkRenderLayer.prototype._clearCurrentLink = function () {\n        if (this._state) {\n            this.clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n            var middleRowCount = this._state.y2 - this._state.y1 - 1;\n            if (middleRowCount > 0) {\n                this.clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n            }\n            this.clearCells(0, this._state.y2, this._state.x2, 1);\n            this._state = null;\n        }\n    };\n    LinkRenderLayer.prototype._onLinkHover = function (e) {\n        if (e.fg === Types_1.INVERTED_DEFAULT_COLOR) {\n            this._ctx.fillStyle = this._colors.background.css;\n        }\n        else if (CharAtlasUtils_1.is256Color(e.fg)) {\n            this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n        }\n        else {\n            this._ctx.fillStyle = this._colors.foreground.css;\n        }\n        if (e.y1 === e.y2) {\n            this.fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n        }\n        else {\n            this.fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n            for (var y = e.y1 + 1; y < e.y2; y++) {\n                this.fillBottomLineAtCells(0, y, e.cols);\n            }\n            this.fillBottomLineAtCells(0, e.y2, e.x2);\n        }\n        this._state = e;\n    };\n    LinkRenderLayer.prototype._onLinkLeave = function (e) {\n        this._clearCurrentLink();\n    };\n    return LinkRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer));\nexports.LinkRenderLayer = LinkRenderLayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL0xpbmtSZW5kZXJMYXllci50cz9lYjU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQU9BLCtDQUFvRDtBQUNwRCxxQ0FBdUQ7QUFDdkQsOENBQW9EO0FBRXBEO0lBQXFDLG1DQUFlO0lBR2xELHlCQUFZLFNBQXNCLEVBQUUsTUFBYyxFQUFFLE1BQWlCLEVBQUUsUUFBNEI7UUFBbkcsWUFDRSxrQkFBTSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBRy9DO1FBTk8sWUFBTSxHQUFvQixJQUFJLENBQUM7UUFJckMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGNBQTRCLFVBQUMsQ0FBa0IsSUFBSyxZQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUM7UUFDL0YsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGNBQTRCLFVBQUMsQ0FBa0IsSUFBSyxZQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUM7O0lBQ2pHLENBQUM7SUFFTSxnQ0FBTSxHQUFiLFVBQWMsUUFBbUIsRUFBRSxHQUFzQjtRQUN2RCxpQkFBTSxNQUFNLFlBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSwrQkFBSyxHQUFaLFVBQWEsUUFBbUI7UUFDOUIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLDJDQUFpQixHQUF6QjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEYsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzNELElBQUksY0FBYyxHQUFHLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO2FBQzFFO1lBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRU8sc0NBQVksR0FBcEIsVUFBcUIsQ0FBa0I7UUFDckMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLDhCQUFzQixFQUFFO1lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztTQUNuRDthQUFNLElBQUksMkJBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFFM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUNuRDthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFFakIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBRUwsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUM7WUFDRCxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVPLHNDQUFZLEdBQXBCLFVBQXFCLENBQWtCO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQ0ExRG9DLGlDQUFlLEdBMERuRDtBQTFEWSwwQ0FBZSIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuaW1wb3J0IHsgSUxpbmtIb3ZlckV2ZW50LCBJVGVybWluYWwsIElMaW5raWZpZXJBY2Nlc3NvciwgTGlua0hvdmVyRXZlbnRUeXBlcyB9IGZyb20gJy4uL1R5cGVzJztcbmltcG9ydCB7IElDb2xvclNldCwgSVJlbmRlckRpbWVuc2lvbnMgfSBmcm9tICcuL1R5cGVzJztcbmltcG9ydCB7IEJhc2VSZW5kZXJMYXllciB9IGZyb20gJy4vQmFzZVJlbmRlckxheWVyJztcbmltcG9ydCB7IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IgfSBmcm9tICcuL2F0bGFzL1R5cGVzJztcbmltcG9ydCB7IGlzMjU2Q29sb3IgfSBmcm9tICcuL2F0bGFzL0NoYXJBdGxhc1V0aWxzJztcblxuZXhwb3J0IGNsYXNzIExpbmtSZW5kZXJMYXllciBleHRlbmRzIEJhc2VSZW5kZXJMYXllciB7XG4gIHByaXZhdGUgX3N0YXRlOiBJTGlua0hvdmVyRXZlbnQgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHpJbmRleDogbnVtYmVyLCBjb2xvcnM6IElDb2xvclNldCwgdGVybWluYWw6IElMaW5raWZpZXJBY2Nlc3Nvcikge1xuICAgIHN1cGVyKGNvbnRhaW5lciwgJ2xpbmsnLCB6SW5kZXgsIHRydWUsIGNvbG9ycyk7XG4gICAgdGVybWluYWwubGlua2lmaWVyLm9uKExpbmtIb3ZlckV2ZW50VHlwZXMuSE9WRVIsIChlOiBJTGlua0hvdmVyRXZlbnQpID0+IHRoaXMuX29uTGlua0hvdmVyKGUpKTtcbiAgICB0ZXJtaW5hbC5saW5raWZpZXIub24oTGlua0hvdmVyRXZlbnRUeXBlcy5MRUFWRSwgKGU6IElMaW5rSG92ZXJFdmVudCkgPT4gdGhpcy5fb25MaW5rTGVhdmUoZSkpO1xuICB9XG5cbiAgcHVibGljIHJlc2l6ZSh0ZXJtaW5hbDogSVRlcm1pbmFsLCBkaW06IElSZW5kZXJEaW1lbnNpb25zKTogdm9pZCB7XG4gICAgc3VwZXIucmVzaXplKHRlcm1pbmFsLCBkaW0pO1xuICAgIC8vIFJlc2l6aW5nIHRoZSBjYW52YXMgZGlzY2FyZHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBjYW52YXMgc28gY2xlYXIgc3RhdGVcbiAgICB0aGlzLl9zdGF0ZSA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQodGVybWluYWw6IElUZXJtaW5hbCk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyQ3VycmVudExpbmsoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NsZWFyQ3VycmVudExpbmsoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICB0aGlzLmNsZWFyQ2VsbHModGhpcy5fc3RhdGUueDEsIHRoaXMuX3N0YXRlLnkxLCB0aGlzLl9zdGF0ZS5jb2xzIC0gdGhpcy5fc3RhdGUueDEsIDEpO1xuICAgICAgY29uc3QgbWlkZGxlUm93Q291bnQgPSB0aGlzLl9zdGF0ZS55MiAtIHRoaXMuX3N0YXRlLnkxIC0gMTtcbiAgICAgIGlmIChtaWRkbGVSb3dDb3VudCA+IDApIHtcbiAgICAgICAgdGhpcy5jbGVhckNlbGxzKDAsIHRoaXMuX3N0YXRlLnkxICsgMSwgdGhpcy5fc3RhdGUuY29scywgbWlkZGxlUm93Q291bnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGVhckNlbGxzKDAsIHRoaXMuX3N0YXRlLnkyLCB0aGlzLl9zdGF0ZS54MiwgMSk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfb25MaW5rSG92ZXIoZTogSUxpbmtIb3ZlckV2ZW50KTogdm9pZCB7XG4gICAgaWYgKGUuZmcgPT09IElOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYmFja2dyb3VuZC5jc3M7XG4gICAgfSBlbHNlIGlmIChpczI1NkNvbG9yKGUuZmcpKSB7XG4gICAgICAvLyAyNTYgY29sb3Igc3VwcG9ydFxuICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5hbnNpW2UuZmddLmNzcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICB9XG5cbiAgICBpZiAoZS55MSA9PT0gZS55Mikge1xuICAgICAgLy8gU2luZ2xlIGxpbmUgbGlua1xuICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoZS54MSwgZS55MSwgZS54MiAtIGUueDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNdWx0aS1saW5lIGxpbmtcbiAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKGUueDEsIGUueTEsIGUuY29scyAtIGUueDEpO1xuICAgICAgZm9yIChsZXQgeSA9IGUueTEgKyAxOyB5IDwgZS55MjsgeSsrKSB7XG4gICAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKDAsIHksIGUuY29scyk7XG4gICAgICB9XG4gICAgICB0aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscygwLCBlLnkyLCBlLngyKTtcbiAgICB9XG4gICAgdGhpcy5fc3RhdGUgPSBlO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25MaW5rTGVhdmUoZTogSUxpbmtIb3ZlckV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fY2xlYXJDdXJyZW50TGluaygpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3JlbmRlcmVyL0xpbmtSZW5kZXJMYXllci50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar CharacterJoinerRegistry = (function () {\n    function CharacterJoinerRegistry(_terminal) {\n        this._terminal = _terminal;\n        this._characterJoiners = [];\n        this._nextCharacterJoinerId = 0;\n    }\n    CharacterJoinerRegistry.prototype.registerCharacterJoiner = function (handler) {\n        var joiner = {\n            id: this._nextCharacterJoinerId++,\n            handler: handler\n        };\n        this._characterJoiners.push(joiner);\n        return joiner.id;\n    };\n    CharacterJoinerRegistry.prototype.deregisterCharacterJoiner = function (joinerId) {\n        for (var i = 0; i < this._characterJoiners.length; i++) {\n            if (this._characterJoiners[i].id === joinerId) {\n                this._characterJoiners.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    CharacterJoinerRegistry.prototype.getJoinedCharacters = function (row) {\n        if (this._characterJoiners.length === 0) {\n            return [];\n        }\n        var line = this._terminal.buffer.lines.get(row);\n        if (line.length === 0) {\n            return [];\n        }\n        var ranges = [];\n        var lineStr = this._terminal.buffer.translateBufferLineToString(row, true);\n        var rangeStartColumn = 0;\n        var currentStringIndex = 0;\n        var rangeStartStringIndex = 0;\n        var rangeAttr = line.get(0)[Buffer_1.CHAR_DATA_ATTR_INDEX] >> 9;\n        for (var x = 0; x < this._terminal.cols; x++) {\n            var charData = line.get(x);\n            var chars = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\n            var width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n            var attr = charData[Buffer_1.CHAR_DATA_ATTR_INDEX] >> 9;\n            if (width === 0) {\n                continue;\n            }\n            if (attr !== rangeAttr) {\n                if (x - rangeStartColumn > 1) {\n                    var joinedRanges = this._getJoinedRanges(lineStr, rangeStartStringIndex, currentStringIndex, line, rangeStartColumn);\n                    for (var i = 0; i < joinedRanges.length; i++) {\n                        ranges.push(joinedRanges[i]);\n                    }\n                }\n                rangeStartColumn = x;\n                rangeStartStringIndex = currentStringIndex;\n                rangeAttr = attr;\n            }\n            currentStringIndex += chars.length;\n        }\n        if (this._terminal.cols - rangeStartColumn > 1) {\n            var joinedRanges = this._getJoinedRanges(lineStr, rangeStartStringIndex, currentStringIndex, line, rangeStartColumn);\n            for (var i = 0; i < joinedRanges.length; i++) {\n                ranges.push(joinedRanges[i]);\n            }\n        }\n        return ranges;\n    };\n    CharacterJoinerRegistry.prototype._getJoinedRanges = function (line, startIndex, endIndex, lineData, startCol) {\n        var text = line.substring(startIndex, endIndex);\n        var joinedRanges = this._characterJoiners[0].handler(text);\n        for (var i = 1; i < this._characterJoiners.length; i++) {\n            var joinerRanges = this._characterJoiners[i].handler(text);\n            for (var j = 0; j < joinerRanges.length; j++) {\n                CharacterJoinerRegistry._mergeRanges(joinedRanges, joinerRanges[j]);\n            }\n        }\n        this._stringRangesToCellRanges(joinedRanges, lineData, startCol);\n        return joinedRanges;\n    };\n    CharacterJoinerRegistry.prototype._stringRangesToCellRanges = function (ranges, line, startCol) {\n        var currentRangeIndex = 0;\n        var currentRangeStarted = false;\n        var currentStringIndex = 0;\n        var currentRange = ranges[currentRangeIndex];\n        if (!currentRange) {\n            return;\n        }\n        for (var x = startCol; x < this._terminal.cols; x++) {\n            var charData = line.get(x);\n            var width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n            var length_1 = charData[Buffer_1.CHAR_DATA_CHAR_INDEX].length;\n            if (width === 0) {\n                continue;\n            }\n            if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n                currentRange[0] = x;\n                currentRangeStarted = true;\n            }\n            if (currentRange[1] <= currentStringIndex) {\n                currentRange[1] = x;\n                currentRange = ranges[++currentRangeIndex];\n                if (!currentRange) {\n                    break;\n                }\n                if (currentRange[0] <= currentStringIndex) {\n                    currentRange[0] = x;\n                    currentRangeStarted = true;\n                }\n                else {\n                    currentRangeStarted = false;\n                }\n            }\n            currentStringIndex += length_1;\n        }\n        if (currentRange) {\n            currentRange[1] = this._terminal.cols;\n        }\n    };\n    CharacterJoinerRegistry._mergeRanges = function (ranges, newRange) {\n        var inRange = false;\n        for (var i = 0; i < ranges.length; i++) {\n            var range = ranges[i];\n            if (!inRange) {\n                if (newRange[1] <= range[0]) {\n                    ranges.splice(i, 0, newRange);\n                    return ranges;\n                }\n                if (newRange[1] <= range[1]) {\n                    range[0] = Math.min(newRange[0], range[0]);\n                    return ranges;\n                }\n                if (newRange[0] < range[1]) {\n                    range[0] = Math.min(newRange[0], range[0]);\n                    inRange = true;\n                }\n                continue;\n            }\n            else {\n                if (newRange[1] <= range[0]) {\n                    ranges[i - 1][1] = newRange[1];\n                    return ranges;\n                }\n                if (newRange[1] <= range[1]) {\n                    ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n                    ranges.splice(i, 1);\n                    inRange = false;\n                    return ranges;\n                }\n                ranges.splice(i, 1);\n                i--;\n            }\n        }\n        if (inRange) {\n            ranges[ranges.length - 1][1] = newRange[1];\n        }\n        else {\n            ranges.push(newRange);\n        }\n        return ranges;\n    };\n    return CharacterJoinerRegistry;\n}());\nexports.CharacterJoinerRegistry = CharacterJoinerRegistry;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseZoneManager_1 = __webpack_require__(17);\nvar EventEmitter_1 = __webpack_require__(2);\nvar Buffer_1 = __webpack_require__(0);\nvar CharWidth_1 = __webpack_require__(13);\nvar Linkifier = (function (_super) {\n    __extends(Linkifier, _super);\n    function Linkifier(_terminal) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._linkMatchers = [];\n        _this._nextLinkMatcherId = 0;\n        _this._rowsToLinkify = {\n            start: null,\n            end: null\n        };\n        return _this;\n    }\n    Linkifier.prototype.attachToDom = function (mouseZoneManager) {\n        this._mouseZoneManager = mouseZoneManager;\n    };\n    Linkifier.prototype.linkifyRows = function (start, end) {\n        var _this = this;\n        if (!this._mouseZoneManager) {\n            return;\n        }\n        if (this._rowsToLinkify.start === null) {\n            this._rowsToLinkify.start = start;\n            this._rowsToLinkify.end = end;\n        }\n        else {\n            this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n            this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n        }\n        this._mouseZoneManager.clearAll(start, end);\n        if (this._rowsTimeoutId) {\n            clearTimeout(this._rowsTimeoutId);\n        }\n        this._rowsTimeoutId = setTimeout(function () { return _this._linkifyRows(); }, Linkifier.TIME_BEFORE_LINKIFY);\n    };\n    Linkifier.prototype._linkifyRows = function () {\n        this._rowsTimeoutId = null;\n        var buffer = this._terminal.buffer;\n        var absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\n        if (absoluteRowIndexStart >= buffer.lines.length) {\n            return;\n        }\n        var absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._terminal.rows) + 1;\n        var overscanLineLimit = Math.ceil(Linkifier.OVERSCAN_CHAR_LIMIT / this._terminal.cols);\n        var iterator = this._terminal.buffer.iterator(false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\n        while (iterator.hasNext()) {\n            var lineData = iterator.next();\n            for (var i = 0; i < this._linkMatchers.length; i++) {\n                this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\n            }\n        }\n        this._rowsToLinkify.start = null;\n        this._rowsToLinkify.end = null;\n    };\n    Linkifier.prototype.registerLinkMatcher = function (regex, handler, options) {\n        if (options === void 0) { options = {}; }\n        if (!handler) {\n            throw new Error('handler must be defined');\n        }\n        var matcher = {\n            id: this._nextLinkMatcherId++,\n            regex: regex,\n            handler: handler,\n            matchIndex: options.matchIndex,\n            validationCallback: options.validationCallback,\n            hoverTooltipCallback: options.tooltipCallback,\n            hoverLeaveCallback: options.leaveCallback,\n            willLinkActivate: options.willLinkActivate,\n            priority: options.priority || 0\n        };\n        this._addLinkMatcherToList(matcher);\n        return matcher.id;\n    };\n    Linkifier.prototype._addLinkMatcherToList = function (matcher) {\n        if (this._linkMatchers.length === 0) {\n            this._linkMatchers.push(matcher);\n            return;\n        }\n        for (var i = this._linkMatchers.length - 1; i >= 0; i--) {\n            if (matcher.priority <= this._linkMatchers[i].priority) {\n                this._linkMatchers.splice(i + 1, 0, matcher);\n                return;\n            }\n        }\n        this._linkMatchers.splice(0, 0, matcher);\n    };\n    Linkifier.prototype.deregisterLinkMatcher = function (matcherId) {\n        for (var i = 0; i < this._linkMatchers.length; i++) {\n            if (this._linkMatchers[i].id === matcherId) {\n                this._linkMatchers.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    Linkifier.prototype._doLinkifyRow = function (rowIndex, text, matcher) {\n        var _this = this;\n        var rex = new RegExp(matcher.regex.source, matcher.regex.flags + 'g');\n        var match;\n        var stringIndex = -1;\n        var _loop_1 = function () {\n            var uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n            if (!uri) {\n                if (this_1._terminal.debug) {\n                    console.log({ match: match, matcher: matcher });\n                    throw new Error('match found without corresponding matchIndex');\n                }\n                return \"break\";\n            }\n            stringIndex = text.indexOf(uri, stringIndex + 1);\n            rex.lastIndex = stringIndex + uri.length;\n            var bufferIndex = this_1._terminal.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\n            var line = this_1._terminal.buffer.lines.get(bufferIndex[0]);\n            var char = line.get(bufferIndex[1]);\n            var fg;\n            if (char) {\n                var attr = char[Buffer_1.CHAR_DATA_ATTR_INDEX];\n                fg = (attr >> 9) & 0x1ff;\n            }\n            if (matcher.validationCallback) {\n                matcher.validationCallback(uri, function (isValid) {\n                    if (_this._rowsTimeoutId) {\n                        return;\n                    }\n                    if (isValid) {\n                        _this._addLink(bufferIndex[1], bufferIndex[0] - _this._terminal.buffer.ydisp, uri, matcher, fg);\n                    }\n                });\n            }\n            else {\n                this_1._addLink(bufferIndex[1], bufferIndex[0] - this_1._terminal.buffer.ydisp, uri, matcher, fg);\n            }\n        };\n        var this_1 = this;\n        while ((match = rex.exec(text)) !== null) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    Linkifier.prototype._addLink = function (x, y, uri, matcher, fg) {\n        var _this = this;\n        var width = CharWidth_1.getStringCellWidth(uri);\n        var x1 = x % this._terminal.cols;\n        var y1 = y + Math.floor(x / this._terminal.cols);\n        var x2 = (x1 + width) % this._terminal.cols;\n        var y2 = y1 + Math.floor((x1 + width) / this._terminal.cols);\n        if (x2 === 0) {\n            x2 = this._terminal.cols;\n            y2--;\n        }\n        this._mouseZoneManager.add(new MouseZoneManager_1.MouseZone(x1 + 1, y1 + 1, x2 + 1, y2 + 1, function (e) {\n            if (matcher.handler) {\n                return matcher.handler(e, uri);\n            }\n            window.open(uri, '_blank');\n        }, function (e) {\n            _this.emit(\"linkhover\", _this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            _this._terminal.element.classList.add('xterm-cursor-pointer');\n        }, function (e) {\n            _this.emit(\"linktooltip\", _this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            if (matcher.hoverTooltipCallback) {\n                matcher.hoverTooltipCallback(e, uri);\n            }\n        }, function () {\n            _this.emit(\"linkleave\", _this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n            _this._terminal.element.classList.remove('xterm-cursor-pointer');\n            if (matcher.hoverLeaveCallback) {\n                matcher.hoverLeaveCallback();\n            }\n        }, function (e) {\n            if (matcher.willLinkActivate) {\n                return matcher.willLinkActivate(e, uri);\n            }\n            return true;\n        }));\n    };\n    Linkifier.prototype._createLinkHoverEvent = function (x1, y1, x2, y2, fg) {\n        return { x1: x1, y1: y1, x2: x2, y2: y2, cols: this._terminal.cols, fg: fg };\n    };\n    Linkifier.TIME_BEFORE_LINKIFY = 200;\n    Linkifier.OVERSCAN_CHAR_LIMIT = 2000;\n    return Linkifier;\n}(EventEmitter_1.EventEmitter));\nexports.Linkifier = Linkifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHelper_1 = __webpack_require__(18);\nvar Browser = __webpack_require__(5);\nvar EventEmitter_1 = __webpack_require__(2);\nvar SelectionModel_1 = __webpack_require__(50);\nvar Buffer_1 = __webpack_require__(0);\nvar AltClickHandler_1 = __webpack_require__(51);\nvar DRAG_SCROLL_MAX_THRESHOLD = 50;\nvar DRAG_SCROLL_MAX_SPEED = 15;\nvar DRAG_SCROLL_INTERVAL = 50;\nvar ALT_CLICK_MOVE_CURSOR_TIME = 500;\nvar WORD_SEPARATORS = ' ()[]{}\\'\"';\nvar NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nvar ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\nvar SelectionManager = (function (_super) {\n    __extends(SelectionManager, _super);\n    function SelectionManager(_terminal, _charMeasure) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._charMeasure = _charMeasure;\n        _this._enabled = true;\n        _this._initListeners();\n        _this.enable();\n        _this._model = new SelectionModel_1.SelectionModel(_terminal);\n        _this._activeSelectionMode = 0;\n        return _this;\n    }\n    SelectionManager.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._removeMouseDownListeners();\n    };\n    Object.defineProperty(SelectionManager.prototype, \"_buffer\", {\n        get: function () {\n            return this._terminal.buffers.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionManager.prototype._initListeners = function () {\n        var _this = this;\n        this._mouseMoveListener = function (event) { return _this._onMouseMove(event); };\n        this._mouseUpListener = function (event) { return _this._onMouseUp(event); };\n        this._trimListener = function (amount) { return _this._onTrim(amount); };\n        this.initBuffersListeners();\n    };\n    SelectionManager.prototype.initBuffersListeners = function () {\n        var _this = this;\n        this._terminal.buffer.lines.on('trim', this._trimListener);\n        this._terminal.buffers.on('activate', function (e) { return _this._onBufferActivate(e); });\n    };\n    SelectionManager.prototype.disable = function () {\n        this.clearSelection();\n        this._enabled = false;\n    };\n    SelectionManager.prototype.enable = function () {\n        this._enabled = true;\n    };\n    Object.defineProperty(SelectionManager.prototype, \"selectionStart\", {\n        get: function () { return this._model.finalSelectionStart; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"selectionEnd\", {\n        get: function () { return this._model.finalSelectionEnd; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"hasSelection\", {\n        get: function () {\n            var start = this._model.finalSelectionStart;\n            var end = this._model.finalSelectionEnd;\n            if (!start || !end) {\n                return false;\n            }\n            return start[0] !== end[0] || start[1] !== end[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionManager.prototype, \"selectionText\", {\n        get: function () {\n            var start = this._model.finalSelectionStart;\n            var end = this._model.finalSelectionEnd;\n            if (!start || !end) {\n                return '';\n            }\n            var result = [];\n            if (this._activeSelectionMode === 3) {\n                if (start[0] === end[0]) {\n                    return '';\n                }\n                for (var i = start[1]; i <= end[1]; i++) {\n                    var lineText = this._buffer.translateBufferLineToString(i, true, start[0], end[0]);\n                    result.push(lineText);\n                }\n            }\n            else {\n                var startRowEndCol = start[1] === end[1] ? end[0] : null;\n                result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n                for (var i = start[1] + 1; i <= end[1] - 1; i++) {\n                    var bufferLine = this._buffer.lines.get(i);\n                    var lineText = this._buffer.translateBufferLineToString(i, true);\n                    if (bufferLine.isWrapped) {\n                        result[result.length - 1] += lineText;\n                    }\n                    else {\n                        result.push(lineText);\n                    }\n                }\n                if (start[1] !== end[1]) {\n                    var bufferLine = this._buffer.lines.get(end[1]);\n                    var lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n                    if (bufferLine.isWrapped) {\n                        result[result.length - 1] += lineText;\n                    }\n                    else {\n                        result.push(lineText);\n                    }\n                }\n            }\n            var formattedResult = result.map(function (line) {\n                return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n            }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\n            return formattedResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionManager.prototype.clearSelection = function () {\n        this._model.clearSelection();\n        this._removeMouseDownListeners();\n        this.refresh();\n    };\n    SelectionManager.prototype.refresh = function (isNewSelection) {\n        var _this = this;\n        if (!this._refreshAnimationFrame) {\n            this._refreshAnimationFrame = window.requestAnimationFrame(function () { return _this._refresh(); });\n        }\n        if (Browser.isLinux && isNewSelection) {\n            var selectionText = this.selectionText;\n            if (selectionText.length) {\n                this.emit('newselection', this.selectionText);\n            }\n        }\n    };\n    SelectionManager.prototype._refresh = function () {\n        this._refreshAnimationFrame = null;\n        this.emit('refresh', {\n            start: this._model.finalSelectionStart,\n            end: this._model.finalSelectionEnd,\n            columnSelectMode: this._activeSelectionMode === 3\n        });\n    };\n    SelectionManager.prototype.isClickInSelection = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        var start = this._model.finalSelectionStart;\n        var end = this._model.finalSelectionEnd;\n        if (!start || !end) {\n            return false;\n        }\n        return this._areCoordsInSelection(coords, start, end);\n    };\n    SelectionManager.prototype._areCoordsInSelection = function (coords, start, end) {\n        return (coords[1] > start[1] && coords[1] < end[1]) ||\n            (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n            (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n            (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n    };\n    SelectionManager.prototype.selectWordAtCursor = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._selectWordAt(coords, false);\n            this._model.selectionEnd = null;\n            this.refresh(true);\n        }\n    };\n    SelectionManager.prototype.selectAll = function () {\n        this._model.isSelectAllActive = true;\n        this.refresh();\n        this._terminal.emit('selection');\n    };\n    SelectionManager.prototype.selectLines = function (start, end) {\n        this._model.clearSelection();\n        start = Math.max(start, 0);\n        end = Math.min(end, this._terminal.buffer.lines.length - 1);\n        this._model.selectionStart = [0, start];\n        this._model.selectionEnd = [this._terminal.cols, end];\n        this.refresh();\n        this._terminal.emit('selection');\n    };\n    SelectionManager.prototype._onTrim = function (amount) {\n        var needsRefresh = this._model.onTrim(amount);\n        if (needsRefresh) {\n            this.refresh();\n        }\n    };\n    SelectionManager.prototype._getMouseBufferCoords = function (event) {\n        var coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.cols, this._terminal.rows, true);\n        if (!coords) {\n            return null;\n        }\n        coords[0]--;\n        coords[1]--;\n        coords[1] += this._terminal.buffer.ydisp;\n        return coords;\n    };\n    SelectionManager.prototype._getMouseEventScrollAmount = function (event) {\n        var offset = MouseHelper_1.MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\n        var terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\n        if (offset >= 0 && offset <= terminalHeight) {\n            return 0;\n        }\n        if (offset > terminalHeight) {\n            offset -= terminalHeight;\n        }\n        offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n        offset /= DRAG_SCROLL_MAX_THRESHOLD;\n        return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n    };\n    SelectionManager.prototype.shouldForceSelection = function (event) {\n        if (Browser.isMac) {\n            return event.altKey && this._terminal.options.macOptionClickForcesSelection;\n        }\n        return event.shiftKey;\n    };\n    SelectionManager.prototype.onMouseDown = function (event) {\n        this._mouseDownTimeStamp = event.timeStamp;\n        if (event.button === 2 && this.hasSelection) {\n            return;\n        }\n        if (event.button !== 0) {\n            return;\n        }\n        if (!this._enabled) {\n            if (!this.shouldForceSelection(event)) {\n                return;\n            }\n            event.stopPropagation();\n        }\n        event.preventDefault();\n        this._dragScrollAmount = 0;\n        if (this._enabled && event.shiftKey) {\n            this._onIncrementalClick(event);\n        }\n        else {\n            if (event.detail === 1) {\n                this._onSingleClick(event);\n            }\n            else if (event.detail === 2) {\n                this._onDoubleClick(event);\n            }\n            else if (event.detail === 3) {\n                this._onTripleClick(event);\n            }\n        }\n        this._addMouseDownListeners();\n        this.refresh(true);\n    };\n    SelectionManager.prototype._addMouseDownListeners = function () {\n        var _this = this;\n        this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n        this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n        this._dragScrollIntervalTimer = setInterval(function () { return _this._dragScroll(); }, DRAG_SCROLL_INTERVAL);\n    };\n    SelectionManager.prototype._removeMouseDownListeners = function () {\n        if (this._terminal.element.ownerDocument) {\n            this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n            this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n        }\n        clearInterval(this._dragScrollIntervalTimer);\n        this._dragScrollIntervalTimer = null;\n    };\n    SelectionManager.prototype._onIncrementalClick = function (event) {\n        if (this._model.selectionStart) {\n            this._model.selectionEnd = this._getMouseBufferCoords(event);\n        }\n    };\n    SelectionManager.prototype._onSingleClick = function (event) {\n        this._model.selectionStartLength = 0;\n        this._model.isSelectAllActive = false;\n        this._activeSelectionMode = this.shouldColumnSelect(event) ? 3 : 0;\n        this._model.selectionStart = this._getMouseBufferCoords(event);\n        if (!this._model.selectionStart) {\n            return;\n        }\n        this._model.selectionEnd = null;\n        var line = this._buffer.lines.get(this._model.selectionStart[1]);\n        if (!line) {\n            return;\n        }\n        if (line.length >= this._model.selectionStart[0]) {\n            return;\n        }\n        var char = line.get(this._model.selectionStart[0]);\n        if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n            this._model.selectionStart[0]++;\n        }\n    };\n    SelectionManager.prototype._onDoubleClick = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._activeSelectionMode = 1;\n            this._selectWordAt(coords, true);\n        }\n    };\n    SelectionManager.prototype._onTripleClick = function (event) {\n        var coords = this._getMouseBufferCoords(event);\n        if (coords) {\n            this._activeSelectionMode = 2;\n            this._selectLineAt(coords[1]);\n        }\n    };\n    SelectionManager.prototype.shouldColumnSelect = function (event) {\n        return event.altKey && !(Browser.isMac && this._terminal.options.macOptionClickForcesSelection);\n    };\n    SelectionManager.prototype._onMouseMove = function (event) {\n        event.stopImmediatePropagation();\n        var previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n        this._model.selectionEnd = this._getMouseBufferCoords(event);\n        if (!this._model.selectionEnd) {\n            this.refresh(true);\n            return;\n        }\n        if (this._activeSelectionMode === 2) {\n            if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n                this._model.selectionEnd[0] = 0;\n            }\n            else {\n                this._model.selectionEnd[0] = this._terminal.cols;\n            }\n        }\n        else if (this._activeSelectionMode === 1) {\n            this._selectToWordAt(this._model.selectionEnd);\n        }\n        this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n        if (this._activeSelectionMode !== 3) {\n            if (this._dragScrollAmount > 0) {\n                this._model.selectionEnd[0] = this._terminal.cols;\n            }\n            else if (this._dragScrollAmount < 0) {\n                this._model.selectionEnd[0] = 0;\n            }\n        }\n        if (this._model.selectionEnd[1] < this._buffer.lines.length) {\n            var char = this._buffer.lines.get(this._model.selectionEnd[1]).get(this._model.selectionEnd[0]);\n            if (char && char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n                this._model.selectionEnd[0]++;\n            }\n        }\n        if (!previousSelectionEnd ||\n            previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n            previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n            this.refresh(true);\n        }\n    };\n    SelectionManager.prototype._dragScroll = function () {\n        if (this._dragScrollAmount) {\n            this._terminal.scrollLines(this._dragScrollAmount, false);\n            if (this._dragScrollAmount > 0) {\n                if (this._activeSelectionMode !== 3) {\n                    this._model.selectionEnd[0] = this._terminal.cols;\n                }\n                this._model.selectionEnd[1] = Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1);\n            }\n            else {\n                if (this._activeSelectionMode !== 3) {\n                    this._model.selectionEnd[0] = 0;\n                }\n                this._model.selectionEnd[1] = this._terminal.buffer.ydisp;\n            }\n            this.refresh();\n        }\n    };\n    SelectionManager.prototype._onMouseUp = function (event) {\n        var timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n        this._removeMouseDownListeners();\n        if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\n            (new AltClickHandler_1.AltClickHandler(event, this._terminal)).move();\n        }\n        else if (this.hasSelection) {\n            this._terminal.emit('selection');\n        }\n    };\n    SelectionManager.prototype._onBufferActivate = function (e) {\n        this.clearSelection();\n        e.inactiveBuffer.lines.off('trim', this._trimListener);\n        e.activeBuffer.lines.on('trim', this._trimListener);\n    };\n    SelectionManager.prototype._convertViewportColToCharacterIndex = function (bufferLine, coords) {\n        var charIndex = coords[0];\n        for (var i = 0; coords[0] >= i; i++) {\n            var char = bufferLine.get(i);\n            if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n                charIndex--;\n            }\n            else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\n                charIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n            }\n        }\n        return charIndex;\n    };\n    SelectionManager.prototype.setSelection = function (col, row, length) {\n        this._model.clearSelection();\n        this._removeMouseDownListeners();\n        this._model.selectionStart = [col, row];\n        this._model.selectionStartLength = length;\n        this.refresh();\n    };\n    SelectionManager.prototype._getWordAt = function (coords, allowWhitespaceOnlySelection, followWrappedLinesAbove, followWrappedLinesBelow) {\n        if (followWrappedLinesAbove === void 0) { followWrappedLinesAbove = true; }\n        if (followWrappedLinesBelow === void 0) { followWrappedLinesBelow = true; }\n        if (coords[0] >= this._terminal.cols) {\n            return null;\n        }\n        var bufferLine = this._buffer.lines.get(coords[1]);\n        if (!bufferLine) {\n            return null;\n        }\n        var line = this._buffer.translateBufferLineToString(coords[1], false);\n        var startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n        var endIndex = startIndex;\n        var charOffset = coords[0] - startIndex;\n        var leftWideCharCount = 0;\n        var rightWideCharCount = 0;\n        var leftLongCharOffset = 0;\n        var rightLongCharOffset = 0;\n        if (line.charAt(startIndex) === ' ') {\n            while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n                startIndex--;\n            }\n            while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n                endIndex++;\n            }\n        }\n        else {\n            var startCol = coords[0];\n            var endCol = coords[0];\n            if (bufferLine.get(startCol)[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n                leftWideCharCount++;\n                startCol--;\n            }\n            if (bufferLine.get(endCol)[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n                rightWideCharCount++;\n                endCol++;\n            }\n            if (bufferLine.get(endCol)[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n                rightLongCharOffset += bufferLine.get(endCol)[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n                endIndex += bufferLine.get(endCol)[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n            }\n            while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.get(startCol - 1))) {\n                var char = bufferLine.get(startCol - 1);\n                if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n                    leftWideCharCount++;\n                    startCol--;\n                }\n                else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n                    leftLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n                    startIndex -= char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n                }\n                startIndex--;\n                startCol--;\n            }\n            while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.get(endCol + 1))) {\n                var char = bufferLine.get(endCol + 1);\n                if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n                    rightWideCharCount++;\n                    endCol++;\n                }\n                else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n                    rightLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n                    endIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n                }\n                endIndex++;\n                endCol++;\n            }\n        }\n        endIndex++;\n        var start = startIndex\n            + charOffset\n            - leftWideCharCount\n            + leftLongCharOffset;\n        var length = Math.min(this._terminal.cols, endIndex\n            - startIndex\n            + leftWideCharCount\n            + rightWideCharCount\n            - leftLongCharOffset\n            - rightLongCharOffset);\n        if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n            return null;\n        }\n        if (followWrappedLinesAbove) {\n            if (start === 0 && bufferLine.get(0)[Buffer_1.CHAR_DATA_CODE_INDEX] !== 32) {\n                var previousBufferLine = this._buffer.lines.get(coords[1] - 1);\n                if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.get(this._terminal.cols - 1)[Buffer_1.CHAR_DATA_CODE_INDEX] !== 32) {\n                    var previousLineWordPosition = this._getWordAt([this._terminal.cols - 1, coords[1] - 1], false, true, false);\n                    if (previousLineWordPosition) {\n                        var offset = this._terminal.cols - previousLineWordPosition.start;\n                        start -= offset;\n                        length += offset;\n                    }\n                }\n            }\n        }\n        if (followWrappedLinesBelow) {\n            if (start + length === this._terminal.cols && bufferLine.get(this._terminal.cols - 1)[Buffer_1.CHAR_DATA_CODE_INDEX] !== 32) {\n                var nextBufferLine = this._buffer.lines.get(coords[1] + 1);\n                if (nextBufferLine && nextBufferLine.isWrapped && nextBufferLine.get(0)[Buffer_1.CHAR_DATA_CODE_INDEX] !== 32) {\n                    var nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n                    if (nextLineWordPosition) {\n                        length += nextLineWordPosition.length;\n                    }\n                }\n            }\n        }\n        return { start: start, length: length };\n    };\n    SelectionManager.prototype._selectWordAt = function (coords, allowWhitespaceOnlySelection) {\n        var wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n        if (wordPosition) {\n            while (wordPosition.start < 0) {\n                wordPosition.start += this._terminal.cols;\n                coords[1]--;\n            }\n            this._model.selectionStart = [wordPosition.start, coords[1]];\n            this._model.selectionStartLength = wordPosition.length;\n        }\n    };\n    SelectionManager.prototype._selectToWordAt = function (coords) {\n        var wordPosition = this._getWordAt(coords, true);\n        if (wordPosition) {\n            var endRow = coords[1];\n            while (wordPosition.start < 0) {\n                wordPosition.start += this._terminal.cols;\n                endRow--;\n            }\n            if (!this._model.areSelectionValuesReversed()) {\n                while (wordPosition.start + wordPosition.length > this._terminal.cols) {\n                    wordPosition.length -= this._terminal.cols;\n                    endRow++;\n                }\n            }\n            this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n        }\n    };\n    SelectionManager.prototype._isCharWordSeparator = function (charData) {\n        if (charData[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n            return false;\n        }\n        return WORD_SEPARATORS.indexOf(charData[Buffer_1.CHAR_DATA_CHAR_INDEX]) >= 0;\n    };\n    SelectionManager.prototype._selectLineAt = function (line) {\n        var wrappedRange = this._buffer.getWrappedRangeForLine(line);\n        this._model.selectionStart = [0, wrappedRange.first];\n        this._model.selectionEnd = [this._terminal.cols, wrappedRange.last];\n        this._model.selectionStartLength = 0;\n    };\n    return SelectionManager;\n}(EventEmitter_1.EventEmitter));\nexports.SelectionManager = SelectionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SelectionModel = (function () {\n    function SelectionModel(_terminal) {\n        this._terminal = _terminal;\n        this.clearSelection();\n    }\n    SelectionModel.prototype.clearSelection = function () {\n        this.selectionStart = null;\n        this.selectionEnd = null;\n        this.isSelectAllActive = false;\n        this.selectionStartLength = 0;\n    };\n    Object.defineProperty(SelectionModel.prototype, "finalSelectionStart", {\n        get: function () {\n            if (this.isSelectAllActive) {\n                return [0, 0];\n            }\n            if (!this.selectionEnd || !this.selectionStart) {\n                return this.selectionStart;\n            }\n            return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionModel.prototype, "finalSelectionEnd", {\n        get: function () {\n            if (this.isSelectAllActive) {\n                return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\n            }\n            if (!this.selectionStart) {\n                return null;\n            }\n            if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n                var startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n                if (startPlusLength > this._terminal.cols) {\n                    return [startPlusLength % this._terminal.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._terminal.cols)];\n                }\n                return [startPlusLength, this.selectionStart[1]];\n            }\n            if (this.selectionStartLength) {\n                if (this.selectionEnd[1] === this.selectionStart[1]) {\n                    return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\n                }\n            }\n            return this.selectionEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionModel.prototype.areSelectionValuesReversed = function () {\n        var start = this.selectionStart;\n        var end = this.selectionEnd;\n        if (!start || !end) {\n            return false;\n        }\n        return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n    };\n    SelectionModel.prototype.onTrim = function (amount) {\n        if (this.selectionStart) {\n            this.selectionStart[1] -= amount;\n        }\n        if (this.selectionEnd) {\n            this.selectionEnd[1] -= amount;\n        }\n        if (this.selectionEnd && this.selectionEnd[1] < 0) {\n            this.clearSelection();\n            return true;\n        }\n        if (this.selectionStart && this.selectionStart[1] < 0) {\n            this.selectionStart[1] = 0;\n        }\n        return false;\n    };\n    return SelectionModel;\n}());\nexports.SelectionModel = SelectionModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EscapeSequences_1 = __webpack_require__(7);\nvar AltClickHandler = (function () {\n    function AltClickHandler(_mouseEvent, _terminal) {\n        var _a;\n        this._mouseEvent = _mouseEvent;\n        this._terminal = _terminal;\n        this._lines = this._terminal.buffer.lines;\n        this._startCol = this._terminal.buffer.x;\n        this._startRow = this._terminal.buffer.y;\n        var coordinates = this._terminal.mouseHelper.getCoords(this._mouseEvent, this._terminal.element, this._terminal.charMeasure, this._terminal.cols, this._terminal.rows, false);\n        if (coordinates) {\n            _a = coordinates.map(function (coordinate) {\n                return coordinate - 1;\n            }), this._endCol = _a[0], this._endRow = _a[1];\n        }\n    }\n    AltClickHandler.prototype.move = function () {\n        if (this._mouseEvent.altKey && this._endCol !== undefined && this._endRow !== undefined) {\n            this._terminal.handler(this._arrowSequences());\n        }\n    };\n    AltClickHandler.prototype._arrowSequences = function () {\n        if (!this._terminal.buffer.hasScrollback) {\n            return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\n        }\n        return this._moveHorizontallyOnly();\n    };\n    AltClickHandler.prototype._resetStartingRow = function () {\n        if (this._moveToRequestedRow().length === 0) {\n            return \'\';\n        }\n        return repeat(this._bufferLine(this._startCol, this._startRow, this._startCol, this._startRow - this._wrappedRowsForRow(this._startRow), false).length, this._sequence("D"));\n    };\n    AltClickHandler.prototype._moveToRequestedRow = function () {\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        var rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\n        return repeat(rowsToMove, this._sequence(this._verticalDirection()));\n    };\n    AltClickHandler.prototype._moveToRequestedCol = function () {\n        var startRow;\n        if (this._moveToRequestedRow().length > 0) {\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        }\n        else {\n            startRow = this._startRow;\n        }\n        var endRow = this._endRow;\n        var direction = this._horizontalDirection();\n        return repeat(this._bufferLine(this._startCol, startRow, this._endCol, endRow, direction === "C").length, this._sequence(direction));\n    };\n    AltClickHandler.prototype._moveHorizontallyOnly = function () {\n        var direction = this._horizontalDirection();\n        return repeat(Math.abs(this._startCol - this._endCol), this._sequence(direction));\n    };\n    AltClickHandler.prototype._wrappedRowsCount = function () {\n        var wrappedRows = 0;\n        var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n        var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        for (var i = 0; i < Math.abs(startRow - endRow); i++) {\n            var direction = this._verticalDirection() === "A" ? -1 : 1;\n            if (this._lines.get(startRow + (direction * i)).isWrapped) {\n                wrappedRows++;\n            }\n        }\n        return wrappedRows;\n    };\n    AltClickHandler.prototype._wrappedRowsForRow = function (currentRow) {\n        var rowCount = 0;\n        var lineWraps = this._lines.get(currentRow).isWrapped;\n        while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\n            rowCount++;\n            currentRow--;\n            lineWraps = this._lines.get(currentRow).isWrapped;\n        }\n        return rowCount;\n    };\n    AltClickHandler.prototype._horizontalDirection = function () {\n        var startRow;\n        if (this._moveToRequestedRow().length > 0) {\n            startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n        }\n        else {\n            startRow = this._startRow;\n        }\n        if ((this._startCol < this._endCol &&\n            startRow <= this._endRow) ||\n            (this._startCol >= this._endCol &&\n                startRow < this._endRow)) {\n            return "C";\n        }\n        return "D";\n    };\n    AltClickHandler.prototype._verticalDirection = function () {\n        if (this._startRow > this._endRow) {\n            return "A";\n        }\n        return "B";\n    };\n    AltClickHandler.prototype._bufferLine = function (startCol, startRow, endCol, endRow, forward) {\n        var currentCol = startCol;\n        var currentRow = startRow;\n        var bufferStr = \'\';\n        while (currentCol !== endCol || currentRow !== endRow) {\n            currentCol += forward ? 1 : -1;\n            if (forward && currentCol > this._terminal.cols - 1) {\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n                currentCol = 0;\n                startCol = 0;\n                currentRow++;\n            }\n            else if (!forward && currentCol < 0) {\n                bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, 0, startCol + 1);\n                currentCol = this._terminal.cols - 1;\n                startCol = currentCol;\n                currentRow--;\n            }\n        }\n        return bufferStr + this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n    };\n    AltClickHandler.prototype._sequence = function (direction) {\n        var mod = this._terminal.applicationCursor ? \'O\' : \'[\';\n        return EscapeSequences_1.C0.ESC + mod + direction;\n    };\n    return AltClickHandler;\n}());\nexports.AltClickHandler = AltClickHandler;\nfunction repeat(count, str) {\n    count = Math.floor(count);\n    var rpt = \'\';\n    for (var i = 0; i < count; i++) {\n        rpt += str;\n    }\n    return rpt;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n')},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter_1 = __webpack_require__(2);\nvar CharMeasure = (function (_super) {\n    __extends(CharMeasure, _super);\n    function CharMeasure(document, parentElement) {\n        var _this = _super.call(this) || this;\n        _this._document = document;\n        _this._parentElement = parentElement;\n        _this._measureElement = _this._document.createElement('span');\n        _this._measureElement.classList.add('xterm-char-measure-element');\n        _this._measureElement.textContent = 'W';\n        _this._measureElement.setAttribute('aria-hidden', 'true');\n        _this._parentElement.appendChild(_this._measureElement);\n        return _this;\n    }\n    Object.defineProperty(CharMeasure.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CharMeasure.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CharMeasure.prototype.measure = function (options) {\n        this._measureElement.style.fontFamily = options.fontFamily;\n        this._measureElement.style.fontSize = options.fontSize + \"px\";\n        var geometry = this._measureElement.getBoundingClientRect();\n        if (geometry.width === 0 || geometry.height === 0) {\n            return;\n        }\n        if (this._width !== geometry.width || this._height !== geometry.height) {\n            this._width = geometry.width;\n            this._height = Math.ceil(geometry.height);\n            this.emit('charsizechanged');\n        }\n    };\n    return CharMeasure;\n}(EventEmitter_1.EventEmitter));\nexports.CharMeasure = CharMeasure;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL0NoYXJNZWFzdXJlLnRzPzhiMzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsNENBQXNEO0FBT3REO0lBQWlDLCtCQUFZO0lBTzNDLHFCQUFZLFFBQWtCLEVBQUUsYUFBMEI7UUFBMUQsWUFDRSxpQkFBTyxTQVFSO1FBUEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsS0FBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsS0FBSSxDQUFDLGVBQWUsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxLQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUNqRSxLQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFDdkMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELEtBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzs7SUFDeEQsQ0FBQztJQUVELHNCQUFXLDhCQUFLO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBRUQsc0JBQVcsK0JBQU07YUFBakI7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFTSw2QkFBTyxHQUFkLFVBQWUsT0FBeUI7UUFDeEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDekQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFNLE9BQU8sQ0FBQyxRQUFRLE9BQUksQ0FBQztRQUM5RCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFHOUQsSUFBSSxRQUFRLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRCxPQUFPO1NBQ1I7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxDQXpDZ0MsMkJBQVksR0F5QzVDO0FBekNZLGtDQUFXIiwiZmlsZSI6IjUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJQ2hhck1lYXN1cmUsIElUZXJtaW5hbE9wdGlvbnMgfSBmcm9tICcuLi9UeXBlcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi9jb21tb24vRXZlbnRFbWl0dGVyJztcblxuLyoqXG4gKiBVdGlsaXR5IGNsYXNzIHRoYXQgbWVhc3VyZXMgdGhlIHNpemUgb2YgYSBjaGFyYWN0ZXIuIE1lYXN1cmVtZW50cyBhcmUgZG9uZSBpblxuICogdGhlIERPTSByYXRoZXIgdGhhbiB3aXRoIGEgY2FudmFzIGNvbnRleHQgYmVjYXVzZSBzdXBwb3J0IGZvciBleHRyYWN0aW5nIHRoZVxuICogaGVpZ2h0IG9mIGNoYXJhY3RlcnMgaXMgcGF0Y2h5IGFjcm9zcyBicm93c2Vycy5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXJNZWFzdXJlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIGltcGxlbWVudHMgSUNoYXJNZWFzdXJlIHtcbiAgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuICBwcml2YXRlIF9wYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBfbWVhc3VyZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQsIHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMuX3BhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50O1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWNoYXItbWVhc3VyZS1lbGVtZW50Jyk7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnVyc7XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgdGhpcy5fcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9tZWFzdXJlRWxlbWVudCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9XG5cbiAgcHVibGljIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgcHVibGljIG1lYXN1cmUob3B0aW9uczogSVRlcm1pbmFsT3B0aW9ucyk6IHZvaWQge1xuICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gb3B0aW9ucy5mb250RmFtaWx5O1xuICAgIHRoaXMuX21lYXN1cmVFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gYCR7b3B0aW9ucy5mb250U2l6ZX1weGA7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSB0aGlzLl9tZWFzdXJlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAvLyBUaGUgZWxlbWVudCBpcyBsaWtlbHkgY3VycmVudGx5IGRpc3BsYXk6bm9uZSwgd2Ugc2hvdWxkIHJldGFpbiB0aGVcbiAgICAvLyBwcmV2aW91cyB2YWx1ZS5cbiAgICBpZiAoZ2VvbWV0cnkud2lkdGggPT09IDAgfHwgZ2VvbWV0cnkuaGVpZ2h0ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl93aWR0aCAhPT0gZ2VvbWV0cnkud2lkdGggfHwgdGhpcy5faGVpZ2h0ICE9PSBnZW9tZXRyeS5oZWlnaHQpIHtcbiAgICAgIHRoaXMuX3dpZHRoID0gZ2VvbWV0cnkud2lkdGg7XG4gICAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLmNlaWwoZ2VvbWV0cnkuaGVpZ2h0KTtcbiAgICAgIHRoaXMuZW1pdCgnY2hhcnNpemVjaGFuZ2VkJyk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3VpL0NoYXJNZWFzdXJlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///52\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clone = function (val, depth) {\n    if (depth === void 0) { depth = 5; }\n    if (typeof val !== 'object') {\n        return val;\n    }\n    if (val === null) {\n        return null;\n    }\n    var clonedObject = Array.isArray(val) ? [] : {};\n    for (var key in val) {\n        clonedObject[key] = depth <= 1 ? val[key] : exports.clone(val[key], depth - 1);\n    }\n    return clonedObject;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3V0aWxzL0Nsb25lLnRzPzM1ZDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRYSxhQUFLLEdBQUcsVUFBSSxHQUFNLEVBQUUsS0FBaUI7SUFBakIsaUNBQWlCO0lBQ2hELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFHRCxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUdELElBQU0sWUFBWSxHQUFRLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRXZELEtBQUssSUFBTSxHQUFHLElBQUksR0FBRyxFQUFFO1FBRXJCLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBRUQsT0FBTyxZQUFpQixDQUFDO0FBQzNCLENBQUMsQ0FBQyIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSB4dGVybS5qcyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLypcbiAqIEEgc2ltcGxlIHV0aWxpdHkgZm9yIGNsb25pbmcgdmFsdWVzXG4gKi9cbmV4cG9ydCBjb25zdCBjbG9uZSA9IDxUPih2YWw6IFQsIGRlcHRoOiBudW1iZXIgPSA1KTogVCA9PiB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICAvLyBjbG9uaW5nIG51bGwgYWx3YXlzIHJldHVybnMgbnVsbFxuICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBjbG9uaW5nIGFuIGFycmF5LCB1c2UgYW4gYXJyYXkgYXMgdGhlIGJhc2UsIG90aGVyd2lzZSB1c2UgYW4gb2JqZWN0XG4gIGNvbnN0IGNsb25lZE9iamVjdDogYW55ID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiB2YWwpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjbG9uZSBlYWNrIGl0ZW0gdW5sZXNzIHdlJ3JlIGF0IHRoZSBtYXhpbXVtIGRlcHRoXG4gICAgY2xvbmVkT2JqZWN0W2tleV0gPSBkZXB0aCA8PSAxID8gdmFsW2tleV0gOiBjbG9uZSh2YWxba2V5XSwgZGVwdGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiBjbG9uZWRPYmplY3QgYXMgVDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL3V0aWxzL0Nsb25lLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_BELL_SOUND = 'data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==';\nvar SoundManager = (function () {\n    function SoundManager(_terminal) {\n        this._terminal = _terminal;\n    }\n    Object.defineProperty(SoundManager, \"audioContext\", {\n        get: function () {\n            if (!SoundManager._audioContext) {\n                var audioContextCtor = window.AudioContext || window.webkitAudioContext;\n                if (!audioContextCtor) {\n                    console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\n                    return null;\n                }\n                SoundManager._audioContext = new audioContextCtor();\n            }\n            return SoundManager._audioContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SoundManager.prototype.playBellSound = function () {\n        var ctx = SoundManager.audioContext;\n        if (!ctx) {\n            return;\n        }\n        var bellAudioSource = ctx.createBufferSource();\n        ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)), function (buffer) {\n            bellAudioSource.buffer = buffer;\n            bellAudioSource.connect(ctx.destination);\n            bellAudioSource.start(0);\n        });\n    };\n    SoundManager.prototype._base64ToArrayBuffer = function (base64) {\n        var binaryString = window.atob(base64);\n        var len = binaryString.length;\n        var bytes = new Uint8Array(len);\n        for (var i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes.buffer;\n    };\n    SoundManager.prototype._removeMimeType = function (dataURI) {\n        var splitUri = dataURI.split(',');\n        return splitUri[1];\n    };\n    return SoundManager;\n}());\nexports.SoundManager = SoundManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL1NvdW5kTWFuYWdlci50cz81N2U3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBV2EsMEJBQWtCLEdBQUcsZ2JBQWdiLENBQUM7QUFFbmQ7SUFlRSxzQkFDVSxTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBRTlCLENBQUM7SUFmRCxzQkFBVyw0QkFBWTthQUF2QjtZQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFO2dCQUMvQixJQUFNLGdCQUFnQixHQUE4QixNQUFPLENBQUMsWUFBWSxJQUFVLE1BQU8sQ0FBQyxrQkFBa0IsQ0FBQztnQkFDN0csSUFBSSxDQUFDLGdCQUFnQixFQUFFO29CQUNyQixPQUFPLENBQUMsSUFBSSxDQUFDLDBGQUEwRixDQUFDLENBQUM7b0JBQ3pHLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELFlBQVksQ0FBQyxhQUFhLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3JEO1lBQ0QsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBT00sb0NBQWEsR0FBcEI7UUFDRSxJQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixPQUFPO1NBQ1I7UUFDRCxJQUFNLGVBQWUsR0FBRyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNqRCxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsVUFBQyxNQUFNO1lBQzVHLGVBQWUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ2hDLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sMkNBQW9CLEdBQTVCLFVBQTZCLE1BQWM7UUFDekMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ2hDLElBQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkM7UUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDdEIsQ0FBQztJQUVPLHNDQUFlLEdBQXZCLFVBQXdCLE9BQWU7UUFFckMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUdwQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDO0FBcERZLG9DQUFZIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJVGVybWluYWwsIElTb3VuZE1hbmFnZXIgfSBmcm9tICcuL1R5cGVzJztcblxuLy8gU291cmNlOiBodHRwczovL2ZyZWVzb3VuZC5vcmcvcGVvcGxlL2FsdGVtYXJrL3NvdW5kcy80NTc1OS9cbi8vIFRoaXMgc291bmQgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIENyZWF0aXZlIENvbW1vbnMgQXR0cmlidXRpb24gMy4wIFVucG9ydGVkXG4vLyAoQ0MgQlkgMy4wKSBsaWNlbnNlLiBJdCB3YXMgY3JlYXRlZCBieSAnYWx0ZW1hcmsnLiBObyBtb2RpZmljYXRpb25zIGhhdmUgYmVlblxuLy8gbWFkZSwgYXBhcnQgZnJvbSB0aGUgY29udmVyc2lvbiB0byBiYXNlNjQuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CRUxMX1NPVU5EID0gJ2RhdGE6YXVkaW8vd2F2O2Jhc2U2NCxVa2xHUmlnQkFBQlhRVlpGWm0xMElCQUFBQUFCQUFFQVJLd0FBSWhZQVFBQ0FCQUFaR0YwWVFRQkFBRHBBRmdDd0FNbEJab0cvd2RtQ2NvS1JBeXBEUThQYlJEQkVRUVRPeFJ0RlljV2xCZVBHSVVaWGhvaUc4OGJjQno3SEhJZHpoMFdIbE1lWng1MUhta2VVeDRXSHM4ZGFoMEFIWHdjM2hzOUc0c2F4Um55R0JJWUdCY1FGdjhVNFJQQUVvWVJRQkFDRDcwTld3d0hDNmdKT3dqV0Jsb0Y3Z09CQWhBQmtmOGIvcXY4Ui92ZStYZjRJZmU3OVcvMEpmUFo4Wi93ZGU5TjdpanRFK3dVNnh2cU0rbGI2SDdudytZWDVtcmx4dVF6NU16amUrTWE0OWZpb2VLRDRuWGlZZUp5NHBIaXRPTDA0ai9qbitNTjVJUGtGT1dzNVUzbURlZk01NS9vZ09sMzZtN3JkT3lFN2FidXl1OEQ4VW55ai9QZzlELzJxZmNiK1luNi92dUsvUWovbEFBbEFnPT0nO1xuXG5leHBvcnQgY2xhc3MgU291bmRNYW5hZ2VyIGltcGxlbWVudHMgSVNvdW5kTWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIF9hdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dDtcblxuICBzdGF0aWMgZ2V0IGF1ZGlvQ29udGV4dCgpOiBBdWRpb0NvbnRleHQgfCBudWxsIHtcbiAgICBpZiAoIVNvdW5kTWFuYWdlci5fYXVkaW9Db250ZXh0KSB7XG4gICAgICBjb25zdCBhdWRpb0NvbnRleHRDdG9yOiB0eXBlb2YgQXVkaW9Db250ZXh0ID0gKDxhbnk+d2luZG93KS5BdWRpb0NvbnRleHQgfHwgKDxhbnk+d2luZG93KS53ZWJraXRBdWRpb0NvbnRleHQ7XG4gICAgICBpZiAoIWF1ZGlvQ29udGV4dEN0b3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdXZWIgQXVkaW8gQVBJIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLiBDb25zaWRlciB1cGdyYWRpbmcgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQgPSBuZXcgYXVkaW9Db250ZXh0Q3RvcigpO1xuICAgIH1cbiAgICByZXR1cm4gU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF90ZXJtaW5hbDogSVRlcm1pbmFsXG4gICkge1xuICB9XG5cbiAgcHVibGljIHBsYXlCZWxsU291bmQoKTogdm9pZCB7XG4gICAgY29uc3QgY3R4ID0gU291bmRNYW5hZ2VyLmF1ZGlvQ29udGV4dDtcbiAgICBpZiAoIWN0eCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBiZWxsQXVkaW9Tb3VyY2UgPSBjdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgY3R4LmRlY29kZUF1ZGlvRGF0YSh0aGlzLl9iYXNlNjRUb0FycmF5QnVmZmVyKHRoaXMuX3JlbW92ZU1pbWVUeXBlKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuYmVsbFNvdW5kKSksIChidWZmZXIpID0+IHtcbiAgICAgIGJlbGxBdWRpb1NvdXJjZS5idWZmZXIgPSBidWZmZXI7XG4gICAgICBiZWxsQXVkaW9Tb3VyY2UuY29ubmVjdChjdHguZGVzdGluYXRpb24pO1xuICAgICAgYmVsbEF1ZGlvU291cmNlLnN0YXJ0KDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfYmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjQ6IHN0cmluZyk6IEFycmF5QnVmZmVyIHtcbiAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgIGNvbnN0IGxlbiA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVtb3ZlTWltZVR5cGUoZGF0YVVSSTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBTcGxpdCB0aGUgaW5wdXQgdG8gZ2V0IHRoZSBtaW1lLXR5cGUgYW5kIHRoZSBkYXRhIGl0c2VsZlxuICAgIGNvbnN0IHNwbGl0VXJpID0gZGF0YVVSSS5zcGxpdCgnLCcpO1xuXG4gICAgLy8gUmV0dXJuIG9ubHkgdGhlIGRhdGFcbiAgICByZXR1cm4gc3BsaXRVcmlbMV07XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy94dGVybS9zcmMvU291bmRNYW5hZ2VyLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n")},function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Strings = __webpack_require__(12);\nvar Platform_1 = __webpack_require__(5);\nvar RenderDebouncer_1 = __webpack_require__(11);\nvar Lifecycle_1 = __webpack_require__(6);\nvar Lifecycle_2 = __webpack_require__(3);\nvar MAX_ROWS_TO_READ = 20;\nvar AccessibilityManager = (function (_super) {\n    __extends(AccessibilityManager, _super);\n    function AccessibilityManager(_terminal) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._liveRegionLineCount = 0;\n        _this._charsToConsume = [];\n        _this._accessibilityTreeRoot = document.createElement('div');\n        _this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n        _this._rowContainer = document.createElement('div');\n        _this._rowContainer.classList.add('xterm-accessibility-tree');\n        _this._rowElements = [];\n        for (var i = 0; i < _this._terminal.rows; i++) {\n            _this._rowElements[i] = _this._createAccessibilityTreeNode();\n            _this._rowContainer.appendChild(_this._rowElements[i]);\n        }\n        _this._topBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, 0); };\n        _this._bottomBoundaryFocusListener = function (e) { return _this._onBoundaryFocus(e, 1); };\n        _this._rowElements[0].addEventListener('focus', _this._topBoundaryFocusListener);\n        _this._rowElements[_this._rowElements.length - 1].addEventListener('focus', _this._bottomBoundaryFocusListener);\n        _this._refreshRowsDimensions();\n        _this._accessibilityTreeRoot.appendChild(_this._rowContainer);\n        _this._renderRowsDebouncer = new RenderDebouncer_1.RenderDebouncer(_this._terminal, _this._renderRows.bind(_this));\n        _this._refreshRows();\n        _this._liveRegion = document.createElement('div');\n        _this._liveRegion.classList.add('live-region');\n        _this._liveRegion.setAttribute('aria-live', 'assertive');\n        _this._accessibilityTreeRoot.appendChild(_this._liveRegion);\n        _this._terminal.element.insertAdjacentElement('afterbegin', _this._accessibilityTreeRoot);\n        _this.register(_this._renderRowsDebouncer);\n        _this.register(_this._terminal.addDisposableListener('resize', function (data) { return _this._onResize(data.rows); }));\n        _this.register(_this._terminal.addDisposableListener('refresh', function (data) { return _this._refreshRows(data.start, data.end); }));\n        _this.register(_this._terminal.addDisposableListener('scroll', function (data) { return _this._refreshRows(); }));\n        _this.register(_this._terminal.addDisposableListener('a11y.char', function (char) { return _this._onChar(char); }));\n        _this.register(_this._terminal.addDisposableListener('linefeed', function () { return _this._onChar('\\n'); }));\n        _this.register(_this._terminal.addDisposableListener('a11y.tab', function (spaceCount) { return _this._onTab(spaceCount); }));\n        _this.register(_this._terminal.addDisposableListener('key', function (keyChar) { return _this._onKey(keyChar); }));\n        _this.register(_this._terminal.addDisposableListener('blur', function () { return _this._clearLiveRegion(); }));\n        _this.register(_this._terminal.addDisposableListener('dprchange', function () { return _this._refreshRowsDimensions(); }));\n        _this.register(_this._terminal.renderer.addDisposableListener('resize', function () { return _this._refreshRowsDimensions(); }));\n        _this.register(Lifecycle_1.addDisposableDomListener(window, 'resize', function () { return _this._refreshRowsDimensions(); }));\n        return _this;\n    }\n    AccessibilityManager.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._terminal.element.removeChild(this._accessibilityTreeRoot);\n        this._rowElements.length = 0;\n    };\n    AccessibilityManager.prototype._onBoundaryFocus = function (e, position) {\n        var boundaryElement = e.target;\n        var beforeBoundaryElement = this._rowElements[position === 0 ? 1 : this._rowElements.length - 2];\n        var posInSet = boundaryElement.getAttribute('aria-posinset');\n        var lastRowPos = position === 0 ? '1' : \"\" + this._terminal.buffer.lines.length;\n        if (posInSet === lastRowPos) {\n            return;\n        }\n        if (e.relatedTarget !== beforeBoundaryElement) {\n            return;\n        }\n        var topBoundaryElement;\n        var bottomBoundaryElement;\n        if (position === 0) {\n            topBoundaryElement = boundaryElement;\n            bottomBoundaryElement = this._rowElements.pop();\n            this._rowContainer.removeChild(bottomBoundaryElement);\n        }\n        else {\n            topBoundaryElement = this._rowElements.shift();\n            bottomBoundaryElement = boundaryElement;\n            this._rowContainer.removeChild(topBoundaryElement);\n        }\n        topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n        bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n        if (position === 0) {\n            var newElement = this._createAccessibilityTreeNode();\n            this._rowElements.unshift(newElement);\n            this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n        }\n        else {\n            var newElement = this._createAccessibilityTreeNode();\n            this._rowElements.push(newElement);\n            this._rowContainer.appendChild(newElement);\n        }\n        this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n        this._terminal.scrollLines(position === 0 ? -1 : 1);\n        this._rowElements[position === 0 ? 1 : this._rowElements.length - 2].focus();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n    };\n    AccessibilityManager.prototype._onResize = function (rows) {\n        this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n        for (var i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n            this._rowElements[i] = this._createAccessibilityTreeNode();\n            this._rowContainer.appendChild(this._rowElements[i]);\n        }\n        while (this._rowElements.length > rows) {\n            this._rowContainer.removeChild(this._rowElements.pop());\n        }\n        this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n        this._refreshRowsDimensions();\n    };\n    AccessibilityManager.prototype._createAccessibilityTreeNode = function () {\n        var element = document.createElement('div');\n        element.setAttribute('role', 'listitem');\n        element.tabIndex = -1;\n        this._refreshRowDimensions(element);\n        return element;\n    };\n    AccessibilityManager.prototype._onTab = function (spaceCount) {\n        for (var i = 0; i < spaceCount; i++) {\n            this._onChar(' ');\n        }\n    };\n    AccessibilityManager.prototype._onChar = function (char) {\n        var _this = this;\n        if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n            if (this._charsToConsume.length > 0) {\n                var shiftedChar = this._charsToConsume.shift();\n                if (shiftedChar !== char) {\n                    this._announceCharacter(char);\n                }\n            }\n            else {\n                this._announceCharacter(char);\n            }\n            if (char === '\\n') {\n                this._liveRegionLineCount++;\n                if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n                    this._liveRegion.textContent += Strings.tooMuchOutput;\n                }\n            }\n            if (Platform_1.isMac) {\n                if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n                    setTimeout(function () {\n                        _this._accessibilityTreeRoot.appendChild(_this._liveRegion);\n                    }, 0);\n                }\n            }\n        }\n    };\n    AccessibilityManager.prototype._clearLiveRegion = function () {\n        this._liveRegion.textContent = '';\n        this._liveRegionLineCount = 0;\n        if (Platform_1.isMac) {\n            if (this._liveRegion.parentNode) {\n                this._accessibilityTreeRoot.removeChild(this._liveRegion);\n            }\n        }\n    };\n    AccessibilityManager.prototype._onKey = function (keyChar) {\n        this._clearLiveRegion();\n        this._charsToConsume.push(keyChar);\n    };\n    AccessibilityManager.prototype._refreshRows = function (start, end) {\n        this._renderRowsDebouncer.refresh(start, end);\n    };\n    AccessibilityManager.prototype._renderRows = function (start, end) {\n        var buffer = this._terminal.buffer;\n        var setSize = buffer.lines.length.toString();\n        for (var i = start; i <= end; i++) {\n            var lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n            var posInSet = (buffer.ydisp + i + 1).toString();\n            var element = this._rowElements[i];\n            element.textContent = lineData.length === 0 ? Strings.blankLine : lineData;\n            element.setAttribute('aria-posinset', posInSet);\n            element.setAttribute('aria-setsize', setSize);\n        }\n    };\n    AccessibilityManager.prototype._refreshRowsDimensions = function () {\n        if (!this._terminal.renderer.dimensions.actualCellHeight) {\n            return;\n        }\n        if (this._rowElements.length !== this._terminal.rows) {\n            this._onResize(this._terminal.rows);\n        }\n        for (var i = 0; i < this._terminal.rows; i++) {\n            this._refreshRowDimensions(this._rowElements[i]);\n        }\n    };\n    AccessibilityManager.prototype._refreshRowDimensions = function (element) {\n        element.style.height = this._terminal.renderer.dimensions.actualCellHeight + \"px\";\n    };\n    AccessibilityManager.prototype._announceCharacter = function (char) {\n        if (char === ' ') {\n            this._liveRegion.innerHTML += '&nbsp;';\n        }\n        else {\n            this._liveRegion.textContent += char;\n        }\n    };\n    return AccessibilityManager;\n}(Lifecycle_2.Disposable));\nexports.AccessibilityManager = AccessibilityManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar EventEmitter_1 = __webpack_require__(2);\nvar ColorManager_1 = __webpack_require__(9);\nvar RenderDebouncer_1 = __webpack_require__(11);\nvar DomRendererRowFactory_1 = __webpack_require__(57);\nvar Types_1 = __webpack_require__(1);\nvar TERMINAL_CLASS_PREFIX = \'xterm-dom-renderer-owner-\';\nvar ROW_CONTAINER_CLASS = \'xterm-rows\';\nvar FG_CLASS_PREFIX = \'xterm-fg-\';\nvar BG_CLASS_PREFIX = \'xterm-bg-\';\nvar FOCUS_CLASS = \'xterm-focus\';\nvar SELECTION_CLASS = \'xterm-selection\';\nvar nextTerminalId = 1;\nvar DomRenderer = (function (_super) {\n    __extends(DomRenderer, _super);\n    function DomRenderer(_terminal, theme) {\n        var _this = _super.call(this) || this;\n        _this._terminal = _terminal;\n        _this._terminalClass = nextTerminalId++;\n        _this._rowElements = [];\n        var allowTransparency = _this._terminal.options.allowTransparency;\n        _this.colorManager = new ColorManager_1.ColorManager(document, allowTransparency);\n        _this.setTheme(theme);\n        _this._rowContainer = document.createElement(\'div\');\n        _this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n        _this._rowContainer.style.lineHeight = \'normal\';\n        _this._rowContainer.setAttribute(\'aria-hidden\', \'true\');\n        _this._refreshRowElements(_this._terminal.cols, _this._terminal.rows);\n        _this._selectionContainer = document.createElement(\'div\');\n        _this._selectionContainer.classList.add(SELECTION_CLASS);\n        _this._selectionContainer.setAttribute(\'aria-hidden\', \'true\');\n        _this.dimensions = {\n            scaledCharWidth: null,\n            scaledCharHeight: null,\n            scaledCellWidth: null,\n            scaledCellHeight: null,\n            scaledCharLeft: null,\n            scaledCharTop: null,\n            scaledCanvasWidth: null,\n            scaledCanvasHeight: null,\n            canvasWidth: null,\n            canvasHeight: null,\n            actualCellWidth: null,\n            actualCellHeight: null\n        };\n        _this._updateDimensions();\n        _this._renderDebouncer = new RenderDebouncer_1.RenderDebouncer(_this._terminal, _this._renderRows.bind(_this));\n        _this._rowFactory = new DomRendererRowFactory_1.DomRendererRowFactory(document);\n        _this._terminal.element.classList.add(TERMINAL_CLASS_PREFIX + _this._terminalClass);\n        _this._terminal.screenElement.appendChild(_this._rowContainer);\n        _this._terminal.screenElement.appendChild(_this._selectionContainer);\n        _this._terminal.linkifier.on("linkhover", function (e) { return _this._onLinkHover(e); });\n        _this._terminal.linkifier.on("linkleave", function (e) { return _this._onLinkLeave(e); });\n        return _this;\n    }\n    DomRenderer.prototype.dispose = function () {\n        this._terminal.element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n        this._terminal.screenElement.removeChild(this._rowContainer);\n        this._terminal.screenElement.removeChild(this._selectionContainer);\n        this._terminal.screenElement.removeChild(this._themeStyleElement);\n        this._terminal.screenElement.removeChild(this._dimensionsStyleElement);\n        _super.prototype.dispose.call(this);\n    };\n    DomRenderer.prototype._updateDimensions = function () {\n        var _this = this;\n        this.dimensions.scaledCharWidth = Math.floor(this._terminal.charMeasure.width * window.devicePixelRatio);\n        this.dimensions.scaledCharHeight = Math.ceil(this._terminal.charMeasure.height * window.devicePixelRatio);\n        this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._terminal.options.letterSpacing);\n        this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._terminal.options.lineHeight);\n        this.dimensions.scaledCharLeft = 0;\n        this.dimensions.scaledCharTop = 0;\n        this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._terminal.cols;\n        this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._terminal.rows;\n        this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n        this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n        this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._terminal.cols;\n        this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._terminal.rows;\n        this._rowElements.forEach(function (element) {\n            element.style.width = _this.dimensions.canvasWidth + "px";\n            element.style.height = _this.dimensions.actualCellHeight + "px";\n            element.style.lineHeight = _this.dimensions.actualCellHeight + "px";\n            element.style.overflow = \'hidden\';\n        });\n        if (!this._dimensionsStyleElement) {\n            this._dimensionsStyleElement = document.createElement(\'style\');\n            this._terminal.screenElement.appendChild(this._dimensionsStyleElement);\n        }\n        var styles = this._terminalSelector + " ." + ROW_CONTAINER_CLASS + " span {" +\n            " display: inline-block;" +\n            " height: 100%;" +\n            " vertical-align: top;" +\n            (" width: " + this.dimensions.actualCellWidth + "px") +\n            "}";\n        this._dimensionsStyleElement.innerHTML = styles;\n        this._selectionContainer.style.height = this._terminal._viewportElement.style.height;\n        this._terminal.screenElement.style.width = this.dimensions.canvasWidth + "px";\n        this._terminal.screenElement.style.height = this.dimensions.canvasHeight + "px";\n    };\n    DomRenderer.prototype.setTheme = function (theme) {\n        var _this = this;\n        if (theme) {\n            this.colorManager.setTheme(theme);\n        }\n        if (!this._themeStyleElement) {\n            this._themeStyleElement = document.createElement(\'style\');\n            this._terminal.screenElement.appendChild(this._themeStyleElement);\n        }\n        var styles = this._terminalSelector + " ." + ROW_CONTAINER_CLASS + " {" +\n            (" color: " + this.colorManager.colors.foreground.css + ";") +\n            (" background-color: " + this.colorManager.colors.background.css + ";") +\n            (" font-family: " + this._terminal.getOption(\'fontFamily\') + ";") +\n            (" font-size: " + this._terminal.getOption(\'fontSize\') + "px;") +\n            "}";\n        styles +=\n            this._terminalSelector + " span:not(." + DomRendererRowFactory_1.BOLD_CLASS + ") {" +\n                (" font-weight: " + this._terminal.options.fontWeight + ";") +\n                "}" +\n                (this._terminalSelector + " span." + DomRendererRowFactory_1.BOLD_CLASS + " {") +\n                (" font-weight: " + this._terminal.options.fontWeightBold + ";") +\n                "}" +\n                (this._terminalSelector + " span." + DomRendererRowFactory_1.ITALIC_CLASS + " {") +\n                " font-style: italic;" +\n                "}";\n        styles +=\n            this._terminalSelector + " ." + ROW_CONTAINER_CLASS + ":not(." + FOCUS_CLASS + ") ." + DomRendererRowFactory_1.CURSOR_CLASS + " {" +\n                (" outline: 1px solid " + this.colorManager.colors.cursor.css + ";") +\n                " outline-offset: -1px;" +\n                "}" +\n                (this._terminalSelector + " ." + ROW_CONTAINER_CLASS + "." + FOCUS_CLASS + " ." + DomRendererRowFactory_1.CURSOR_CLASS + "." + DomRendererRowFactory_1.CURSOR_STYLE_BLOCK_CLASS + " {") +\n                (" background-color: " + this.colorManager.colors.cursor.css + ";") +\n                (" color: " + this.colorManager.colors.cursorAccent.css + ";") +\n                "}" +\n                (this._terminalSelector + " ." + ROW_CONTAINER_CLASS + "." + FOCUS_CLASS + " ." + DomRendererRowFactory_1.CURSOR_CLASS + "." + DomRendererRowFactory_1.CURSOR_STYLE_BAR_CLASS + " {") +\n                (" box-shadow: 1px 0 0 " + this.colorManager.colors.cursor.css + " inset;") +\n                "}" +\n                (this._terminalSelector + " ." + ROW_CONTAINER_CLASS + "." + FOCUS_CLASS + " ." + DomRendererRowFactory_1.CURSOR_CLASS + "." + DomRendererRowFactory_1.CURSOR_STYLE_UNDERLINE_CLASS + " {") +\n                (" box-shadow: 0 -1px 0 " + this.colorManager.colors.cursor.css + " inset;") +\n                "}";\n        styles +=\n            this._terminalSelector + " ." + SELECTION_CLASS + " {" +\n                " position: absolute;" +\n                " top: 0;" +\n                " left: 0;" +\n                " z-index: 1;" +\n                " pointer-events: none;" +\n                "}" +\n                (this._terminalSelector + " ." + SELECTION_CLASS + " div {") +\n                " position: absolute;" +\n                (" background-color: " + this.colorManager.colors.selection.css + ";") +\n                "}";\n        this.colorManager.colors.ansi.forEach(function (c, i) {\n            styles +=\n                _this._terminalSelector + " ." + FG_CLASS_PREFIX + i + " { color: " + c.css + "; }" +\n                    (_this._terminalSelector + " ." + BG_CLASS_PREFIX + i + " { background-color: " + c.css + "; }");\n        });\n        styles +=\n            this._terminalSelector + " ." + FG_CLASS_PREFIX + Types_1.INVERTED_DEFAULT_COLOR + " { color: " + this.colorManager.colors.background.css + "; }" +\n                (this._terminalSelector + " ." + BG_CLASS_PREFIX + Types_1.INVERTED_DEFAULT_COLOR + " { background-color: " + this.colorManager.colors.foreground.css + "; }");\n        this._themeStyleElement.innerHTML = styles;\n        return this.colorManager.colors;\n    };\n    DomRenderer.prototype.onWindowResize = function (devicePixelRatio) {\n        this._updateDimensions();\n    };\n    DomRenderer.prototype._refreshRowElements = function (cols, rows) {\n        for (var i = this._rowElements.length; i <= rows; i++) {\n            var row = document.createElement(\'div\');\n            this._rowContainer.appendChild(row);\n            this._rowElements.push(row);\n        }\n        while (this._rowElements.length > rows) {\n            this._rowContainer.removeChild(this._rowElements.pop());\n        }\n    };\n    DomRenderer.prototype.onResize = function (cols, rows) {\n        this._refreshRowElements(cols, rows);\n        this._updateDimensions();\n    };\n    DomRenderer.prototype.onCharSizeChanged = function () {\n        this._updateDimensions();\n    };\n    DomRenderer.prototype.onBlur = function () {\n        this._rowContainer.classList.remove(FOCUS_CLASS);\n    };\n    DomRenderer.prototype.onFocus = function () {\n        this._rowContainer.classList.add(FOCUS_CLASS);\n    };\n    DomRenderer.prototype.onSelectionChanged = function (start, end, columnSelectMode) {\n        while (this._selectionContainer.children.length) {\n            this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n        }\n        if (!start || !end) {\n            return;\n        }\n        var viewportStartRow = start[1] - this._terminal.buffer.ydisp;\n        var viewportEndRow = end[1] - this._terminal.buffer.ydisp;\n        var viewportCappedStartRow = Math.max(viewportStartRow, 0);\n        var viewportCappedEndRow = Math.min(viewportEndRow, this._terminal.rows - 1);\n        if (viewportCappedStartRow >= this._terminal.rows || viewportCappedEndRow < 0) {\n            return;\n        }\n        var documentFragment = document.createDocumentFragment();\n        if (columnSelectMode) {\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, start[0], end[0], viewportCappedEndRow - viewportCappedStartRow + 1));\n        }\n        else {\n            var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n            var endCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n            var middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n            documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._terminal.cols, middleRowsCount));\n            if (viewportCappedStartRow !== viewportCappedEndRow) {\n                var endCol_1 = viewportEndRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\n                documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol_1));\n            }\n        }\n        this._selectionContainer.appendChild(documentFragment);\n    };\n    DomRenderer.prototype._createSelectionElement = function (row, colStart, colEnd, rowCount) {\n        if (rowCount === void 0) { rowCount = 1; }\n        var element = document.createElement(\'div\');\n        element.style.height = rowCount * this.dimensions.actualCellHeight + "px";\n        element.style.top = row * this.dimensions.actualCellHeight + "px";\n        element.style.left = colStart * this.dimensions.actualCellWidth + "px";\n        element.style.width = this.dimensions.actualCellWidth * (colEnd - colStart) + "px";\n        return element;\n    };\n    DomRenderer.prototype.onCursorMove = function () {\n    };\n    DomRenderer.prototype.onOptionsChanged = function () {\n        this._updateDimensions();\n        this.setTheme(undefined);\n        this._terminal.refresh(0, this._terminal.rows - 1);\n    };\n    DomRenderer.prototype.clear = function () {\n        this._rowElements.forEach(function (e) { return e.innerHTML = \'\'; });\n    };\n    DomRenderer.prototype.refreshRows = function (start, end) {\n        this._renderDebouncer.refresh(start, end);\n    };\n    DomRenderer.prototype._renderRows = function (start, end) {\n        var terminal = this._terminal;\n        var cursorAbsoluteY = terminal.buffer.ybase + terminal.buffer.y;\n        var cursorX = this._terminal.buffer.x;\n        for (var y = start; y <= end; y++) {\n            var rowElement = this._rowElements[y];\n            rowElement.innerHTML = \'\';\n            var row = y + terminal.buffer.ydisp;\n            var lineData = terminal.buffer.lines.get(row);\n            var cursorStyle = terminal.options.cursorStyle;\n            rowElement.appendChild(this._rowFactory.createRow(lineData, row === cursorAbsoluteY, cursorStyle, cursorX, this.dimensions.actualCellWidth, terminal.cols));\n        }\n        this._terminal.emit(\'refresh\', { start: start, end: end });\n    };\n    Object.defineProperty(DomRenderer.prototype, "_terminalSelector", {\n        get: function () {\n            return "." + TERMINAL_CLASS_PREFIX + this._terminalClass;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DomRenderer.prototype.registerCharacterJoiner = function (handler) { return -1; };\n    DomRenderer.prototype.deregisterCharacterJoiner = function (joinerId) { return false; };\n    DomRenderer.prototype._onLinkHover = function (e) {\n        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n    };\n    DomRenderer.prototype._onLinkLeave = function (e) {\n        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n    };\n    DomRenderer.prototype._setCellUnderline = function (x, x2, y, y2, cols, enabled) {\n        while (x !== x2 || y !== y2) {\n            var row = this._rowElements[y];\n            if (!row) {\n                return;\n            }\n            var span = row.children[x];\n            span.style.textDecoration = enabled ? \'underline\' : \'none\';\n            x = (x + 1) % cols;\n            if (x === 0) {\n                y++;\n            }\n        }\n    };\n    return DomRenderer;\n}(EventEmitter_1.EventEmitter));\nexports.DomRenderer = DomRenderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Buffer_1 = __webpack_require__(0);\nvar Types_1 = __webpack_require__(1);\nexports.BOLD_CLASS = 'xterm-bold';\nexports.ITALIC_CLASS = 'xterm-italic';\nexports.CURSOR_CLASS = 'xterm-cursor';\nexports.CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexports.CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexports.CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\nvar DomRendererRowFactory = (function () {\n    function DomRendererRowFactory(_document) {\n        this._document = _document;\n    }\n    DomRendererRowFactory.prototype.createRow = function (lineData, isCursorRow, cursorStyle, cursorX, cellWidth, cols) {\n        var fragment = this._document.createDocumentFragment();\n        var lineLength = 0;\n        for (var x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n            var charData = lineData.get(x);\n            var code = charData[Buffer_1.CHAR_DATA_CODE_INDEX];\n            if (code !== Buffer_1.NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n                lineLength = x + 1;\n                break;\n            }\n        }\n        for (var x = 0; x < lineLength; x++) {\n            var charData = lineData.get(x);\n            var char = charData[Buffer_1.CHAR_DATA_CHAR_INDEX];\n            var attr = charData[Buffer_1.CHAR_DATA_ATTR_INDEX];\n            var width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n            if (width === 0) {\n                continue;\n            }\n            var charElement = this._document.createElement('span');\n            if (width > 1) {\n                charElement.style.width = cellWidth * width + \"px\";\n            }\n            var flags = attr >> 18;\n            var bg = attr & 0x1ff;\n            var fg = (attr >> 9) & 0x1ff;\n            if (isCursorRow && x === cursorX) {\n                charElement.classList.add(exports.CURSOR_CLASS);\n                switch (cursorStyle) {\n                    case 'bar':\n                        charElement.classList.add(exports.CURSOR_STYLE_BAR_CLASS);\n                        break;\n                    case 'underline':\n                        charElement.classList.add(exports.CURSOR_STYLE_UNDERLINE_CLASS);\n                        break;\n                    default:\n                        charElement.classList.add(exports.CURSOR_STYLE_BLOCK_CLASS);\n                        break;\n                }\n            }\n            if (flags & 8) {\n                var temp = bg;\n                bg = fg;\n                fg = temp;\n                if (fg === Types_1.DEFAULT_COLOR) {\n                    fg = Types_1.INVERTED_DEFAULT_COLOR;\n                }\n                if (bg === Types_1.DEFAULT_COLOR) {\n                    bg = Types_1.INVERTED_DEFAULT_COLOR;\n                }\n            }\n            if (flags & 1) {\n                if (fg < 8) {\n                    fg += 8;\n                }\n                charElement.classList.add(exports.BOLD_CLASS);\n            }\n            if (flags & 64) {\n                charElement.classList.add(exports.ITALIC_CLASS);\n            }\n            charElement.textContent = char;\n            if (fg !== Types_1.DEFAULT_COLOR) {\n                charElement.classList.add(\"xterm-fg-\" + fg);\n            }\n            if (bg !== Types_1.DEFAULT_COLOR) {\n                charElement.classList.add(\"xterm-bg-\" + bg);\n            }\n            fragment.appendChild(charElement);\n        }\n        return fragment;\n    };\n    return DomRendererRowFactory;\n}());\nexports.DomRendererRowFactory = DomRendererRowFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EscapeSequences_1 = __webpack_require__(7);\nvar KEYCODE_KEY_MAPPINGS = {\n    48: ['0', ')'],\n    49: ['1', '!'],\n    50: ['2', '@'],\n    51: ['3', '#'],\n    52: ['4', '$'],\n    53: ['5', '%'],\n    54: ['6', '^'],\n    55: ['7', '&'],\n    56: ['8', '*'],\n    57: ['9', '('],\n    186: [';', ':'],\n    187: ['=', '+'],\n    188: [',', '<'],\n    189: ['-', '_'],\n    190: ['.', '>'],\n    191: ['/', '?'],\n    192: ['`', '~'],\n    219: ['[', '{'],\n    220: ['\\\\', '|'],\n    221: [']', '}'],\n    222: ['\\'', '\"']\n};\nfunction evaluateKeyboardEvent(ev, applicationCursorMode, isMac, macOptionIsMeta) {\n    var result = {\n        type: 0,\n        cancel: false,\n        key: undefined\n    };\n    var modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n    switch (ev.keyCode) {\n        case 0:\n            if (ev.key === 'UIKeyInputUpArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OA';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[A';\n                }\n            }\n            else if (ev.key === 'UIKeyInputLeftArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OD';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[D';\n                }\n            }\n            else if (ev.key === 'UIKeyInputRightArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OC';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[C';\n                }\n            }\n            else if (ev.key === 'UIKeyInputDownArrow') {\n                if (applicationCursorMode) {\n                    result.key = EscapeSequences_1.C0.ESC + 'OB';\n                }\n                else {\n                    result.key = EscapeSequences_1.C0.ESC + '[B';\n                }\n            }\n            break;\n        case 8:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.BS;\n                break;\n            }\n            else if (ev.altKey) {\n                result.key = EscapeSequences_1.C0.ESC + EscapeSequences_1.C0.DEL;\n                break;\n            }\n            result.key = EscapeSequences_1.C0.DEL;\n            break;\n        case 9:\n            if (ev.shiftKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[Z';\n                break;\n            }\n            result.key = EscapeSequences_1.C0.HT;\n            result.cancel = true;\n            break;\n        case 13:\n            result.key = EscapeSequences_1.C0.CR;\n            result.cancel = true;\n            break;\n        case 27:\n            result.key = EscapeSequences_1.C0.ESC;\n            result.cancel = true;\n            break;\n        case 37:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'D';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3D') {\n                    result.key = isMac ? EscapeSequences_1.C0.ESC + 'b' : EscapeSequences_1.C0.ESC + '[1;5D';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OD';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[D';\n            }\n            break;\n        case 39:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'C';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3C') {\n                    result.key = isMac ? EscapeSequences_1.C0.ESC + 'f' : EscapeSequences_1.C0.ESC + '[1;5C';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OC';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[C';\n            }\n            break;\n        case 38:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'A';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3A') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5A';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OA';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[A';\n            }\n            break;\n        case 40:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'B';\n                if (result.key === EscapeSequences_1.C0.ESC + '[1;3B') {\n                    result.key = EscapeSequences_1.C0.ESC + '[1;5B';\n                }\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OB';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[B';\n            }\n            break;\n        case 45:\n            if (!ev.shiftKey && !ev.ctrlKey) {\n                result.key = EscapeSequences_1.C0.ESC + '[2~';\n            }\n            break;\n        case 46:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[3;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[3~';\n            }\n            break;\n        case 36:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'H';\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OH';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[H';\n            }\n            break;\n        case 35:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'F';\n            }\n            else if (applicationCursorMode) {\n                result.key = EscapeSequences_1.C0.ESC + 'OF';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[F';\n            }\n            break;\n        case 33:\n            if (ev.shiftKey) {\n                result.type = 2;\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[5~';\n            }\n            break;\n        case 34:\n            if (ev.shiftKey) {\n                result.type = 3;\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[6~';\n            }\n            break;\n        case 112:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'P';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OP';\n            }\n            break;\n        case 113:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OQ';\n            }\n            break;\n        case 114:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'R';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OR';\n            }\n            break;\n        case 115:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[1;' + (modifiers + 1) + 'S';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + 'OS';\n            }\n            break;\n        case 116:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[15;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[15~';\n            }\n            break;\n        case 117:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[17;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[17~';\n            }\n            break;\n        case 118:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[18;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[18~';\n            }\n            break;\n        case 119:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[19;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[19~';\n            }\n            break;\n        case 120:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[20;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[20~';\n            }\n            break;\n        case 121:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[21;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[21~';\n            }\n            break;\n        case 122:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[23;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[23~';\n            }\n            break;\n        case 123:\n            if (modifiers) {\n                result.key = EscapeSequences_1.C0.ESC + '[24;' + (modifiers + 1) + '~';\n            }\n            else {\n                result.key = EscapeSequences_1.C0.ESC + '[24~';\n            }\n            break;\n        default:\n            if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n                if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    result.key = String.fromCharCode(ev.keyCode - 64);\n                }\n                else if (ev.keyCode === 32) {\n                    result.key = String.fromCharCode(0);\n                }\n                else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n                    result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n                }\n                else if (ev.keyCode === 56) {\n                    result.key = String.fromCharCode(127);\n                }\n                else if (ev.keyCode === 219) {\n                    result.key = String.fromCharCode(27);\n                }\n                else if (ev.keyCode === 220) {\n                    result.key = String.fromCharCode(28);\n                }\n                else if (ev.keyCode === 221) {\n                    result.key = String.fromCharCode(29);\n                }\n            }\n            else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n                var keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n                var key = keyMapping && keyMapping[!ev.shiftKey ? 0 : 1];\n                if (key) {\n                    result.key = EscapeSequences_1.C0.ESC + key;\n                }\n                else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n                    var keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n                    result.key = EscapeSequences_1.C0.ESC + String.fromCharCode(keyCode);\n                }\n            }\n            else if (isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\n                if (ev.keyCode === 65) {\n                    result.type = 1;\n                }\n            }\n            break;\n    }\n    return result;\n}\nexports.evaluateKeyboardEvent = evaluateKeyboardEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vc3JjL2NvcmUvaW5wdXQvS2V5Ym9hcmQudHM/ZjA5NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVFBLCtDQUF1RDtBQUd2RCxJQUFNLG9CQUFvQixHQUF1QztJQUUvRCxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2QsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNkLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZCxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2QsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNkLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZCxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2QsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNkLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZCxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBR2QsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNmLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZixHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2YsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNmLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZixHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2YsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNmLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO0lBQ2hCLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO0NBQ2pCLENBQUM7QUFFRixTQUFnQixxQkFBcUIsQ0FDbkMsRUFBa0IsRUFDbEIscUJBQThCLEVBQzlCLEtBQWMsRUFDZCxlQUF3QjtJQUV4QixJQUFNLE1BQU0sR0FBb0I7UUFDOUIsSUFBSSxHQUE2QjtRQUdqQyxNQUFNLEVBQUUsS0FBSztRQUViLEdBQUcsRUFBRSxTQUFTO0tBQ2YsQ0FBQztJQUNGLElBQU0sU0FBUyxHQUFHLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFDbEIsS0FBSyxDQUFDO1lBQ0osSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLG1CQUFtQixFQUFFO2dCQUNsQyxJQUFJLHFCQUFxQixFQUFFO29CQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7aUJBQzVCO2FBQ0Y7aUJBQ0ksSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLHFCQUFxQixFQUFFO2dCQUN6QyxJQUFJLHFCQUFxQixFQUFFO29CQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7aUJBQzVCO2FBQ0Y7aUJBQ0ksSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLHNCQUFzQixFQUFFO2dCQUMxQyxJQUFJLHFCQUFxQixFQUFFO29CQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7aUJBQzVCO2FBQ0Y7aUJBQ0ksSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLHFCQUFxQixFQUFFO2dCQUN6QyxJQUFJLHFCQUFxQixFQUFFO29CQUN6QixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7aUJBQzVCO2FBQ0Y7WUFDRCxNQUFNO1FBQ1IsS0FBSyxDQUFDO1lBRUosSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO2dCQUNmLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLE1BQU07YUFDUDtpQkFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3BCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQzdCLE1BQU07YUFDUDtZQUNELE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLENBQUM7WUFDcEIsTUFBTTtRQUNSLEtBQUssQ0FBQztZQUVKLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtnQkFDZixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztnQkFDM0IsTUFBTTthQUNQO1lBQ0QsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNyQixNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNyQixNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsQ0FBQztZQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNyQixNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUlwRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssb0JBQUUsQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFO29CQUNuQyxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7aUJBQ3REO2FBQ0Y7aUJBQU0sSUFBSSxxQkFBcUIsRUFBRTtnQkFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUlwRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssb0JBQUUsQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFO29CQUNuQyxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7aUJBQ3REO2FBQ0Y7aUJBQU0sSUFBSSxxQkFBcUIsRUFBRTtnQkFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUdwRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssb0JBQUUsQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFO29CQUNuQyxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztpQkFDL0I7YUFDRjtpQkFBTSxJQUFJLHFCQUFxQixFQUFFO2dCQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQzthQUM1QjtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQzthQUM1QjtZQUNELE1BQU07UUFDUixLQUFLLEVBQUU7WUFFTCxJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBR3BELElBQUksTUFBTSxDQUFDLEdBQUcsS0FBSyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxPQUFPLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO2lCQUMvQjthQUNGO2lCQUFNLElBQUkscUJBQXFCLEVBQUU7Z0JBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQzVCO1lBQ0QsTUFBTTtRQUNSLEtBQUssRUFBRTtZQUVMLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFHL0IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7YUFDN0I7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO2FBQzdCO1lBQ0QsTUFBTTtRQUNSLEtBQUssRUFBRTtZQUVMLElBQUksU0FBUyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUNyRDtpQkFBTSxJQUFJLHFCQUFxQixFQUFFO2dCQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQzthQUM1QjtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQzthQUM1QjtZQUNELE1BQU07UUFDUixLQUFLLEVBQUU7WUFFTCxJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDckQ7aUJBQU0sSUFBSSxxQkFBcUIsRUFBRTtnQkFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO2dCQUNmLE1BQU0sQ0FBQyxJQUFJLElBQTZCLENBQUM7YUFDMUM7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7YUFDN0I7WUFDRCxNQUFNO1FBQ1IsS0FBSyxFQUFFO1lBRUwsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO2dCQUNmLE1BQU0sQ0FBQyxJQUFJLElBQStCLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7YUFDN0I7WUFDRCxNQUFNO1FBQ1IsS0FBSyxHQUFHO1lBRU4sSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQzVCO1lBQ0QsTUFBTTtRQUNSLEtBQUssR0FBRztZQUNOLElBQUksU0FBUyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUNyRDtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQzthQUM1QjtZQUNELE1BQU07UUFDUixLQUFLLEdBQUc7WUFDTixJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDckQ7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7YUFDNUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxHQUFHO1lBQ04sSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2FBQzVCO1lBQ0QsTUFBTTtRQUNSLEtBQUssR0FBRztZQUNOLElBQUksU0FBUyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUN0RDtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQzthQUM5QjtZQUNELE1BQU07UUFDUixLQUFLLEdBQUc7WUFDTixJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7YUFDOUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxHQUFHO1lBQ04sSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ3REO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO2FBQzlCO1lBQ0QsTUFBTTtRQUNSLEtBQUssR0FBRztZQUNOLElBQUksU0FBUyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUN0RDtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQzthQUM5QjtZQUNELE1BQU07UUFDUixLQUFLLEdBQUc7WUFDTixJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7YUFDOUI7WUFDRCxNQUFNO1FBQ1IsS0FBSyxHQUFHO1lBQ04sSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2FBQ3REO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO2FBQzlCO1lBQ0QsTUFBTTtRQUNSLEtBQUssR0FBRztZQUNOLElBQUksU0FBUyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxHQUFHLEdBQUcsb0JBQUUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUN0RDtpQkFBTTtnQkFDTCxNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQzthQUM5QjtZQUNELE1BQU07UUFDUixLQUFLLEdBQUc7WUFDTixJQUFJLFNBQVMsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxHQUFHLG9CQUFFLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7YUFDOUI7WUFDRCxNQUFNO1FBQ1I7WUFFRSxJQUFJLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7Z0JBQzNELElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUU7b0JBQ3hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2lCQUNuRDtxQkFBTSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssRUFBRSxFQUFFO29CQUU1QixNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3JDO3FCQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUU7b0JBRS9DLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztpQkFDeEQ7cUJBQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtvQkFFNUIsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QztxQkFBTSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssR0FBRyxFQUFFO29CQUU3QixNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3RDO3FCQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxHQUFHLEVBQUU7b0JBRTdCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDdEM7cUJBQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLEdBQUcsRUFBRTtvQkFFN0IsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0QzthQUNGO2lCQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFFbEUsSUFBTSxVQUFVLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNwRCxJQUFNLEdBQUcsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0QsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7aUJBQzNCO3FCQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUU7b0JBQy9DLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztvQkFDL0QsTUFBTSxDQUFDLEdBQUcsR0FBRyxvQkFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNwRDthQUNGO2lCQUFNLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtnQkFDM0QsSUFBSSxFQUFFLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtvQkFDckIsTUFBTSxDQUFDLElBQUksSUFBZ0MsQ0FBQztpQkFDN0M7YUFDRjtZQUNELE1BQU07S0FDVDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUE5VEQsc0RBOFRDIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIHh0ZXJtLmpzIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxMywgQ2hyaXN0b3BoZXIgSmVmZnJleSAoTUlUIExpY2Vuc2UpXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5pbXBvcnQgeyBJS2V5Ym9hcmRFdmVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi9UeXBlcyc7XG5pbXBvcnQgeyBJS2V5Ym9hcmRSZXN1bHQsIEtleWJvYXJkUmVzdWx0VHlwZSB9IGZyb20gJy4uL1R5cGVzJztcbmltcG9ydCB7IEMwIH0gZnJvbSAnLi4vLi4vY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzJztcblxuLy8gcmVnICsgc2hpZnQga2V5IG1hcHBpbmdzIGZvciBkaWdpdHMgYW5kIHNwZWNpYWwgY2hhcnNcbmNvbnN0IEtFWUNPREVfS0VZX01BUFBJTkdTOiB7IFtrZXk6IG51bWJlcl06IFtzdHJpbmcsIHN0cmluZ119ID0ge1xuICAvLyBkaWdpdHMgMC05XG4gIDQ4OiBbJzAnLCAnKSddLFxuICA0OTogWycxJywgJyEnXSxcbiAgNTA6IFsnMicsICdAJ10sXG4gIDUxOiBbJzMnLCAnIyddLFxuICA1MjogWyc0JywgJyQnXSxcbiAgNTM6IFsnNScsICclJ10sXG4gIDU0OiBbJzYnLCAnXiddLFxuICA1NTogWyc3JywgJyYnXSxcbiAgNTY6IFsnOCcsICcqJ10sXG4gIDU3OiBbJzknLCAnKCddLFxuXG4gIC8vIHNwZWNpYWwgY2hhcnNcbiAgMTg2OiBbJzsnLCAnOiddLFxuICAxODc6IFsnPScsICcrJ10sXG4gIDE4ODogWycsJywgJzwnXSxcbiAgMTg5OiBbJy0nLCAnXyddLFxuICAxOTA6IFsnLicsICc+J10sXG4gIDE5MTogWycvJywgJz8nXSxcbiAgMTkyOiBbJ2AnLCAnfiddLFxuICAyMTk6IFsnWycsICd7J10sXG4gIDIyMDogWydcXFxcJywgJ3wnXSxcbiAgMjIxOiBbJ10nLCAnfSddLFxuICAyMjI6IFsnXFwnJywgJ1wiJ11cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZUtleWJvYXJkRXZlbnQoXG4gIGV2OiBJS2V5Ym9hcmRFdmVudCxcbiAgYXBwbGljYXRpb25DdXJzb3JNb2RlOiBib29sZWFuLFxuICBpc01hYzogYm9vbGVhbixcbiAgbWFjT3B0aW9uSXNNZXRhOiBib29sZWFuXG4pOiBJS2V5Ym9hcmRSZXN1bHQge1xuICBjb25zdCByZXN1bHQ6IElLZXlib2FyZFJlc3VsdCA9IHtcbiAgICB0eXBlOiBLZXlib2FyZFJlc3VsdFR5cGUuU0VORF9LRVksXG4gICAgLy8gV2hldGhlciB0byBjYW5jZWwgZXZlbnQgcHJvcG9nYXRpb24gKE5PVEU6IHRoaXMgbWF5IG5vdCBiZSBuZWVkZWQgc2luY2UgdGhlIGV2ZW50IGlzXG4gICAgLy8gY2FuY2VsZWQgYXQgdGhlIGVuZCBvZiBrZXlEb3duXG4gICAgY2FuY2VsOiBmYWxzZSxcbiAgICAvLyBUaGUgbmV3IGtleSBldmVuIHRvIGVtaXRcbiAgICBrZXk6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCBtb2RpZmllcnMgPSAoZXYuc2hpZnRLZXkgPyAxIDogMCkgfCAoZXYuYWx0S2V5ID8gMiA6IDApIHwgKGV2LmN0cmxLZXkgPyA0IDogMCkgfCAoZXYubWV0YUtleSA/IDggOiAwKTtcbiAgc3dpdGNoIChldi5rZXlDb2RlKSB7XG4gICAgY2FzZSAwOlxuICAgICAgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRVcEFycm93Jykge1xuICAgICAgICBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPQSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbQSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRMZWZ0QXJyb3cnKSB7XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09EJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tEJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dFJpZ2h0QXJyb3cnKSB7XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09DJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tDJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dERvd25BcnJvdycpIHtcbiAgICAgICAgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0InO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW0InO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICAvLyBiYWNrc3BhY2VcbiAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuQlM7IC8vIF5IXG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmIChldi5hbHRLZXkpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArIEMwLkRFTDsgLy8gXFxlIF4/XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmtleSA9IEMwLkRFTDsgLy8gXj9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIC8vIHRhYlxuICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW1onO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5rZXkgPSBDMC5IVDtcbiAgICAgIHJlc3VsdC5jYW5jZWwgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIC8vIHJldHVybi9lbnRlclxuICAgICAgcmVzdWx0LmtleSA9IEMwLkNSO1xuICAgICAgcmVzdWx0LmNhbmNlbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgICAgLy8gZXNjYXBlXG4gICAgICByZXN1bHQua2V5ID0gQzAuRVNDO1xuICAgICAgcmVzdWx0LmNhbmNlbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM3OlxuICAgICAgLy8gbGVmdC1hcnJvd1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnRCc7XG4gICAgICAgIC8vIEhBQ0s6IE1ha2UgQWx0ICsgbGVmdC1hcnJvdyBiZWhhdmUgbGlrZSBDdHJsICsgbGVmdC1hcnJvdzogbW92ZSBvbmUgd29yZCBiYWNrd2FyZHNcbiAgICAgICAgLy8gaHR0cDovL3VuaXguc3RhY2tleGNoYW5nZS5jb20vYS8xMDgxMDZcbiAgICAgICAgLy8gbWFjT1MgdXNlcyBkaWZmZXJlbnQgZXNjYXBlIHNlcXVlbmNlcyB0aGFuIGxpbnV4XG4gICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBDMC5FU0MgKyAnWzE7M0QnKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IGlzTWFjID8gQzAuRVNDICsgJ2InIDogQzAuRVNDICsgJ1sxOzVEJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPRCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tEJztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzk6XG4gICAgICAvLyByaWdodC1hcnJvd1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQyc7XG4gICAgICAgIC8vIEhBQ0s6IE1ha2UgQWx0ICsgcmlnaHQtYXJyb3cgYmVoYXZlIGxpa2UgQ3RybCArIHJpZ2h0LWFycm93OiBtb3ZlIG9uZSB3b3JkIGZvcndhcmRcbiAgICAgICAgLy8gaHR0cDovL3VuaXguc3RhY2tleGNoYW5nZS5jb20vYS8xMDgxMDZcbiAgICAgICAgLy8gbWFjT1MgdXNlcyBkaWZmZXJlbnQgZXNjYXBlIHNlcXVlbmNlcyB0aGFuIGxpbnV4XG4gICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBDMC5FU0MgKyAnWzE7M0MnKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IGlzTWFjID8gQzAuRVNDICsgJ2YnIDogQzAuRVNDICsgJ1sxOzVDJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPQyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1tDJztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzg6XG4gICAgICAvLyB1cC1hcnJvd1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQSc7XG4gICAgICAgIC8vIEhBQ0s6IE1ha2UgQWx0ICsgdXAtYXJyb3cgYmVoYXZlIGxpa2UgQ3RybCArIHVwLWFycm93XG4gICAgICAgIC8vIGh0dHA6Ly91bml4LnN0YWNrZXhjaGFuZ2UuY29tL2EvMTA4MTA2XG4gICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBDMC5FU0MgKyAnWzE7M0EnKSB7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTs1QSc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0EnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbQSc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQwOlxuICAgICAgLy8gZG93bi1hcnJvd1xuICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQic7XG4gICAgICAgIC8vIEhBQ0s6IE1ha2UgQWx0ICsgZG93bi1hcnJvdyBiZWhhdmUgbGlrZSBDdHJsICsgZG93bi1hcnJvd1xuICAgICAgICAvLyBodHRwOi8vdW5peC5zdGFja2V4Y2hhbmdlLmNvbS9hLzEwODEwNlxuICAgICAgICBpZiAocmVzdWx0LmtleSA9PT0gQzAuRVNDICsgJ1sxOzNCJykge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7NUInO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ09CJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnW0InO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0NTpcbiAgICAgIC8vIGluc2VydFxuICAgICAgaWYgKCFldi5zaGlmdEtleSAmJiAhZXYuY3RybEtleSkge1xuICAgICAgICAvLyA8Q3RybD4gb3IgPFNoaWZ0PiArIDxJbnNlcnQ+IGFyZSB1c2VkIHRvXG4gICAgICAgIC8vIGNvcHktcGFzdGUgb24gc29tZSBzeXN0ZW1zLlxuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1syfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ2OlxuICAgICAgLy8gZGVsZXRlXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzN+JztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzY6XG4gICAgICAvLyBob21lXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdIJztcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0gnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbSCc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM1OlxuICAgICAgLy8gZW5kXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdGJztcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnT0YnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbRic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDMzOlxuICAgICAgLy8gcGFnZSB1cFxuICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlc3VsdC50eXBlID0gS2V5Ym9hcmRSZXN1bHRUeXBlLlBBR0VfVVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQua2V5ID0gQzAuRVNDICsgJ1s1fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM0OlxuICAgICAgLy8gcGFnZSBkb3duXG4gICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgcmVzdWx0LnR5cGUgPSBLZXlib2FyZFJlc3VsdFR5cGUuUEFHRV9ET1dOO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbNn4nO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTI6XG4gICAgICAvLyBGMS1GMTJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1AnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUCc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExMzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1EnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUSc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNDpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1InO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1MnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdPUyc7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNjpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTU7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE1fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExNzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTc7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE3fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExODpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTg7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE4fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExOTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMTk7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzE5fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMDpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjA7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIwfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMTpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjE7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIxfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMjpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzIzfic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyMzpcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArICdbMjQ7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyAnWzI0fic7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gYS16IGFuZCBzcGFjZVxuICAgICAgaWYgKGV2LmN0cmxLZXkgJiYgIWV2LnNoaWZ0S2V5ICYmICFldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPj0gNjUgJiYgZXYua2V5Q29kZSA8PSA5MCkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2LmtleUNvZGUgLSA2NCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMzIpIHtcbiAgICAgICAgICAvLyBOVUxcbiAgICAgICAgICByZXN1bHQua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZSgwKTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID49IDUxICYmIGV2LmtleUNvZGUgPD0gNTUpIHtcbiAgICAgICAgICAvLyBlc2NhcGUsIGZpbGUgc2VwLCBncm91cCBzZXAsIHJlY29yZCBzZXAsIHVuaXQgc2VwXG4gICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXYua2V5Q29kZSAtIDUxICsgMjcpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDU2KSB7XG4gICAgICAgICAgLy8gZGVsZXRlXG4gICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTI3KTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09PSAyMTkpIHtcbiAgICAgICAgICAvLyBeWyAtIENvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlciAoQ1NJKVxuICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI3KTtcbiAgICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09PSAyMjApIHtcbiAgICAgICAgICAvLyBeXFwgLSBTdHJpbmcgVGVybWluYXRvciAoU1QpXG4gICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjgpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDIyMSkge1xuICAgICAgICAgIC8vIF5dIC0gT3BlcmF0aW5nIFN5c3RlbSBDb21tYW5kIChPU0MpXG4gICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCghaXNNYWMgfHwgbWFjT3B0aW9uSXNNZXRhKSAmJiBldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgLy8gT24gbWFjT1MgdGhpcyBpcyBhIHRoaXJkIGxldmVsIHNoaWZ0IHdoZW4gIW1hY09wdGlvbklzTWV0YS4gVXNlIDxFc2M+IGluc3RlYWQuXG4gICAgICAgIGNvbnN0IGtleU1hcHBpbmcgPSBLRVlDT0RFX0tFWV9NQVBQSU5HU1tldi5rZXlDb2RlXTtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5TWFwcGluZyAmJiBrZXlNYXBwaW5nWyFldi5zaGlmdEtleSA/IDAgOiAxXTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIHJlc3VsdC5rZXkgPSBDMC5FU0MgKyBrZXk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA+PSA2NSAmJiBldi5rZXlDb2RlIDw9IDkwKSB7XG4gICAgICAgICAgY29uc3Qga2V5Q29kZSA9IGV2LmN0cmxLZXkgPyBldi5rZXlDb2RlIC0gNjQgOiBldi5rZXlDb2RlICsgMzI7XG4gICAgICAgICAgcmVzdWx0LmtleSA9IEMwLkVTQyArIFN0cmluZy5mcm9tQ2hhckNvZGUoa2V5Q29kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNNYWMgJiYgIWV2LmFsdEtleSAmJiAhZXYuY3RybEtleSAmJiBldi5tZXRhS2V5KSB7XG4gICAgICAgIGlmIChldi5rZXlDb2RlID09PSA2NSkgeyAvLyBjbWQgKyBhXG4gICAgICAgICAgcmVzdWx0LnR5cGUgPSBLZXlib2FyZFJlc3VsdFR5cGUuU0VMRUNUX0FMTDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3h0ZXJtL3NyYy9jb3JlL2lucHV0L0tleWJvYXJkLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n")}]);